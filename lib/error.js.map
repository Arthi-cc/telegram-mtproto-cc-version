{"version":3,"sources":["../src/error.js"],"names":["Error","stackTraceLimit","MTError","getMessage","code","type","message","constructor","fullMessage","stack","TypedError","groupOffset","blockOffset","typeOffset","block","group","toString","ErrorBadResponse","url","originalError","ErrorBadRequest","ErrorNotFound","err","config","DcUrlError","dcID","dc","RpcError","RpcApiError","of","data","error_code","error_message","toValue","toJSON","ProtocolError","shortMessage","fullDescription","description","TypeBufferIntError","getTypeBufferMessage","ctx","offset","length","intView","typeBuffer","AuthKeyError","ProviderRegistryError","uid"],"mappings":"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","file":"error.js","sourcesContent":["//@flow\n\nimport { type $AxiosXHR } from 'axios'\n\nimport stackCleaner from './util/clean-stack'\nimport type { TypeBuffer } from './tl/type-buffer'\nimport { type MTPᐸRpcErrorᐳ } from './mtp.h'\n\nError.stackTraceLimit = 25\n\nexport class MTError extends Error {\n  static getMessage(code: number, type: string, message: string) {\n    return `MT[${code}] ${type}: ${message}`\n  }\n  code: number\n  type: string\n  constructor(code: number, type: string, message: string) {\n    const fullMessage = MTError.getMessage(code, type, message)\n    super(fullMessage)\n    this.code = code\n    this.type = type\n    this.stack = stackCleaner(this.stack)\n  }\n}\n\nexport class TypedError extends MTError {\n  static group: string\n  group: string\n  static block: string\n  block: string\n  static type: string\n  static groupOffset: number\n  static blockOffset: number\n  static typeOffset: number\n  constructor(message: string) {\n    super(0, '', '')\n    const code = 1e4 +\n      this.constructor.groupOffset * 1e3 +\n      this.constructor.blockOffset * 1e2 +\n      this.constructor.typeOffset\n    this.code = code\n    this.block = this.constructor.block\n    this.group = this.constructor.group\n    this.type = this.constructor.type\n    this.message = `[${this.group} ${this.block} ${this.type}|${code.toString(10)}] ${message}`\n  }\n}\n\nexport class ErrorBadResponse extends MTError {\n  originalError: Error | $AxiosXHR<any>\n  constructor(url: string, originalError?: Error | null | $AxiosXHR<any> = null) {\n    super(406, 'NETWORK_BAD_RESPONSE', url)\n    if (originalError)\n      this.originalError = originalError\n  }\n}\n\nexport class ErrorBadRequest extends MTError {\n  originalError: Error\n  constructor(url: string, originalError?: Error | null = null) {\n    super(406, 'NETWORK_BAD_REQUEST', url)\n    if (originalError)\n      this.originalError = originalError\n  }\n}\n\nexport class ErrorNotFound extends MTError {\n  constructor(err: { config: { url: string } }) {\n    super(404, 'REQUEST_FAILED', err.config.url)\n      // this.originalError = err\n  }\n}\n\nexport class DcUrlError extends MTError {\n  constructor(dcID: number, dc: string | boolean) {\n    super(860, 'WRONG_DC_URL', `Wrong url! dcID ${dcID}, url ${dc.toString()}`)\n      // this.originalError = err\n  }\n}\n\n/**\n *\n * @deprecated Error format is changed!\n * @class RpcError\n * @extends {MTError}\n */\nexport class RpcError extends MTError {\n  originalError: *\n  constructor(code: number, type: string, message: string, originalError: *) {\n    super(code, type, message)\n    this.originalError = originalError\n  }\n}\n\n/**\n * Api error object\n *\n * @class RpcApiError\n * @extends {MTError}\n */\nexport class RpcApiError extends MTError {\n  constructor(code: number = 999, message: string = 'no message') {\n    super(code, 'RpcApiError', '')\n    this.message = message\n  }\n  static of(data: MTPᐸRpcErrorᐳ): RpcApiError {\n    return new RpcApiError(data.error_code, data.error_message)\n  }\n  toValue() {\n    return {\n      type   : 'RpcApiError',\n      code   : this.code,\n      message: this.message\n    }\n  }\n  toJSON() {\n    return this.toValue()\n  }\n}\n\nexport class ProtocolError extends MTError {\n  constructor(code: number, shortMessage: string, fullDescription: string) {\n    super(code, 'ProtocolError', shortMessage)\n    this.description = fullDescription\n  }\n}\n\nexport class TypeBufferIntError extends MTError {\n  static getTypeBufferMessage(ctx: TypeBuffer) {\n    const offset = ctx.offset\n    const length = ctx.intView.length * 4\n    return `Can not get next int: offset ${offset} length: ${length}`\n  }\n  typeBuffer: TypeBuffer\n  constructor(ctx: TypeBuffer) {\n    const message = TypeBufferIntError.getTypeBufferMessage(ctx)\n    super(800, 'NO_NEXT_INT', message)\n    this.typeBuffer = ctx\n  }\n}\n\nexport class AuthKeyError extends MTError {\n  constructor() {\n    super(401, 'AUTH_KEY_EMPTY', '')\n  }\n}\n\nexport class ProviderRegistryError extends MTError {\n  constructor(uid: string) {\n    super(850, 'NO_INSTANCE', `Lib instance ${uid} not found in registry`)\n  }\n}\n"]}