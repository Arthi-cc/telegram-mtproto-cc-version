{"version":3,"sources":["../../../src/util/monad-t/key-value.js"],"names":["Just","Nothing","KeyValue","constructor","pairs","length","keys","map","pair","fst","values","snd","toValue","e","inspect","toJSON","String","hasKey","key","hasValue","value","maybeGetK","unsafeGetK","maybeGetV","unsafeGetV","push","list","fromArray","result","reduce","acc","val","some","x","eqFirst","concat","removeK","removeV","extend","fn","tuple","empty","of","indexOf"],"mappings":"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","file":"key-value.js","sourcesContent":["//@flow\n\nimport { append, without, contains, into } from 'ramda'\n// import { Maybe, Just, Nothing } from 'folktale/maybe'\nimport { Maybe } from 'apropos'\nconst { Just, Nothing } = Maybe\n\nimport { Tuple, TupleT } from './tuple'\n\n\nexport class KeyValue<Key, Val> {\n  pairs: Array<Tuple<Key, Val>>\n  values: Array<Val>\n  keys: Array<Key>\n  length: number\n  constructor(pairs: Array<Tuple<Key, Val>>) {\n    this.pairs /*::; const c */ = pairs\n    this.length /*::; const l */ = pairs.length\n  }\n  get keys(): Array<Key> {\n    return this.pairs.map(pair => pair.fst())\n  }\n  get values(): Array<Val> {\n    return this.pairs.map(pair => pair.snd())\n  }\n  toValue() {\n    return this.pairs.map(e => e.toValue())\n  }\n  inspect() {\n    return this.toJSON()\n  }\n  toJSON() {\n    if (this.length === 0) return 'empty'\n    const pairs = this.pairs.map(e => e.toValue())\n    if (String(this.keys[0]) === '[object Object]')\n      return pairs\n    return into({}, e => e, pairs)\n  }\n  hasKey(key: Key): boolean {\n    return contains(key, this.keys)\n  }\n  hasValue(value: Val): boolean {\n    return contains(value, this.values)\n  }\n  maybeGetK(key: Key): Maybe<Tuple<Key, Val>> {\n    if (!this.hasKey(key)) return Nothing()\n    return Just(unsafeGetK(this.pairs, this.keys, key))\n  }\n  maybeGetV(value: Val): Maybe<Tuple<Key, Val>> {\n    if (!this.hasValue(value)) return Nothing()\n    return Just(unsafeGetV(this.pairs, this.values, value))\n  }\n  push(list: [Key, Val][]): KeyValue<Key, Val> {\n    const pairs = TupleT.fromArray(list)\n    const result = pairs.reduce(\n      (acc, val) => this.pairs.some(x => x.eqFirst(val))\n        ? acc\n        : append(val, acc)\n      ,\n      []\n    )\n    return new KeyValue(this.pairs.concat(result))\n  }\n  removeK(key: Key): KeyValue<Key, Val> {\n    if (this.hasKey(key))\n      return new KeyValue(without([\n        unsafeGetK(this.pairs, this.keys, key)\n      ], this.pairs))\n    return this\n  }\n  removeV(value: Val): KeyValue<Key, Val> {\n    if (this.hasValue(value))\n      return new KeyValue(without([\n        unsafeGetV(this.pairs, this.values, value)\n      ], this.pairs))\n    return this\n  }\n  extend<Valʹ>(fn: (x: Tuple<Key, Val>) => Valʹ): KeyValue<Key, Valʹ> {\n    const extend = (tuple: Tuple<Key, Val>): Tuple<Key, Valʹ> => tuple.extend(fn)\n    const pairs: Array<Tuple<Key, Valʹ>> = this.pairs.map(extend)\n    return new KeyValue( pairs )\n  }\n  static empty<+Keyʹ, +Valʹ>(): KeyValue<Keyʹ, Valʹ> {\n    return new KeyValue([])\n  }\n  static of<Keyʹ, Valʹ>(pairs: Array<Tuple<Keyʹ, Valʹ>>): KeyValue<Keyʹ, Valʹ> {\n    return new KeyValue(pairs)\n  }\n}\n\n\nfunction unsafeGetK<Key, Val>(\n  pairs: $ReadOnlyArray<Tuple<Key, Val>>,\n  keys: $ReadOnlyArray<Key>,\n  key: Key\n): Tuple<Key, Val> {\n  return pairs[keys.indexOf(key)]\n}\nfunction unsafeGetV<Key, Val>(\n  pairs: $ReadOnlyArray<Tuple<Key, Val>>,\n  values: $ReadOnlyArray<Val>,\n  value: Val\n): Tuple<Key, Val> {\n  return pairs[values.indexOf(value)]\n}\n"]}