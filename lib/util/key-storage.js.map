{"version":3,"sources":["../../src/util/key-storage.js"],"names":["of","Just","Nothing","KeyStorage","length","ids","constructor","keyMap","Object","defineProperties","value","has","dc","isFinite","indexOf","parseInt","get","String","getMaybe","result","Array","isArray","set","dcN","Set","remove","merge","obj","rawResult","e","numberKeys","toValue","toJSON","fullKeyMap","keys","filter","map"],"mappings":"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","file":"key-storage.js","sourcesContent":["//@flow\n\nimport {\n  dissoc,\n  without,\n  filter,\n} from 'ramda'\n\n// import { Just, Nothing, Maybe } from 'folktale/maybe'\nimport { Maybe } from 'apropos'\nconst { Just, Nothing } = Maybe\n\nexport class KeyStorage {\n  keyMap: { [dc: string]: number[] }\n  ids: number[]\n  get length(): number {\n    return this.ids.length\n  }\n  constructor(keyMap: { [dc: string]: number[] }, ids: number[]) {\n    Object.defineProperties(this, {\n      keyMap: {\n        value: keyMap\n      },\n      ids: {\n        value: ids,\n      }\n    })\n  }\n  has(dc: number | string) {\n    if (!isFinite(dc)) return false\n    return this.ids.indexOf(parseInt(dc, 10)) > -1\n  }\n  get(dc: number | string) {\n    if (!this.has(dc)) return false\n    return this.keyMap[String(dc)]\n  }\n  getMaybe(dc: number | string): Maybe<number[]> {\n    if (!this.has(dc)) return Nothing()\n    const result = this.keyMap[String(dc)]\n    if (Array.isArray(result) && result.length > 0) {\n      return Just(result)\n    }\n    return Nothing()\n  }\n  set(dc: number | string, value: number[]) {\n    if (!isFinite(dc)) return this\n    const dcN = parseInt(dc, 10)\n    return new KeyStorage({\n      ...this.keyMap,\n      [String(dc)]: value,\n    }, [\n      ...new Set([...this.ids, dcN])\n    ])\n  }\n  remove(dc: number | string) {\n    if (!this.has(dc)) return this\n    const dcN = parseInt(dc, 10)\n    return new KeyStorage(\n      dissoc(String(dc), this.keyMap),\n      without([dcN], this.ids)\n    )\n  }\n  merge(obj: { [dc: any]: number[] | false }) {\n    if (__DEV__)\n      console.warn(obj)\n    const rawResult = { ...this.keyMap, ...obj }\n    const result = filter(e => Array.isArray(e), rawResult)\n    return new KeyStorage(\n      result,\n      numberKeys(result)\n    )\n  }\n  toValue() {\n    return this.keyMap\n  }\n  toJSON() {\n    return this.toValue()\n  }\n\n  static of(keyMap?: { [dc: any]: number[] }) {\n    let fullKeyMap = keyMap\n    if (!fullKeyMap) {\n      const emptyKeyMap: any = {}\n      fullKeyMap = emptyKeyMap\n    }\n    const ids = numberKeys(fullKeyMap)\n    return new KeyStorage(fullKeyMap, ids)\n  }\n}\n\nexport default function of(keyMap?: { [dc: any]: number[] }) {\n  let fullKeyMap = keyMap\n  if (!fullKeyMap) {\n    const emptyKeyMap: any = {}\n    fullKeyMap = emptyKeyMap\n  }\n  const ids = numberKeys(fullKeyMap)\n  return new KeyStorage(fullKeyMap, ids)\n}\n\n\nconst numberKeys = obj => Object\n  .keys(obj)\n  .filter(isFinite)\n  .map(e => parseInt(e, 10))\n"]}