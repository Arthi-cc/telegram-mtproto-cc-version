{"version":3,"sources":["../../src/util/stream-snippet.draft.js"],"names":["DIR","makeName","name","index","toString","join","makeSnippet","filter","epic","action$","mcast","thru","multicast","raw","counter","scan","n","skip","zip","begin","end","data","count","observe","fullName","stringify","stringifyOnce","replacer","isAxios","val","request","headers","printArrayBuffer","Int32Array","key","obj","indent","printedObjects","printedObjectKeys","JSON","printOnceReplacer","value","length","printedObjIndex","forEach","push","constructor"],"mappings":"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","file":"stream-snippet.draft.js","sourcesContent":["//@flow\n\nimport { writeFileSync, ensureDirSync } from 'fs-extra'\nimport { type Stream } from 'most'\nimport { join } from 'path'\n\nconst DIR = 'snippet'\n\nconst makeName = (name: string[], index: number) => join('.', DIR, ...name, [index.toString(10), '.json'].join(''))\n\nconst makeSnippet = (name: string[]) => {\n  ensureDirSync(join('.', DIR, ...name))\n  return (filter: any, epic: (action$: Stream<any>) => Stream<any>) => (action$: Stream<any>) => {\n    const mcast = action$.thru(filter).multicast()\n    const raw = epic(mcast)\n    const counter = mcast\n      .scan(n => n+1, 0)\n      .skip(1)\n    mcast\n      .zip((begin, end) => ({ begin, end }), raw)\n      .zip((data, count) => ({ ...data, count }), counter)\n      .observe(({ begin, end, count }) => {\n        const fullName = makeName(name, count)\n        const stringify = stringifyOnce({ begin, end }, 2, replacer)\n        writeFileSync(fullName, stringify)\n      })\n    return raw\n  }\n}\n\nconst isAxios = (val: mixed) => typeof val === 'object' && val != null\n  && val.request != null\n  && val.headers != null\n\nconst printArrayBuffer = (val: ArrayBuffer) => `ArrayBuffer [${(new Int32Array(val)).toString()}]`\n\nconst replacer = (key: string, val: mixed) => {\n  if (isAxios(val))\n    return printArrayBuffer(val.data)\n  return val\n}\n\nfunction stringifyOnce(obj, indent, replacer){\n  const printedObjects = []\n  const printedObjectKeys = []\n\n  function printOnceReplacer(key, value){\n    if ( printedObjects.length > 2000){ // browsers will not print more than 20K, I don't see the point to allow 2K.. algorithm will not be fast anyway if we have too many objects\n      return 'object too long'\n    }\n    let printedObjIndex = false\n    printedObjects.forEach((obj, index) => {\n      if (obj===value){\n        printedObjIndex = index\n      }\n    })\n\n    if ( key == ''){ //root element\n      printedObjects.push(obj)\n      printedObjectKeys.push('root')\n      return value\n    }\n\n    else if (`${printedObjIndex}` != 'false' && typeof (value)=='object'){\n      if ( printedObjectKeys[printedObjIndex] == 'root'){\n        return '(root)'\n      } else {\n        return '(' + printedObjectKeys[printedObjIndex] + ' ' + ((!!value && !!value.constructor) ? value.constructor.name  : typeof (value)) + ')'\n      }\n    } else {\n\n      const qualifiedKey = key || '(empty key)'\n      printedObjects.push(value)\n      printedObjectKeys.push(qualifiedKey)\n      if (replacer){\n        return replacer(key, value)\n      } else {\n        return value\n      }\n    }\n  }\n  return JSON.stringify(obj, printOnceReplacer, indent)\n}\n\nexport default makeSnippet\n"]}