{"version":3,"sources":["../src/http.js"],"names":["httpClient","create","defaults","headers","post","common","requestOptions","responseType","request","url","data","send"],"mappings":";;;;;;;AAEA;;;;AACA;;;;AAEO,IAAMA,kCAAa,gBAAMC,MAAN,EAAnB;AACP;AACA,OAAOD,WAAWE,QAAX,CAAoBC,OAApB,CAA4BC,IAA5B,CAAiC,cAAjC,CAAP;AACA;AACA,OAAOJ,WAAWE,QAAX,CAAoBC,OAApB,CAA4BE,MAA5B,CAAmC,QAAnC,CAAP;;AAEA,IAAMC,iBAAiB,EAAEC,cAAc,aAAhB,EAAvB;;AAEA,IAAMC,UAAU,CAACC,GAAD,EAAcC,IAAd,KAAmCV,WAAWI,IAAX,CAAgBK,GAAhB,EAAqBC,IAArB,EAA2BJ,cAA3B,CAAnD;;AAGO,IAAMK,sBAAa,uBAASH,OAAT,CAAnB;;AAEP;AACA;AACA;AACA;AACA;;kBAEeR,U","file":"http.js","sourcesContent":["//@flow\n\nimport axios, { AxiosError, AxiosXHR } from 'axios'\nimport { encaseP2, type Encased2 } from 'fluture'\n\nexport const httpClient = axios.create()\n//$FlowIssue\ndelete httpClient.defaults.headers.post['Content-Type']\n//$FlowIssue\ndelete httpClient.defaults.headers.common['Accept']\n\nconst requestOptions = { responseType: 'arraybuffer' }\n\nconst request = (url: string, data: Int32Array) => httpClient.post(url, data, requestOptions)\n\nexport type Send = Encased2<string, Int32Array, AxiosXHR<ArrayBuffer>, AxiosError<ArrayBuffer>>\nexport const send: Send = encaseP2(request)\n\n// export function unwrapPromise<L, R>(\n//   either: Apropos<L, Promise<R>>\n// ): Promise<Apropos<L, R>> {\n//   return either.fold(e => Promise.resolve(Left(e)), x => x.then(Right))\n// }\n\nexport default httpClient\n"]}