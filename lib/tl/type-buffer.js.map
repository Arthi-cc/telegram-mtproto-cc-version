{"version":3,"sources":["../../src/tl/type-buffer.js"],"names":["log","findType","val","type","findPred","predicate","findId","id","getNakedType","schema","checkType","substr","result","constructors","find","Error","getPredicate","getTypeConstruct","construct","getChar","e","String","fromCharCode","getString","length","buffer","bytes","next","map","join","addPadding","countNewLength","maxLength","need","offset","max","Math","rounded","ceil","TypeWriter","constructor","reset","ArrayBuffer","intView","Int32Array","byteView","Uint8Array","set","list","data","checkLength","needBytes","previousBuffer","previousArray","getArray","resultBuffer","resultArray","subarray","getBuffer","getBytesTyped","getBytesPlain","Array","from","writeInt","i","field","writePair","n1","n2","field1","field2","TypeBuffer","toUint32","nextByte","nextInt","int","readPair","int1","int2","isEnd","buf","ln","res","Uint32Array","Buffer","byteLength","readUInt32LE","DataView","getUint32"],"mappings":"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","file":"type-buffer.js","sourcesContent":["//@flow\n\nimport { isNode } from 'Runtime'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger('tl', 'type-buffer')\n\n// import { immediate } from 'mtproto-shared'\nimport { TypeBufferIntError } from '../error'\n\n// import { bigint, uintToInt, intToUint, bytesToHex,\n//   gzipUncompress, bytesToArrayBuffer, longToInts, lshift32 } from '../bin'\n\nimport type { BinaryData, TLConstruct, TLSchema } from './index.h'\n\nfunction findType(val: TLConstruct) {\n  return val.type == this\n}\n\nfunction findPred(val: TLConstruct) {\n  return val.predicate == this\n}\n\nfunction findId(val: TLConstruct) {\n  return val.id == this\n}\n\nexport const getNakedType = (type: string, schema: TLSchema) => {\n  const checkType = type.substr(1)\n  const result = schema.constructors.find(findType, checkType)\n  if (!result)\n    throw new Error(`Constructor not found for type: ${type}`)\n  return result\n}\n\nexport const getPredicate = (type: string, schema: TLSchema) => {\n  const result = schema.constructors.find(findPred, type)\n  if (!result)\n    throw new Error(`Constructor not found for predicate: ${type}`)\n  return result\n}\n\nexport const getTypeConstruct =\n  (construct: number, schema: TLSchema) =>\n    schema.constructors.find(findId, construct)\n\nconst getChar = (e: number) => String.fromCharCode(e)\n\nexport const getString = (length: number, buffer: TypeBuffer) => {\n  const bytes = buffer.next(length)\n\n  const result = [...bytes].map(getChar).join('')\n  buffer.addPadding()\n  return result\n}\n\nconst countNewLength = (maxLength: number, need: number, offset: number) => {\n  const e1 = maxLength * 2\n  const e2 = offset + need + 16\n  const max = Math.max(e1, e2) / 4\n  const rounded = Math.ceil(max) * 4\n  return rounded\n}\n\n// const writeIntLogger = log('writeInt')\n\n// const writeIntLog = (i: number, field: string) => {\n//   const hex = i && i.toString(16) || 'UNDEF'\n//   writeIntLogger(hex, i, field)\n// }\n\nexport class TypeWriter {\n  offset: number = 0 // in bytes\n  buffer: ArrayBuffer\n  intView: Int32Array\n  byteView: Uint8Array\n  maxLength: number\n  constructor(/*startMaxLength: number*/) {\n    // this.maxLength = startMaxLength\n    // this.reset()\n  }\n  reset() {\n    this.buffer = new ArrayBuffer(this.maxLength)\n    this.intView = new Int32Array(this.buffer)\n    this.byteView = new Uint8Array(this.buffer)\n  }\n  set(list: BinaryData, length: number) {\n    this.byteView.set(list, this.offset)\n    this.offset += length\n  }\n  next(data: number) {\n    this.byteView[this.offset] = data\n    this.offset++\n  }\n  checkLength(needBytes: number) {\n    if (this.offset + needBytes < this.maxLength) {\n      return\n    }\n    log('Increase buffer')(this.offset, needBytes, this.maxLength)\n    this.maxLength = countNewLength(\n      this.maxLength,\n      needBytes,\n      this.offset\n    )\n    const previousBuffer = this.buffer\n    const previousArray = new Int32Array(previousBuffer)\n\n    this.reset()\n\n    new Int32Array(this.buffer).set(previousArray)\n  }\n  getArray() {\n    const resultBuffer = new ArrayBuffer(this.offset)\n    const resultArray = new Int32Array(resultBuffer)\n\n    resultArray.set(this.intView.subarray(0, this.offset / 4))\n\n    return resultArray\n  }\n  getBuffer() {\n    return this.getArray().buffer\n  }\n  getBytesTyped() {\n    const resultBuffer = new ArrayBuffer(this.offset)\n    const resultArray = new Uint8Array(resultBuffer)\n\n    resultArray.set(this.byteView.subarray(0, this.offset))\n\n    return resultArray\n  }\n  getBytesPlain(): number[] {\n    return Array.from(this.byteView.subarray(0, this.offset))\n  }\n  writeInt(i: number, field: string) {\n    // immediate(writeIntLog, i, field)\n\n    this.checkLength(4)\n    this.intView[this.offset / 4] = i\n    this.offset += 4\n  }\n  writePair(n1: number, n2: number, field1: string, field2: string) {\n    this.writeInt(n1, field1)\n    this.writeInt(n2, field2)\n  }\n  addPadding() {\n    while (this.offset % 4)\n      this.next(0)\n  }\n}\n\nexport class TypeBuffer {\n  offset: number = 0\n  buffer: Buffer | ArrayBuffer\n  intView: Uint32Array\n  byteView: Uint8Array\n  constructor(buffer: Buffer | ArrayBuffer) {\n    this.buffer = buffer\n    this.intView = toUint32(buffer)\n    this.byteView = new Uint8Array(buffer)\n  }\n\n  nextByte() {\n    return this.byteView[this.offset++]\n  }\n  nextInt() {\n    if (this.offset >= this.intView.length * 4)\n      throw new TypeBufferIntError(this)\n    const int = this.intView[this.offset / 4]\n    this.offset += 4\n    return int\n  }\n  readPair() {\n    const int1 = this.nextInt()\n    const int2 = this.nextInt()\n    return [ int1, int2 ]\n  }\n  next(length: number) {\n    const result = this.byteView.subarray(this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n  isEnd() {\n    return this.offset === this.byteView.length\n  }\n  addPadding() {\n    const offset = this.offset % 4\n    if (offset > 0)\n      this.offset += 4 - offset\n  }\n}\n\nfunction toUint32(buf: Buffer | ArrayBuffer) {\n  let ln, res\n  if (!isNode) //TODO browser behavior not equals, why?\n    return new Uint32Array( buf )\n  if (buf instanceof Buffer) {\n    ln = buf.byteLength / 4\n    res = new Uint32Array( ln )\n    for (let i = 0; i < ln; i++)\n      res[i] = buf.readUInt32LE( i*4 )\n  } else {\n    const data = new DataView( buf )\n    ln = data.byteLength / 4\n    res = new Uint32Array( ln )\n    for (let i = 0; i < ln; i++)\n      res[i] = data.getUint32( i*4, true )\n  }\n  return res\n}\n"]}