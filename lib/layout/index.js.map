{"version":3,"sources":["../../src/layout/index.js"],"names":["TypeClass","constructor","name","types","Set","Argument","id","typeClass","isVector","isBare","isFlag","flagIndex","NaN","fullType","obj","result","Creator","hasFlags","params","Method","returns","Type","isFlagItself","param","type","Layout","makeCreator","elem","sign","Construct","args","entries","i","getTypeProps","pushTypeClass","arg","seqSet","add","push","set","parseInt","creator","creators","funcs","typesById","makeMethod","method","instance","typeClasses","has","get","makeType","predicate","makeLayout","schema","methods","constructors","map","key","hasEmpty","typeDefaults","_","Map","bind","hasQuestion","hasVector","hasBare","rawType","prefix","rest","split","index","slice","isSimpleType","getFlagsRed","data","acc","getFlags","flagsParams","filter","e","reduce"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport { has, flip, contains } from 'ramda'\n\nimport type { SchemaElement, TLMethod, TLConstruct, TLSchema, SchemaParam } from './index.h'\n\nclass TypeClass {\n  name: string\n\n  types: Set<string> = new Set\n  constructor(name: string) {\n    this.name = name\n  }\n  /*isTypeOf(value: any): boolean {\n    return false\n  }*/\n}\n\nclass Argument {\n  id: string\n  name: string\n  typeClass: string\n  isVector: boolean\n  isBare: boolean\n  isFlag: boolean\n  flagIndex: number\n  fullType: string\n  constructor(id: string,\n              name: string,\n              typeClass: string,\n              isVector: boolean = false,\n              isBare: boolean = false,\n              isFlag: boolean = false,\n              flagIndex: number = NaN) {\n    this.name = name\n    this.typeClass = typeClass\n    this.isVector = isVector\n    this.isBare = isBare\n    this.isFlag = isFlag\n    this.flagIndex = flagIndex\n    this.id = id\n\n    this.fullType = Argument.fullType(this)\n  }\n  static fullType(obj: Argument) {\n    const { typeClass, isVector, isFlag, flagIndex } = obj\n    let result = typeClass\n    if (isVector)\n      result = `Vector<${result}>`\n    if (isFlag)\n      result = `flags.${flagIndex}?${result}`\n    return result\n  }\n}\n\nclass Creator {\n  id: number\n  name: string //predicate or method\n  hasFlags: boolean\n  params: Argument[]\n  constructor(id: number,\n              name: string,\n              hasFlags: boolean,\n              params: Argument[]) {\n    this.id = id\n    this.name = name\n    this.hasFlags = hasFlags\n    this.params = params\n  }\n}\n\nclass Method extends Creator {\n  returns: string\n  constructor(id: number,\n              name: string,\n              hasFlags: boolean,\n              params: Argument[],\n              returns: string) {\n    super(id, name, hasFlags, params)\n    this.returns = returns\n  }\n}\n\nclass Type extends Creator {\n  typeClass: string\n  constructor(id: number,\n              name: string,\n              hasFlags: boolean,\n              params: Argument[],\n              typeClass: string) {\n    super(id, name, hasFlags, params)\n    this.typeClass = typeClass\n  }\n}\n\nconst isFlagItself =\n  (param: SchemaParam) =>\n    param.name === 'flags' &&\n    param.type === '#'\n\nexport class Layout {\n  typeClasses: Map<string, TypeClass> = new Map\n  creators: Set<string> = new Set\n  seqSet: Set<string> = new Set\n  args: Map<string, Argument> = new Map\n  funcs: Map<string, Method> = new Map\n  types: Map<string, Type> = new Map\n  typesById: Map<number, Type> = new Map\n  typeDefaults: Map<string, { _: string }> = new Map\n  schema: TLSchema\n  makeCreator(elem: SchemaElement,\n              name: string,\n              sign: string,\n              Construct: typeof Method | typeof Type) {\n    const args: Argument[] = []\n    let hasFlags = false\n    for (const [ i, param ] of elem.params.entries()) {\n      if (isFlagItself(param)) {\n        hasFlags = true\n        continue\n      }\n      const id = `${name}.${param.name}/${i}`\n      const { typeClass, isVector, isFlag, flagIndex, isBare } = getTypeProps(param.type)\n      if (isFlag) hasFlags = true\n      this.pushTypeClass(typeClass)\n      const arg = new Argument(id, param.name, typeClass, isVector, isBare, isFlag, flagIndex)\n      if (param.name === 'seq') {\n        this.seqSet.add(name)\n      }\n      args.push(arg)\n      this.args.set(id, arg)\n    }\n    const id = parseInt(elem.id, 10)\n    const creator = new Construct(id, name, hasFlags, args, sign)\n    this.creators.add(name)\n    if (creator instanceof Method)\n      this.funcs.set(name, creator)\n    else if (creator instanceof Type) {\n      this.types.set(name, creator)\n      this.typesById.set(id, creator)\n    }\n  }\n  makeMethod(elem: TLMethod) {\n    const name = elem.method\n    const returns = elem.type\n    this.pushTypeClass(returns, name)\n    this.makeCreator(elem, name, returns, Method)\n  }\n  pushTypeClass(typeClass: string, type?: string) {\n    let instance\n    if (this.typeClasses.has(typeClass))\n      instance = this.typeClasses.get(typeClass)\n    else {\n      instance = new TypeClass(typeClass)\n      this.typeClasses.set(typeClass, instance)\n    }\n    if (type && instance)\n      instance.types.add(type)\n  }\n  makeType(elem: TLConstruct) {\n    const name = elem.predicate\n    const typeClass = elem.type\n    this.pushTypeClass(typeClass, name)\n    this.makeCreator(elem, name, typeClass, Type)\n  }\n  makeLayout(schema: TLSchema) {\n    const { methods, constructors } = schema\n    constructors.map(this.makeType)\n    methods.map(this.makeMethod)\n    for (const [ key, type ] of this.types.entries())\n      if (hasEmpty(key))\n        this.typeDefaults.set(type.typeClass, { _: key })\n  }\n  constructor(schema: TLSchema) {\n    //$FlowIssue\n    this.makeType = this.makeType.bind(this)\n    //$FlowIssue\n    this.makeMethod = this.makeMethod.bind(this)\n    // this.schema = schema\n    this.makeLayout(schema)\n  }\n}\n\n//$off\ntype Contains = (name: string) => boolean\nconst hasEmpty: Contains = contains('Empty')\nconst hasQuestion: Contains = contains('?')\nconst hasVector: Contains = contains('<')\nconst hasBare: Contains = contains('%')\n\nexport const getTypeProps = (rawType: string) => {\n  const result = {\n    typeClass: rawType,\n    isVector : false,\n    isFlag   : false,\n    flagIndex: NaN,\n    isBare   : false\n  }\n  if (hasQuestion(rawType)) {\n    const [ prefix, rest ] = rawType.split('?')\n    const [ , index ] = prefix.split('.')\n    result.isFlag = true\n    result.flagIndex = parseInt(index, 10)\n    result.typeClass = rest\n  }\n  if (hasVector(result.typeClass)) {\n    result.isVector = true\n    result.typeClass = result.typeClass.slice(7, -1)\n  }\n  if (hasBare(result.typeClass)) {\n    result.isBare = true\n    result.typeClass = result.typeClass.slice(1)\n  }\n  return result\n}\n\nexport const isSimpleType: (type: string) => boolean =\n  //$off\n  flip(contains)(\n    ['int', /*'long',*/ 'string', /*'double', */'true', /*'bytes'*/])\n\nconst getFlagsRed =\n  (data: Object) =>\n    (acc: number, { name, flagIndex }: Argument) =>\n        has(name, data)\n          ? acc + 2 ** flagIndex\n          : acc\n\nexport const getFlags = ({ params }: Creator) => {\n  const flagsParams =\n    params.filter(\n      (e: Argument) => e.isFlag)\n\n  return (data: Object) =>\n    flagsParams\n      .reduce(\n        getFlagsRed(data),\n        0)\n}\n\nexport default Layout"]}