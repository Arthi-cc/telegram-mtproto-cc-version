{"version":3,"sources":["../../../src/service/networker/index.js"],"names":["createThread","log","iii","akStopped","storeIntString","writer","field","value","Error","addInitialMessage","serialBox","appConfig","mapper","pairs","forEach","addAfterMessage","id","isHomeDC","uid","dc","map","x","fold","NetworkerThread","constructor","emitter","rootEmitter","emit","dcID","Object","defineProperties","performSheduledRequest","bind","enumerable","writable","wrapMtpCall","fastCache","init","thread","set","longPoll","setInterval","checkLongPoll","state","get","updateSentMessage","sentMessageID","hasSent","sentMessage","getSent","newInner","inner","innerID","innerSentMessage","push","msg_id","deleteSent","seq_no","notContentRelated","container","newMessage","clone","addSent","method","params","options","serializer","mtproto","storeMethod","seqNo","message","getBytes","pushMessage","deferred","promise","wrapMtpMessage","object","storeObject","wrapApiCall","netReq","data","requestID","connectionInited","apiConfig","afterMessageID","resultType","isAPI","checkLongPollCond","pendingTime","offline","checkLongPollAfterDcCond","isClean","cleanupSent","pollEvents","copyOptions","SENT","ADD","messageID","setPending","noShedule","sheduleRequest","pushResend","delay","msg","checkConnection","toggleOffline","enabled","undefined","cancel","nextReqPromise","nextReq","checkConnectionPeriod","checkConnectionPromise","parseInt","Math","min","Date","now","performResend","hasResends","resendMsgIDs","getResends","_","msg_ids","lastResendReq","req_msg_id","resend_msg_ids","resolve","ackMsgIDs","length","ACK_DELETE","ack","messages","messagesByteLen","lengthOverflow","pendingIds","pendingIterator","deletePending","messageByteLength","size","cond1","cond2","max_delay","wait_after","max_wait","netMessage","getBytesPlain","writePollTime","noResponseMsgs","startMaxLength","contBox","innerMessages","noResponseMessages","innerApi","reduce","acc","val","noResponse","SEND","threadID","ackMessage","msgID","ACK_ADD","reqResendMessage","addResend","notEmpty","sentDel","sentIterator","complete","hasPending","DEL","processMessage","sessionID","isFinite","TypeError","msgidInt","console","warn","processMessageAck","result","networkerDC","error","upload","lastServerMessages","runLongPoll","sendLongPool","poll","throttle","observe","getMsgById","acked","body"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\r\n\r\nimport Bluebird from 'bluebird'\r\nimport uuid from 'Util/uuid'\r\nimport { contains, toPairs } from 'ramda'\r\nimport { fromEvent } from 'most'\r\nimport Emitter, { type Emit } from 'eventemitter2'\r\nimport { smartTimeout, immediate } from 'mtproto-shared'\r\n\r\nimport { tsNow } from '../time-manager'\r\nimport { NetMessage, NetContainer } from './net-message'\r\n\r\nimport { Serialization, TypeWriter } from '../../tl'\r\nimport { writeInnerMessage } from '../chain/perform-request'\r\nimport Config from 'ConfigProvider'\r\nimport { requestNextSeq } from '../../state/reaction'\r\nimport { queryAck, queryHomeDc } from '../../state/query'\r\nimport ApiRequest from '../main/request'\r\nimport { writeInt, writeBytes, writeLong } from '../../tl/writer'\r\n\r\nimport LongPoll from '../../plugins/long-poll'\r\nimport { NET, NETWORKER_STATE } from 'Action'\r\nimport { type ApiConfig } from '../main/index.h'\r\n\r\nimport {\r\n  type DCNumber,\r\n  type UID,\r\n} from 'Newtype'\r\nimport { dispatch } from 'State'\r\nimport L1Cache from '../../l1-cache'\r\n\r\nimport Logger from 'mtproto-logger'\r\nconst log = Logger`networker`\r\n\r\nlet iii = 0\r\nlet akStopped = false\r\n\r\ntype NetOptions = {\r\n  fileUpload?: boolean,\r\n  fileDownload?: boolean,\r\n  notContentRelated?: boolean,\r\n  afterMessageID?: string,\r\n  resultType?: string,\r\n  messageID?: string\r\n}\r\ntype Bytes = number[]\r\n\r\nconst storeIntString = (writer: TypeWriter) => ([field, value]: [string, number | string]) => {\r\n  switch (typeof value) {\r\n    case 'string': return writeBytes(writer, value)\r\n    case 'number': return writeInt(writer, value, field)\r\n    default: throw new Error(`tl storeIntString field ${field} value type ${typeof value}`)\r\n  }\r\n}\r\n\r\nfunction addInitialMessage(serialBox: TypeWriter, appConfig: ApiConfig) {\r\n  const mapper = storeIntString(serialBox)\r\n  //$off\r\n  const pairs: [string, string | number][] = toPairs(appConfig)\r\n  pairs.forEach(mapper)\r\n}\r\n\r\nfunction addAfterMessage(serialBox: TypeWriter, id: string) {\r\n  writeInt(serialBox, 0xcb9f372d, 'invokeAfterMsg')\r\n  writeLong(serialBox, id, 'msg_id')\r\n}\r\n\r\nfunction isHomeDC(uid, dc) {\r\n  return queryHomeDc(uid)\r\n    .map(x => x === dc)\r\n    .fold(() => false, x => x)\r\n}\r\n\r\nexport class NetworkerThread {\r\n  threadID: UID = uuid()\r\n  uid: UID\r\n  dcID: DCNumber\r\n  iii: number\r\n  upload: boolean = false\r\n  sessionID: Bytes\r\n  prevSessionID: Bytes\r\n  connectionInited = false\r\n  checkConnectionPeriod = 0\r\n  checkConnectionPromise: Promise<mixed>\r\n  emit: Emit\r\n  lastServerMessages: string[] = []\r\n  offline: boolean\r\n  longPoll: LongPoll\r\n  nextReq: number\r\n  nextReqPromise: Promise<mixed>\r\n  lastResendReq: {\r\n    req_msg_id: string,\r\n    resend_msg_ids: string[],\r\n  } | void\r\n\r\n  constructor(dc: number, uid: UID) {\r\n    this.uid = uid\r\n    const emitter = Config.rootEmitter(this.uid)\r\n    this.emit = emitter.emit\r\n    //$off\r\n    this.dcID = dc\r\n    this.iii = iii++\r\n\r\n    //$FlowIssue\r\n    Object.defineProperties(this, {\r\n      performSheduledRequest: {\r\n        value     : this.performSheduledRequest.bind(this),\r\n        enumerable: false,\r\n        writable  : false,\r\n      },\r\n      wrapMtpCall: {\r\n        value     : this.wrapMtpCall.bind(this),\r\n        enumerable: false,\r\n      }\r\n    })\r\n    Config.fastCache.init(uid, this.dcID)\r\n    Config.thread.set(uid, this.dcID, this)\r\n    this.longPoll = new LongPoll(this)\r\n    // // this.checkLongPollCond = this.checkLongPollCond.bind(this)\r\n    // this.serverSalt = serverSalt\r\n    // Bluebird.all([\r\n    //   storage.set(keyNames.authKey, bytesToHex(authKey)),\r\n    //   storage.set(keyNames.saltKey, bytesToHex(serverSalt))\r\n    // ]).then(() => {\r\n    // })\r\n\r\n    emitter.emit('new-networker', this)\r\n\r\n    // this.updateSession()\r\n    setInterval(() => this.checkLongPoll(), 10000) //NOTE make configurable interval\r\n    // this.checkLongPoll()\r\n  }\r\n  get state(): L1Cache {\r\n    return Config.fastCache.get(this.uid, this.dcID)\r\n  }\r\n  // updateSession() {\r\n  //   this.prevSessionID = this.sessionID\r\n  //   this.sessionID = new Array(8)\r\n  //   random(this.sessionID)\r\n  // }\r\n\r\n  updateSentMessage(sentMessageID: string) {\r\n    if (!this.state.hasSent(sentMessageID)) {\r\n      if (__DEV__)\r\n        console.log(`no id`, sentMessageID)\r\n      return false\r\n    }\r\n    const sentMessage = this.state.getSent(sentMessageID)\r\n    const newInner: string[] = []\r\n    if (sentMessage instanceof NetContainer) {\r\n      for (const innerID of sentMessage.inner) {\r\n        const innerSentMessage = this.updateSentMessage(innerID)\r\n        if (innerSentMessage)\r\n          newInner.push(innerSentMessage.msg_id)\r\n      }\r\n    }\r\n    // dispatch(NETWORKER_STATE.SENT.DEL([sentMessage], this.dcID))\r\n    this.state.deleteSent(sentMessage)\r\n    const seq_no = requestNextSeq(\r\n      this.uid,\r\n      this.dcID,\r\n      sentMessage.notContentRelated\r\n      || sentMessage.container\r\n    )\r\n    const newMessage = sentMessage.clone(seq_no, this.dcID)\r\n    if (newMessage instanceof NetContainer) {\r\n      newMessage.inner = newInner\r\n    }\r\n    this.state.addSent(newMessage)\r\n    // dispatch(NETWORKER_STATE.SENT.ADD([newMessage], this.dcID))\r\n    return newMessage\r\n  }\r\n\r\n  wrapMtpCall(method: string, params: Object, options: NetOptions) {\r\n    const serializer = new Serialization({ mtproto: true }, this.uid)\r\n\r\n    serializer.storeMethod(method, params)\r\n    const seqNo = requestNextSeq(this.uid, this.dcID)\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      this.dcID,\r\n      seqNo,\r\n      serializer.getBytes(true)\r\n    )\r\n    this.pushMessage(message, options)\r\n    return message.deferred.promise\r\n  }\r\n\r\n  wrapMtpMessage(object: Object, options: NetOptions = {}) {\r\n    const serializer = new Serialization({ mtproto: true }, this.uid)\r\n    serializer.storeObject(object, 'Object', 'wrap_message')\r\n\r\n    const seqNo = requestNextSeq(this.uid, this.dcID, options.notContentRelated)\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      this.dcID,\r\n      seqNo,\r\n      serializer.getBytes(true),\r\n      'ack/resend'\r\n    )\r\n    this.pushMessage(message, options)\r\n    return message\r\n  }\r\n\r\n  wrapApiCall(netReq: ApiRequest): NetMessage {\r\n    const {\r\n      data: {\r\n        method,\r\n        params,\r\n      },\r\n      options,\r\n      requestID\r\n    } = netReq\r\n    const serializer = new Serialization(options, this.uid)\r\n    const serialBox = serializer.writer\r\n    if (!this.connectionInited) {\r\n      addInitialMessage(serialBox, Config.apiConfig.get(this.uid))\r\n    }\r\n    if (typeof options.afterMessageID === 'string')\r\n      addAfterMessage(serialBox, options.afterMessageID)\r\n\r\n    options.resultType = serializer.storeMethod(method, params)\r\n\r\n    const seqNo = requestNextSeq(this.uid, this.dcID)\r\n    const message = new NetMessage(\r\n      this.uid,\r\n      this.dcID,\r\n      seqNo,\r\n      serializer.getBytes(true),\r\n      'api'\r\n    )\r\n    message.isAPI = true\r\n    message.requestID = requestID\r\n    this.pushMessage(message, options)\r\n    return message\r\n  }\r\n\r\n  checkLongPollCond() {\r\n    return this.longPoll.pendingTime > tsNow()\r\n    || !!this.offline\r\n    || akStopped\r\n  }\r\n  checkLongPollAfterDcCond(isClean: boolean) {\r\n    return isClean && !isHomeDC(this.uid, this.dcID)\r\n  }\r\n  pollEvents = (() => {\r\n    const emitter = new Emitter()\r\n    return emitter\r\n  })()\r\n  runLongPoll = async() => {\r\n    await this.longPoll.sendLongPool()\r\n    this.checkLongPoll()\r\n  }\r\n\r\n  poll = fromEvent('poll', this.pollEvents)\r\n    .throttle(50)\r\n    .observe(this.runLongPoll)\r\n  checkLongPoll() {\r\n    const isClean = this.cleanupSent()\r\n    // if (this.checkLongPollCond())\r\n    //   return false\r\n    // if (this.checkLongPollAfterDcCond(isClean))\r\n    // // console.warn(dTime(), 'Send long-poll for DC is delayed', this.dcID, this.sleepAfter)\r\n    //   return\r\n    this.pollEvents.emit('poll')\r\n\r\n  }\r\n\r\n  pushMessage(message: NetMessage, options: NetOptions = {}) {\r\n    message.copyOptions(options)\r\n    dispatch(NETWORKER_STATE.SENT.ADD([message], this.dcID), this.uid)\r\n    // dispatch(NETWORKER_STATE.PENDING.ADD([message.msg_id], this.dcID))\r\n    options.messageID = message.msg_id //TODO remove mutable operation\r\n    this.state.addSent(message)\r\n    this.state.setPending(message.msg_id)\r\n\r\n    if (!options.noShedule)\r\n      this.sheduleRequest()\r\n\r\n  }\r\n\r\n  pushResend(messageID: string, delay: number = 0) {\r\n    const value = tsNow() + delay\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage instanceof NetContainer) {\r\n      for (const msg of sentMessage.inner) {\r\n        this.state.setPending(msg, value)\r\n      }\r\n      // dispatch(NETWORKER_STATE.PENDING.ADD(sentMessage.inner, this.dcID))\r\n    } else {\r\n      // dispatch(NETWORKER_STATE.PENDING.ADD([messageID], this.dcID))\r\n      this.state.setPending(messageID, value)\r\n    }\r\n    this.sheduleRequest(delay)\r\n  }\r\n\r\n\r\n\r\n  async checkConnection() { }\r\n\r\n  toggleOffline(enabled: boolean) {\r\n    // console.log('toggle ', enabled, this.dcID, this.iii)\r\n    if (!this.offline !== undefined && this.offline == enabled)\r\n      return false\r\n\r\n    this.offline = enabled\r\n\r\n    if (this.offline) {\r\n      smartTimeout.cancel(this.nextReqPromise)\r\n      delete this.nextReq\r\n\r\n      if (this.checkConnectionPeriod < 1.5)\r\n        this.checkConnectionPeriod = 0\r\n\r\n\r\n      this.checkConnectionPromise = smartTimeout(\r\n        this.checkConnection, parseInt(this.checkConnectionPeriod * 1000))\r\n      this.checkConnectionPeriod = Math.min(30, (1 + this.checkConnectionPeriod) * 1.5)\r\n\r\n      // this.onOnlineCb = this.checkConnection\r\n      // this.emit('net.offline', this.onOnlineCb)\r\n    } else {\r\n      this.longPoll.pendingTime = Date.now()\r\n      //NOTE check long state was here\r\n      this.checkLongPoll()\r\n      this.sheduleRequest()\r\n\r\n      // if (this.onOnlineCb)\r\n      //   this.emit('net.online', this.onOnlineCb)\r\n\r\n      smartTimeout.cancel(this.checkConnectionPromise)\r\n\r\n    }\r\n  }\r\n  performResend() {\r\n    if (this.state.hasResends()) {\r\n      const resendMsgIDs = [...this.state.getResends()]\r\n      const resendOpts = { noShedule: true, notContentRelated: true }\r\n      // console.log('resendReq messages', resendMsgIDs)\r\n      const msg = this.wrapMtpMessage({\r\n        _      : 'msg_resend_req',\r\n        msg_ids: resendMsgIDs\r\n      }, resendOpts)\r\n      this.lastResendReq = {\r\n        req_msg_id    : msg.msg_id,\r\n        resend_msg_ids: resendMsgIDs,\r\n      }\r\n    }\r\n  }\r\n  performSheduledRequest() { //TODO extract huge method\r\n    // console.log(dTime(), 'sheduled', this.dcID, this.iii)\r\n    if (this.offline || akStopped) {\r\n      log`Cancel sheduled`(``)\r\n      return Bluebird.resolve(false)\r\n    }\r\n    delete this.nextReq\r\n    const ackMsgIDs = queryAck(this.uid, this.dcID)\r\n    if (ackMsgIDs.length > 0) {\r\n      log`acking messages`(ackMsgIDs)\r\n      this.wrapMtpMessage({\r\n        _      : 'msgs_ack',\r\n        msg_ids: ackMsgIDs\r\n      }, {\r\n        notContentRelated: true,\r\n        noShedule        : true\r\n      }) //TODO WTF Why we make wrapped message and doesnt use it?\r\n      // const res = await msg.deferred.promise\r\n      // log(`AWAITED`, `ack`)(res)\r\n      dispatch(NET.ACK_DELETE({ dc: this.dcID, ack: ackMsgIDs }), this.uid)\r\n    }\r\n\r\n    this.performResend()\r\n\r\n    const messages: NetMessage[] = []\r\n    //$off\r\n    let message: NetMessage\r\n    let messagesByteLen = 0\r\n    let lengthOverflow = false\r\n    const pendingIds = []\r\n    for (const [messageID, value] of this.state.pendingIterator()) {\r\n      if (value && value < tsNow()) continue\r\n      this.state.deletePending(messageID)\r\n      pendingIds.push(messageID)\r\n      if (!this.state.hasSent(messageID)) continue\r\n      message = this.state.getSent(messageID)\r\n      const messageByteLength = message.size() + 32\r\n      const cond1 = !message.notContentRelated && lengthOverflow\r\n      const cond2 = !message.notContentRelated\r\n        && messagesByteLen + messageByteLength > 655360 // 640 Kb\r\n      if (cond1) continue\r\n      if (cond2) {\r\n        lengthOverflow = true\r\n        continue\r\n      }\r\n      messages.push(message)\r\n      messagesByteLen += messageByteLength\r\n    }\r\n    // dispatch(NETWORKER_STATE.PENDING.DEL(pendingIds, this.dcID))\r\n    messages.map(msg => this.emit('message-in', msg))\r\n\r\n    if (!message) return Bluebird.resolve(false) //TODO Why?\r\n\r\n    if (message.isAPI && !message.longPoll) {\r\n      const serializer = new Serialization({ mtproto: true }, this.uid)\r\n      const params = {\r\n        max_delay : 0,\r\n        wait_after: 100,\r\n        max_wait  : 5000\r\n      }\r\n      serializer.storeMethod('http_wait', params)\r\n      const netMessage = new NetMessage(\r\n        this.uid,\r\n        this.dcID,\r\n        requestNextSeq(this.uid, this.dcID),\r\n        serializer.getBytesPlain(),\r\n        'polling'\r\n      )\r\n      this.longPoll.writePollTime()\r\n      messages.push(netMessage)\r\n    }\r\n\r\n    if (!messages.length) {\r\n      // console.log('no sheduled messages')\r\n      return Bluebird.resolve(false)\r\n    }\r\n\r\n    let noResponseMsgs = []\r\n\r\n    if (messages.length > 1) {\r\n      const container = new Serialization({ mtproto: true, startMaxLength: messagesByteLen + 64 }, this.uid)\r\n      const contBox = container.writer\r\n      writeInt(contBox, 0x73f1f8dc, 'CONTAINER[id]')\r\n      writeInt(contBox, messages.length, 'CONTAINER[count]')\r\n\r\n      const {\r\n        innerMessages,\r\n        noResponseMessages\r\n      } = writeInnerMessage({\r\n        writer: contBox,\r\n        messages\r\n      })\r\n      noResponseMsgs = noResponseMessages\r\n      const innerApi = messages.reduce(\r\n        (acc: (string | boolean)[], val) => {\r\n          if (!val.isAPI)\r\n            return [...acc, false]\r\n          return [...acc, val.requestID /*::|| '' */]\r\n        }, [])\r\n      message = new NetContainer(\r\n        this.uid,\r\n        this.dcID,\r\n        requestNextSeq(this.uid, this.dcID, true),\r\n        container.getBytes(true),\r\n        innerMessages,\r\n        innerApi)\r\n\r\n    } else {\r\n      if (message.noResponse)\r\n        noResponseMsgs.push(message.msg_id)\r\n    }\r\n    this.state.addSent(message)\r\n\r\n    if (lengthOverflow) this.sheduleRequest()\r\n    dispatch(NET.SEND({\r\n      message,\r\n      options : {},\r\n      threadID: this.threadID,\r\n      thread  : this,\r\n      noResponseMsgs,\r\n    }, this.dcID), this.uid)\r\n    return Bluebird.resolve(true)\r\n  }\r\n\r\n  getMsgById = ({ req_msg_id }: { req_msg_id: string }) => this.state.getSent(req_msg_id)\r\n\r\n  /* async applyServerSalt(newServerSalt: string) {\r\n    const serverSalt = longToBytes(newServerSalt)\r\n    await this.storage.set(`dc${ this.dcID }_server_salt`, bytesToHex(serverSalt))\r\n\r\n    this.serverSalt = serverSalt\r\n    return true\r\n  } */\r\n\r\n  sheduleRequest(delay: number = 0) {\r\n    if (this.offline) this.checkConnection()\r\n    const nextReq = tsNow() + delay\r\n\r\n    if (delay && this.nextReq && this.nextReq <= nextReq)\r\n      return false\r\n\r\n    smartTimeout.cancel(this.nextReqPromise)\r\n    if (delay > 0)\r\n      this.nextReqPromise = smartTimeout(\r\n        this.performSheduledRequest, delay)\r\n    else\r\n      immediate(this.performSheduledRequest)\r\n\r\n    this.nextReq = nextReq\r\n  }\r\n\r\n  ackMessage(msgID: string) {\r\n    const ackMsgIDs = queryAck(this.uid, this.dcID)\r\n    if (contains(msgID, ackMsgIDs)) return\r\n    dispatch(NET.ACK_ADD({ dc: this.dcID, ack: [msgID] }), this.uid)\r\n    this.sheduleRequest(30000)\r\n  }\r\n\r\n  reqResendMessage(msgID: string) {\r\n    log`Req resend`(msgID)\r\n    this.state.addResend(msgID)\r\n    this.sheduleRequest(100)\r\n  }\r\n\r\n  cleanupSent() {\r\n    let notEmpty = false\r\n    // console.log('clean start', this.dcID/*, this.state.sent*/)\r\n    const sentDel = []\r\n    for (const [msgID, message] of this.state.sentIterator()) {\r\n      let complete = true\r\n      if (message.notContentRelated && !this.state.hasPending(msgID)) {\r\n        sentDel.push(message)\r\n        // console.log('clean notContentRelated', msgID)\r\n        this.state.deleteSent(message)\r\n      }\r\n      else if (message instanceof NetContainer) {\r\n        for (const inner of message.inner) {\r\n          if (this.state.hasSent(inner)) {\r\n            // console.log('clean failed, found', msgID, message.inner[i],\r\n            // this.state.getSent(message.inner[i]).seq_no)\r\n            notEmpty = true\r\n            complete = false\r\n            break\r\n          }\r\n        }\r\n        // console.log('clean container', msgID)\r\n        if (complete) {\r\n          sentDel.push(message)\r\n          this.state.deleteSent(message)\r\n        }\r\n      } else\r\n        notEmpty = true\r\n    }\r\n    dispatch(NETWORKER_STATE.SENT.DEL(sentDel, this.dcID), this.uid)\r\n    return !notEmpty\r\n  }\r\n\r\n  processMessageAck = (messageID: string) => {\r\n    const sentMessage = this.state.getSent(messageID)\r\n    if (sentMessage && !sentMessage.acked) {\r\n      delete sentMessage.body\r\n      sentMessage.acked = true\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  async processMessage(message: *, messageID: string, sessionID: Uint8Array) {\r\n    if (!isFinite(messageID)) {\r\n      throw new TypeError(`Message ID should be finite ${messageID} ${typeof messageID}`)\r\n    }\r\n    const msgidInt = parseInt(messageID, 10)\r\n    if (msgidInt % 2) {\r\n      console.warn('[MT] Server even message id: ', messageID, message)\r\n      return\r\n    }\r\n    switch (message._) {\r\n      case 'msg_container': {\r\n        /* for (const inner of message.messages)\r\n          await this.processMessage(inner, inner.msg_id, sessionID) */\r\n        break\r\n      }\r\n      case 'bad_server_salt': {\r\n        // log(`Bad server salt`)(message)\r\n        // const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        // if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n        //   log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n        //   throw new Error('[MT] Bad server salt for invalid message')\r\n        // }\r\n\r\n        // await this.applyServerSalt(message.new_server_salt)\r\n        // this.pushResend(message.bad_msg_id)\r\n        // this.ackMessage(messageID)\r\n        break\r\n      }\r\n      case 'bad_msg_notification': {\r\n        /* log(`Bad msg notification`)(message)\r\n        const sentMessage = this.state.getSent(message.bad_msg_id)\r\n        if (!sentMessage || sentMessage.seq_no != message.bad_msg_seqno) {\r\n          log(`invalid message`)(message.bad_msg_id, message.bad_msg_seqno)\r\n          throw new Error('[MT] Bad msg notification for invalid message')\r\n        }\r\n\r\n        if (message.error_code == 16 || message.error_code == 17) {\r\n          if (applyServerTime(\r\n            this.uid,\r\n            rshift32(messageID)\r\n          )) {\r\n            log(`Update session`)()\r\n            this.updateSession()\r\n          }\r\n          const badMessage = this.updateSentMessage(message.bad_msg_id)\r\n          if (badMessage instanceof NetMessage)\r\n            this.pushResend(badMessage.msg_id)\r\n          this.ackMessage(messageID)\r\n        } */\r\n        break\r\n      }\r\n      case 'message': {\r\n        /* if (this.lastServerMessages.indexOf(messageID) != -1) {\r\n          // console.warn('[MT] Server same messageID: ', messageID)\r\n          this.ackMessage(messageID)\r\n          return\r\n        }\r\n        this.lastServerMessages.push(messageID)\r\n        if (this.lastServerMessages.length > 100) {\r\n          this.lastServerMessages.shift()\r\n        }\r\n        await this.processMessage(message.body, message.msg_id, sessionID) */\r\n        break\r\n      }\r\n      case 'new_session_created': {\r\n        // this.ackMessage(messageID)\r\n\r\n        // this.processMessageAck(message.first_msg_id)\r\n        // await this.applyServerSalt(message.server_salt)\r\n\r\n        /* this.emit('new-session', {\r\n          threadID   : this.threadID,\r\n          networkerDC: this.dcID,\r\n          messageID,\r\n          message\r\n        }) */\r\n\r\n        // const baseDcID = await this.storage.get('dc')\r\n        // const updateCond =\r\n        //   baseDcID === this.dcID &&\r\n        //   !this.upload &&\r\n        //   updatesProcessor\r\n        // if (updateCond)\r\n        //   updatesProcessor(message, true)\r\n\r\n        break\r\n      }\r\n      case 'msgs_ack': {\r\n        /* message.msg_ids.forEach(this.processMessageAck) */\r\n        break\r\n      }\r\n      case 'msg_detailed_info': {\r\n        /* if (!this.state.hasSent(message.msg_id)) {\r\n          this.ackMessage(message.answer_msg_id)\r\n          break\r\n        } */\r\n        break\r\n      }\r\n      case 'msg_new_detailed_info': {\r\n        /* this.ackMessage(message.answer_msg_id)\r\n        this.reqResendMessage(message.answer_msg_id) */\r\n        break\r\n      }\r\n      case 'msgs_state_info': {\r\n      /*  this.ackMessage(message.answer_msg_id)\r\n        const lastResendReq = this.lastResendReq\r\n        if (!lastResendReq) break\r\n        if (lastResendReq.req_msg_id != message.req_msg_id) break\r\n        // const resendDel = []\r\n        for (const badMsgID of lastResendReq.resend_msg_ids) {\r\n          // resendDel.push(badMsgID)\r\n          this.state.deleteResent(badMsgID)\r\n        } */\r\n        // dispatch(NETWORKER_STATE.RESEND.DEL(resendDel, this.dcID))\r\n        break\r\n      }\r\n      case 'rpc_result': {\r\n        this.ackMessage(messageID)\r\n\r\n        const sentMessageID = message.req_msg_id\r\n        const sentMessage = this.state.getSent(sentMessageID)\r\n\r\n        this.processMessageAck(sentMessageID)\r\n        if (!sentMessage) break\r\n        // dispatch(NETWORKER_STATE.SENT.DEL([sentMessage], this.dcID))\r\n        this.state.deleteSent(sentMessage)\r\n        if (message.result._ == 'rpc_error') {\r\n          this.emit('rpc-error', {\r\n            threadID   : this.threadID,\r\n            networkerDC: this.dcID,\r\n            error      : message.result,\r\n            sentMessage,\r\n            message\r\n          })\r\n\r\n        } else {\r\n          this.emit('rpc-result', {\r\n            threadID   : this.threadID,\r\n            networkerDC: this.dcID,\r\n            message,\r\n            sentMessage,\r\n            result     : message.result\r\n          })\r\n          if (sentMessage.isAPI)\r\n            this.connectionInited = true\r\n        }\r\n\r\n        break\r\n      }\r\n      default: {\r\n        this.ackMessage(messageID)\r\n        /* this.emit('untyped-message', {\r\n          threadID   : this.threadID,\r\n          networkerDC: this.dcID,\r\n          message,\r\n          messageID,\r\n          sessionID,\r\n          result     : message.result\r\n        })\r\n        if (updatesProcessor) updatesProcessor(message, true) */\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function createThread(\r\n  dc: DCNumber,\r\n  uid: UID\r\n): NetworkerThread {\r\n  return new NetworkerThread(dc, uid)\r\n}\r\n\r\nexport default NetworkerThread\r\n"]}