{"version":3,"sources":["../../../src/service/main/load-storage.js"],"names":["dcMap","uid","iAuth","iSalt","iHome","getter","storageAdapter","get","keys","dc","fields","authKey","salt","session","then","val","fold","x","Array","isArray","auth","saltKey","getDefaultSalt","nearest","nearestDC","createSessions","getDcList","finalAction","home","STORAGE_IMPORTED","loadStorage","dcList","concat","Object","filter","isFinite","map","e","parseInt","Set"],"mappings":"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","file":"load-storage.js","sourcesContent":["//@flow\n\nimport { trim, fromPairs } from 'ramda'\n\n// import dcStoreKeys from 'Util/dc-store-keys'\nimport Config from 'ConfigProvider'\n\nimport { dispatch } from 'State'\nimport random from '../secure-random'\nimport { MAIN } from 'Action'\nimport { bytesFromHex } from 'Bin'\nimport Thread from '../networker'\n\nimport {\n  type DCNumber,\n  type UID,\n  toDCNumber\n} from 'Newtype'\n\nexport default async function loadStorage(\n  dcMap: Map<DCNumber, string>,\n  uid: UID,\n) {\n  let iAuth: { [dc: number]: number[] } = {}\n  let iSalt: { [dc: number]: number[] } = {}\n  let iHome = 2\n\n  const getter = Config.storageAdapter.get\n\n  for (const dc of dcMap.keys()) {\n    let fields: {\n      authKey: number[],\n      salt: number[],\n      session: number[],\n    } = {\n      authKey: [],\n      salt   : [],\n      session: [],\n    }\n    const salt = await getter\n      .salt(uid, dc)\n      .then(val => val.fold(() => false, x => x))\n    // const salt = checkString(saltRaw)\n    if (Array.isArray(salt)) {\n      iSalt = { ...iSalt, [dc | 0]: salt }\n      fields = {\n        ...fields,\n        salt,\n      }\n    }\n    const auth = await getter\n      .authKey(uid, dc)\n      .then(val => val.fold(() => false, x => x))\n    if (Array.isArray(auth)) {\n      iAuth = { ...iAuth, [dc | 0]: auth }\n\n      const saltKey = Array.isArray(salt)\n        ? salt\n        : getDefaultSalt()\n\n      iSalt = { ...iSalt, [dc | 0]: saltKey }\n      new Thread(\n        dc,\n        uid\n      )\n      fields = {\n        ...fields,\n        salt   : saltKey,\n        authKey: auth,\n      }\n    }\n  }\n  //$off\n  const nearest = await getter\n    .nearestDC(uid)\n    .then(val => val\n      /*:: .map(toDCNumber) */\n      .fold(() => false, x => x))\n  if (nearest !== false) {\n    iHome = nearest\n    // dispatch(MAIN.DC_DETECTED(nearest))\n  } //else\n  // dispatch(MAIN.MODULE_LOADED())\n  // dispatch(MAIN.DC_DETECTED(2))\n  const session = createSessions(getDcList(iAuth, iSalt, iHome))\n  const finalAction = {\n    auth: iAuth,\n    salt: iSalt,\n    home: iHome,\n    uid,\n    session,\n  }\n  dispatch(MAIN.STORAGE_IMPORTED(finalAction), uid)\n  if (__DEV__)\n    console.log({ salt: iSalt, home: iHome, session })\n}\n\nconst getDefaultSalt = () => bytesFromHex('AAAAAAAAAAAAAAAA')\n\nfunction getDcList(auth, salt, home) {\n  const dcList = []\n    .concat(\n      Object.keys(auth),\n      Object.keys(salt),\n      [home],\n    )\n    .filter(isFinite)\n    .map(e => parseInt(e, 10))\n  return [...new Set(dcList)]\n}\n\n//$off\nconst createSessions = (dcList: number[]): { [dc: number]: number[] } =>\n  fromPairs(\n    dcList\n      .map(dc => [dc, random(new Array(8))])\n  )\n"]}