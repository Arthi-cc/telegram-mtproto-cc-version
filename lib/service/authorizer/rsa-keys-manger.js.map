{"version":3,"sources":["../../../src/service/authorizer/rsa-keys-manger.js"],"names":["KeyManager","uid","publisKeysHex","get","set","forEach","key","mapPrepare","fingerprints","selectRsaKeyByFingerPrint","fingerprintHex","foundKey","fingerprint","Error","modulus","exponent","RSAPublicKey","rsaBox","writer","buffer","getBuffer","fingerprintBytes","slice","reverse"],"mappings":";;;;;kBAgBwBA,U;;AAdxB;;AACA;;AAEA;;AAEA;;AAMA;;;;;;AAGe,SAASA,UAAT,CACbC,GADa,EAEbC,aAFa,EAGb,EAAEC,GAAF,EAAOC,GAAP,EAHa,EAIb;;AAEAF,gBAAcG,OAAd,CAAsBC,OAAOC,WAAWN,GAAX,EAAgBG,GAAhB,EAAqBE,GAArB,CAA7B;;AAEA,SAAQE,YAAD,IAA4BC,0BAA0BR,GAA1B,EAA+BE,GAA/B,EAAoCK,YAApC,CAAnC;AACD;;AAED,SAASC,yBAAT,CAAmCR,GAAnC,EAAgDE,GAAhD,EAAmFK,YAAnF,EAA2G;AACzG,MAAIE,uBAAJ;AAAA,MAAoBC,iBAApB;AACA,uBAA0BH,YAA1B,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,QAA7BI,WAA6B;;AACtCF,qBAAiB,sBAAYE,WAAZ,CAAjB;AACAD,eAAWR,IAAIF,GAAJ,EAASS,cAAT,CAAX;AACA,QAAIC,QAAJ,EACE,uBAASC,WAAT,IAAyBD,QAAzB;AACH;AACD,QAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,SAASN,UAAT,CAAoBN,GAApB,EAAiCG,GAAjC,EAAoE,EAAEU,OAAF,EAAWC,QAAX,EAApE,EAAsG;AACpG,MAAMC,eAAe,sBAAkB,EAAlB,EAAsBf,GAAtB,CAArB;AACA,MAAMgB,SAASD,aAAaE,MAA5B;AACA,0BAAWD,MAAX,EAAmB,uBAAaH,OAAb,CAAnB;AACA,0BAAWG,MAAX,EAAmB,uBAAaF,QAAb,CAAnB;;AAEA,MAAMI,SAASF,OAAOG,SAAP,EAAf;;AAEA,MAAMC,mBAAmB,wBAAcF,MAAd,EAAsBG,KAAtB,CAA4B,CAAC,CAA7B,CAAzB;AACAD,mBAAiBE,OAAjB;AACA,MAAMjB,MAAM,qBAAWe,gBAAX,CAAZ;AACAjB,MAAIH,GAAJ,EAASK,GAAT,EAAc;AACZQ,WADY;AAEZC;AAFY,GAAd;AAID","file":"rsa-keys-manger.js","sourcesContent":["//@flow\n\nimport { type PublicKey } from '../main/index.h'\nimport { Serialization } from '../../tl'\n\nimport { writeBytes } from '../../tl/writer'\n\nimport {\n  bytesToHex,\n  sha1BytesSync,\n  bytesFromHex,\n  strDecToHex,\n} from 'Bin'\nimport Config from 'ConfigProvider'\n\n\nexport default function KeyManager(\n  uid: string,\n  publisKeysHex: PublicKey[],\n  { get, set }: typeof Config.publicKeys\n) {\n\n  publisKeysHex.forEach(key => mapPrepare(uid, set, key))\n\n  return (fingerprints: string[]) => selectRsaKeyByFingerPrint(uid, get, fingerprints)\n}\n\nfunction selectRsaKeyByFingerPrint(uid: string, get: typeof Config.publicKeys.get, fingerprints: string[]) {\n  let fingerprintHex, foundKey\n  for (const fingerprint of fingerprints) {\n    fingerprintHex = strDecToHex(fingerprint)\n    foundKey = get(uid, fingerprintHex)\n    if (foundKey)\n      return { fingerprint, ...foundKey }\n  }\n  throw new Error('[Key manager] No public key found')\n}\n\nfunction mapPrepare(uid: string, set: typeof Config.publicKeys.set, { modulus, exponent }: PublicKey) {\n  const RSAPublicKey = new Serialization({}, uid)\n  const rsaBox = RSAPublicKey.writer\n  writeBytes(rsaBox, bytesFromHex(modulus))\n  writeBytes(rsaBox, bytesFromHex(exponent))\n\n  const buffer = rsaBox.getBuffer()\n\n  const fingerprintBytes = sha1BytesSync(buffer).slice(-8)\n  fingerprintBytes.reverse()\n  const key = bytesToHex(fingerprintBytes)\n  set(uid, key, {\n    modulus,\n    exponent\n  })\n}\n"]}