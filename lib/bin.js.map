{"version":3,"sources":["../src/bin.js"],"names":["generateNonce","bytesToString","stringToChars","bytesToHex","bytesFromHex","bytesCmp","bytesXor","bytesToWords","bytesFromWords","bytesFromLeemonBigInt","bytesToArrayBuffer","convertToArrayBuffer","convertToUint8Array","convertToByteArray","bytesFromArrayBuffer","bufferConcat","longToInts","longToBytes","lshift32","intToUint","uintToInt","sha1HashSync","sha1BytesSync","sha256HashSync","rsaEncrypt","aesEncryptSync","aesDecryptSync","gzipUncompress","nextRandomInt","pqPrimeFactorization","pqPrimeLeemon","bytesModPow","CryptoJSlib","CryptoJS","rushaInstance","nonce","Array","i","bytes","ln","length","temp","String","fromCharCode","result","join","str","charCodeAt","strDecToHex","toLowerCase","arr","push","toString","hexString","len","start","parseInt","charAt","substr","bytes1","bytes2","ArrayBuffer","Uint8Array","words","lib","WordArray","init","wordArray","sigBytes","bigInt","b","buffer","byteLength","BYTES_PER_ELEMENT","isArray","TypeError","bytesUint8","newBytes","byteView","from","buffer1","buffer2","set1","set2","l1","l2","tmp","set","dividerLem","sLong","lemNum","div","rem","resL","reverse","high","low","highNum","nLow","res","rshift32","num","val","middle","hashBytes","rawDigest","hashWords","SHA256","publicKey","addPadding","N","modulus","E","exponent","X","encryptedBigInt","encryptedBytes","blockSize","zeroes","needPadding","padding","concat","keyBytes","ivBytes","encryptedWords","AES","encrypt","iv","pad","NoPadding","mode","IGE","ciphertext","decryptedWords","decrypt","maxValue","Math","floor","random","pqBytes","minSize","ceil","hex","lWhat","what","minLen","it","q","lim","a","c","g","z","x","y","j","P","Q","m","xBigInt","yBigInt","mBigInt","resBigInt"],"mappings":"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","file":"bin.js","sourcesContent":["//@flow\n\nimport Rusha from 'rusha'\nimport * as CryptoJSlib from '@goodmind/node-cryptojs-aes'\nconst { CryptoJS } = CryptoJSlib\nimport { inflate } from 'pako/lib/inflate'\n\nimport random from './service/secure-random'\n\nimport type { PublicKeyExtended } from './service/main/index.h'\n\nimport { eGCD_, greater, divide_, str2bigInt, equalsInt,\n  isZero, bigInt2str, copy_, copyInt_, rightShift_,\n  leftShift_, sub_, add_, powMod, bpe, one } from './vendor/leemon'\n\n\nconst rushaInstance = new Rusha(1024 * 1024)\n\nexport type Bytes = number[]\n\nexport function generateNonce() {\n  const nonce = new Array(16)\n  for (let i = 0; i < 16; i++)\n    nonce[i] = nextRandomInt(0xFF)\n  return nonce\n}\n\n\nexport function bytesToString(bytes: Uint8Array) {\n  const ln = bytes.length\n  const temp = new Array(ln)\n  for (let i = 0; i < ln; ++i)\n    temp[i] = String.fromCharCode(bytes[i])\n  const result = temp.join('')\n  return result\n}\n\nexport function stringToChars(str: string) {\n  const ln = str.length\n  const result: Bytes = Array(ln)\n  for (let i = 0; i < ln; ++i)\n    result[i] = str.charCodeAt(i)\n  return result\n}\n\nexport const strDecToHex = (str: string) =>\n  bigInt2str(\n    str2bigInt(str, 10, 0), 16\n  ).toLowerCase()\n\nexport function bytesToHex(bytes: Bytes | Uint8Array = []) {\n  const arr = []\n  for (let i = 0; i < bytes.length; i++) {\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\n  }\n  return arr.join('')\n}\n\nexport function bytesFromHex(hexString: string): Bytes {\n  const len = hexString.length\n  let start = 0\n  const bytes = []\n\n  if (hexString.length % 2) {\n    bytes.push(parseInt(hexString.charAt(0), 16))\n    start++\n  }\n\n  for (let i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\n  }\n\n  return bytes\n}\n\nexport function bytesCmp(bytes1: Bytes | Uint8Array,\n                         bytes2: Bytes | Uint8Array) {\n  const len = bytes1.length\n  if (len !== bytes2.length) {\n    return false\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (bytes1[i] !== bytes2[i])\n      return false\n  }\n  return true\n}\n\nexport function bytesXor(bytes1: Bytes | Uint8Array, bytes2: Bytes | Uint8Array) {\n  const len = bytes1.length\n  const bytes = []\n\n  for (let i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i]\n  }\n\n  return bytes\n}\n\nexport function bytesToWords(bytes: Bytes | ArrayBuffer | Uint8Array) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  const len = bytes.length\n  const words = []\n  let i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << 24 - i % 4 * 8\n  }\n\n  return new CryptoJS.lib.WordArray.init(words, len)\n}\n\nexport function bytesFromWords(wordArray: *): Bytes {\n  const words = wordArray.words\n  const sigBytes = wordArray.sigBytes\n  const bytes = []\n\n  for (let i = 0; i < sigBytes; i++) {\n    bytes.push(words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)\n  }\n\n  return bytes\n}\n\n\nexport function bytesFromLeemonBigInt(bigInt: Bytes) {\n  const str = bigInt2str(bigInt, 16)\n  return bytesFromHex(str)\n}\n\nexport function bytesToArrayBuffer(b: *) {\n  return (new Uint8Array(b)).buffer\n}\n\nexport function convertToArrayBuffer(bytes: Buffer | ArrayBuffer | Uint8Array | Bytes): ArrayBuffer {\n  // Be careful with converting subarrays!!\n  if (bytes instanceof ArrayBuffer) {\n    return bytes\n  }\n  if (bytes instanceof Uint8Array) {\n    //$FlowIssue\n    if (bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT)\n      return bytes.buffer\n  }\n  return bytesToArrayBuffer(bytes)\n}\n\nexport function convertToUint8Array(bytes: Bytes | Uint8Array | ArrayBuffer): Uint8Array {\n  if (bytes instanceof Uint8Array)\n    return bytes\n  if (Array.isArray(bytes))\n    return new Uint8Array(bytes)\n  if (bytes instanceof ArrayBuffer)\n    return new Uint8Array(bytes)\n  throw new TypeError(`convertToUint8Array mismatch! ${bytes}`)\n}\n\nexport function convertToByteArray(bytes: Bytes | Uint8Array): number[] {\n  if (Array.isArray(bytes))\n    return bytes\n  const bytesUint8 = convertToUint8Array(bytes)\n  const ln = bytesUint8.length\n  if (ln === 0) {\n    return []\n  }\n  const newBytes: number[] = new Array(ln)\n  newBytes[0] = 0\n  for (let i = 0; i < ln; i++)\n    newBytes[i] = bytesUint8[i]\n  return newBytes\n}\n\nexport function bytesFromArrayBuffer(buffer: ArrayBuffer) {\n  const byteView = new Uint8Array(buffer)\n  const bytes = Array.from( byteView )\n  return bytes\n}\n\nexport function bufferConcat(buffer1: ArrayBuffer | Uint8Array | Bytes, buffer2: ArrayBuffer | Uint8Array | Bytes) {\n  let set1, set2, l1, l2\n  if (buffer1 instanceof ArrayBuffer) {\n    l1 = buffer1.byteLength\n    set1 = new Uint8Array(buffer1)\n  } else {\n    l1 = buffer1.length\n    set1 = buffer1\n  }\n\n  if (buffer2 instanceof ArrayBuffer) {\n    l2 = buffer2.byteLength\n    set2 = new Uint8Array(buffer2)\n  } else {\n    l2 = buffer2.length\n    set2 = buffer2\n  }\n\n  const tmp = new Uint8Array(l1 + l2)\n  tmp.set(set1, 0)\n  tmp.set(set2, l1)\n\n  return tmp.buffer\n}\n\n// const dividerBig = bigint(0x100000000)\nconst dividerLem = str2bigInt('100000000', 16, 4)\n\n// const printTimers = (timeL, timeB, a, b, n) => setTimeout(\n//   () => console.log(`Timer L ${timeL} B ${timeB}`, ...a, ...b, n || ''),\n//   100)\n\nexport function longToInts(sLong: string) {\n  const lemNum = str2bigInt(sLong, 10, 6)\n  const div = new Array(lemNum.length)\n  const rem = new Array(lemNum.length)\n  divide_(lemNum, dividerLem, div, rem)\n  const resL = [\n    //$FlowIssue\n    ~~bigInt2str(div, 10),\n    //$FlowIssue\n    ~~bigInt2str(rem, 10)\n  ]\n  return resL\n}\n\nexport function longToBytes(sLong: string) {\n  return bytesFromWords({ words: longToInts(sLong), sigBytes: 8 }).reverse()\n}\n\nexport function lshift32(high: number, low: number) {\n  const highNum = str2bigInt(high.toString(), 10, 6)\n  const nLow = str2bigInt(low.toString(), 10, 6)\n  leftShift_(highNum, 32)\n\n  add_(highNum, nLow)\n  const res = bigInt2str(highNum, 10)\n  return res\n}\n\nexport const rshift32 = (str: string) => {\n  const num = str2bigInt(str, 10, 6)\n  rightShift_(num, 32)\n  return bigInt2str(num, 10)\n}\n\nexport function intToUint(val: string) {\n  //$FlowIssue\n  let result = ~~val\n  if (result < 0)\n    result = result + 0x100000000\n  return result\n}\n\nconst middle = 0x100000000 / 2 - 1\n\nexport function uintToInt(val: number): number {\n  if (val > middle)\n    val = val - 0x100000000\n  return val\n}\n\nexport function sha1HashSync(bytes: Bytes | ArrayBuffer | Uint8Array): ArrayBuffer {\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\n  const hashBytes = rushaInstance.rawDigest(bytes).buffer\n  // console.log(dT(), 'SHA-1 hash finish')\n\n  return hashBytes\n}\n\nexport function sha1BytesSync(bytes: Bytes | ArrayBuffer | Uint8Array) {\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\n}\n\nexport function sha256HashSync(bytes: Bytes | ArrayBuffer) {\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n  const hashWords = CryptoJS.SHA256(bytesToWords(bytes))\n  // console.log(dT(), 'SHA-2 hash finish')\n\n  const hashBytes = bytesFromWords(hashWords)\n\n  return hashBytes\n}\n\nexport function rsaEncrypt(publicKey: PublicKeyExtended, bytes: Bytes) {\n  const newBytes: number[] = addPadding(bytes, 255)\n\n  const N = str2bigInt(publicKey.modulus, 16, 256)\n  const E = str2bigInt(publicKey.exponent, 16, 256)\n  const X = str2bigInt(bytesToHex(newBytes), 16, 256)\n  const encryptedBigInt = powMod(X, E, N),\n        encryptedBytes = bytesFromHex(bigInt2str(encryptedBigInt, 16))\n\n  return encryptedBytes\n}\n\ninterface AddPadding {\n  (bytes: Bytes, blockSize?: number, zeroes?: boolean): Bytes,\n  (bytes: ArrayBuffer, blockSize?: number, zeroes?: boolean): ArrayBuffer,\n}\n\nconst addPadding: AddPadding = (\n  bytes,\n  blockSize: number = 16,\n  zeroes: boolean = false) => {\n  let len\n\n  if (bytes instanceof ArrayBuffer) {\n    len = bytes.byteLength\n  } else {\n    len = bytes.length\n  }\n\n  let result = bytes\n\n  const needPadding = blockSize - len % blockSize\n  if (needPadding > 0 && needPadding < blockSize) {\n    const padding = new Array(needPadding)\n    if (zeroes) {\n      for (let i = 0; i < needPadding; i++)\n        padding[i] = 0\n    } else\n      random(padding)\n    if (bytes instanceof ArrayBuffer) {\n      result = bufferConcat(bytes, padding)\n    } else\n      result = bytes.concat(padding)\n  }\n\n  return result\n}\n\nexport function aesEncryptSync(bytes: Bytes, keyBytes: Bytes, ivBytes: Bytes) {\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)aesEncryptSync\n\n  const newBytes = addPadding(bytes)\n  const encryptedWords = CryptoJS.AES.encrypt(bytesToWords(newBytes), bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  }).ciphertext\n\n  const encryptedBytes = bytesFromWords(encryptedWords)\n  // console.log(dT(), 'AES encrypt finish')\n\n  return encryptedBytes\n}\n\nexport function aesDecryptSync(encryptedBytes: Bytes | Uint8Array, keyBytes: Bytes, ivBytes: Bytes) {\n\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\n  const decryptedWords = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(encryptedBytes) }, bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  })\n\n  const bytes = bytesFromWords(decryptedWords)\n  // console.log(dT(), 'AES decrypt finish')\n\n  return bytes\n}\n\nexport function gzipUncompress(bytes: Uint8Array): Uint8Array {\n  // console.log('Gzip uncompress start')\n  const result = inflate(bytes)\n  // console.log('Gzip uncompress finish')\n  return result\n}\n\nexport function nextRandomInt(maxValue: number) {\n  return Math.floor(Math.random() * maxValue)\n}\n\n\nexport function pqPrimeFactorization(pqBytes: Bytes) {\n  const minSize = Math.ceil(64 / bpe) + 1\n\n  // const what = new BigInteger(pqBytes)\n  const hex = bytesToHex(pqBytes)\n  const lWhat = str2bigInt(hex, 16, minSize)\n  const result = pqPrimeLeemon(lWhat)\n  return result\n}\n\n\nexport function pqPrimeLeemon(what: Bytes) {\n  const minBits = 64\n  const minLen = Math.ceil(minBits / bpe) + 1\n  let it = 0\n  let q, lim\n  const a = new Array(minLen)\n  const b = new Array(minLen)\n  const c = new Array(minLen)\n  const g = new Array(minLen)\n  const z = new Array(minLen)\n  const x = new Array(minLen)\n  const y = new Array(minLen)\n\n  for (let i = 0; i < 3; i++) {\n    q = (nextRandomInt(128) & 15) + 17\n    copyInt_(x, nextRandomInt(1000000000) + 1)\n    copy_(y, x)\n    lim = 1 << i + 18\n\n    for (let j = 1; j < lim; j++) {\n      ++it\n      copy_(a, x)\n      copy_(b, x)\n      copyInt_(c, q)\n\n      while (!isZero(b)) {\n        if (b[0] & 1) {\n          add_(c, a)\n          if (greater(c, what)) {\n            sub_(c, what)\n          }\n        }\n        add_(a, a)\n        if (greater(a, what)) {\n          sub_(a, what)\n        }\n        rightShift_(b, 1)\n      }\n\n      copy_(x, c)\n      if (greater(x, y)) {\n        copy_(z, x)\n        sub_(z, y)\n      } else {\n        copy_(z, y)\n        sub_(z, x)\n      }\n      eGCD_(z, what, g, a, b)\n      if (!equalsInt(g, 1)) {\n        break\n      }\n      if ((j & j - 1) === 0) {\n        copy_(y, x)\n      }\n    }\n    if (greater(g, one)) {\n      break\n    }\n  }\n\n  divide_(what, g, x, y)\n\n  const [P, Q] =\n    greater(g, x)\n      ? [x, g]\n      : [g, x]\n\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\n\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\n}\n\nexport function bytesModPow(x: Bytes | Uint8Array, y: Bytes | Uint8Array, m: Bytes | Uint8Array) {\n  const xBigInt = str2bigInt(bytesToHex(x), 16)\n  const yBigInt = str2bigInt(bytesToHex(y), 16)\n  const mBigInt = str2bigInt(bytesToHex(m), 16)\n  const resBigInt = powMod(xBigInt, yBigInt, mBigInt)\n\n  return bytesFromHex(bigInt2str(resBigInt, 16))\n}\n\n"]}