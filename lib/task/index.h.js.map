{"version":3,"sources":["../../src/task/index.h.js"],"names":[],"mappings":";;AAEA;;AAEA;;AACA;;;;AACA","file":"index.h.js","sourcesContent":["//@flow\n\nimport { type AxiosXHR } from 'axios'\n\nimport { NetMessage } from '../service/networker/net-message'\nimport NetworkerThread from '../service/networker'\nimport { type DCNumber, type UID } from 'Newtype'\n\nexport type RawInput = {\n  message: NetMessage,\n  noResponseMsgs: string[],\n  result: AxiosXHR<ArrayBuffer>,\n  thread: NetworkerThread,\n  dc: DCNumber,\n  uid: UID,\n}\n\nexport type IncomingType = RawInput & {\n  messageID: string,\n  sessionID: Uint8Array,\n  seqNo: number\n}\n\nexport type RawError = {\n  +_: 'rpc_error',\n  +error_code: number,\n  +error_message: string,\n}\n\nexport type RawObject = {\n  +_: string,\n}\n\n\nexport type ApiData = {\n  +_: string,\n  +flags?: number,\n}\n\nexport type SystemMessage = {\n  +_: 'new_session_created' | string,\n  +[field: string]: string,\n}\n\nexport type RawBody = {\n  +_: 'rpc_result',\n  +req_msg_id: string,\n  +result?: RawError | ApiData,\n}\n\nexport type RawInner = {\n  +_: string,\n  +body: RawBody | SystemMessage,\n  +bytes: number,\n  +msg_id: string,\n  +seqno: number,\n}\n\nexport type RawContainer = {\n  +_: string,\n  +messages: RawInner[]\n}\n\nexport type  RawMessage = RawContainer | RawBody | RawObject\n\n/*::\nopaque type Int = number\nopaque type StringDec: string = string\nopaque type Uid: string = string\nopaque type NonNegativeInt: Int = number\nopaque type DcInt: NonNegativeInt = number\n*/\n\nexport type MessageCore = {|\n  +id: string,\n  +seq: number,\n  +session: number[],\n  +dc: number,\n|}\n\nexport type MessageMain = {\n  +id: string,\n  +seq: number,\n  +session: Uint8Array,\n  +dc: number,\n  +flags: {\n    +api: boolean,\n    +inner: boolean,\n    +container: boolean,\n    +incoming: boolean,\n    +methodResult: boolean,\n    +body: boolean,\n    +error: boolean,\n  }\n}\n\nexport type MessageDraft =\n  | {\n    ...MessageCore,\n    +type: 'object',\n    +raw: RawObject,\n  }\n  | {\n    ...MessageCore,\n    +type: 'container',\n    +raw: string[],\n  }\n  | {\n    ...MessageCore,\n    +type: 'inner',\n    +raw: RawInner,\n  }\n\n\nexport type Conformᐸincomingᐳ = {\n  +incoming: {\n    +timestamp: number,\n  }\n} &  MessageMain\n\nexport type ConformᐸmethodResultᐳ = {\n  +methodResult: { +outID: string }\n} & Conformᐸincomingᐳ & MessageMain\n\nexport type Conformᐸinnerᐳ = {\n  +inner: { +container: string }\n} & MessageMain\n\nexport type Conformᐸbodyᐳ = {\n  +body: {\n    +_: string,\n    +[field: string]: any,\n  }\n} & MessageMain\n\n// /* {\n//   +api: {\n//     +resultType: string,\n//   }\n// } & */\n\n//$FlowIssue\nexport type Conformᐸapiᐳ = {\n  +api: {\n    +resolved: boolean,\n    +apiID: string,\n  }\n} & ConformᐸmethodResultᐳ\n\nexport type Conformᐸerrorᐳ = {\n  +error: {\n    +code: number,\n    +message: string,\n    +handled: boolean,\n  }\n} & Conformᐸapiᐳ\n\nexport type Conformᐸcontainerᐳ = {\n  +container: {\n    +contains: string[],\n    // +apiMap: Map<string, (string | false)>,\n  }\n} & MessageMain\n\nexport type MessageUnit = {\n  +id: string,\n  +seq: number,\n  +session: Uint8Array,\n  +dc: number,\n  +flags: {\n    +api: boolean,\n    +inner: boolean,\n    +container: boolean,\n    +incoming: boolean,\n    +methodResult: boolean,\n    +body: boolean,\n    +error: boolean,\n  },\n  +api: {\n    +resolved: boolean,\n    +apiID: string,\n  },\n  +inner: { +container: string },\n  +container: {\n    +contains: string[],\n  },\n  +incoming: {\n    +timestamp: number,\n  },\n  +methodResult: { +outID: string },\n  +body: {\n    +_: string,\n    +[field: string]: any,\n  },\n  +error: {\n    +code: number,\n    +message: string,\n    +handled: boolean,\n  },\n}\n\nexport type ᐸPatchᐳMessage = { dc: number, id: string }\n\nexport type ᐸPatchᐳProcessAck = ᐸPatchᐳMessage\nexport type ᐸPatchᐳAck = ᐸPatchᐳMessage\nexport type ᐸPatchᐳHome = number\nexport type ᐸPatchᐳAuthKey = { dc: number, authKey: number[] | false }\nexport type ᐸPatchᐳReqResend = ᐸPatchᐳMessage\nexport type ᐸPatchᐳResend = ᐸPatchᐳMessage\nexport type ᐸPatchᐳLastMesages = ᐸPatchᐳMessage\nexport type ᐸPatchᐳSalt = { dc: number, salt: number[] }\nexport type ᐸPatchᐳSession = {\n  dc: number,\n  session: number[],\n  seq: number,\n  first: string\n}\n\nexport type ᐸPatchᐳSummary = {\n  processAck: ᐸPatchᐳProcessAck[],\n  ack: ᐸPatchᐳAck[],\n  // home: ᐸPatchᐳHome[],\n  // auth: ᐸPatchᐳAuthKey[],\n  reqResend: ᐸPatchᐳReqResend[],\n  // resend: ᐸPatchᐳResend[],\n  // lastMessages: ᐸPatchᐳLastMesages[],\n  // salt: ᐸPatchᐳSalt[],\n  // session: ᐸPatchᐳSession[],\n}\n\n\ntype ReducedMessage = { [dc: number]: string[] }\n// type MaybeKey = { [dc: number]: number[] | false }\n\nexport type ᐸPatchᐳSummaryReduced = {\n  processAck: ReducedMessage,\n  ack: ReducedMessage,\n  // home: ᐸPatchᐳHome[],\n  // auth: MaybeKey,\n  reqResend: ReducedMessage,\n  // resend: ReducedMessage,\n  // lastMessages: ReducedMessage,\n  // salt: MaybeKey,\n  // session: { [dc: number]: ᐸPatchᐳSession | false },\n}\n\nexport type DcAuth = {\n  auth: number[] | false,\n  salt: number[] | false,\n  session: ᐸPatchᐳSession | false,\n}\n\nexport type PUnitList = {\n  normalized: MessageUnit[],\n  summary: ᐸPatchᐳSummaryReduced,\n}\n"]}