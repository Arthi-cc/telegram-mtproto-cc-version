{"version":3,"sources":["../../src/task/normalize.js"],"names":["normalize","log","ctx","flattenRaw","flattenMessage","processed","input","messageID","seqNo","sessionID","response","uid","dc","logic","checkContainer","fold","data","type","id","seq","session","raw","flattenContainer","cond","messages","Array","isArray","pass","fail","ids","map","msg_id","get","normalizedMsgs","msg","seqno"],"mappings":";;;;;QA4BgBA,S,GAAAA,S;;AA1BhB;;AAEA;;AAMA;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;AACA,IAAMC,MAAM,uBAAO,YAAnB;;AAEA;;;;;;;;;AASO,SAASD,SAAT,CAAmBE,GAAnB,EAAwC;AAC7C,MAAMC,aAAaC,eAAeF,GAAf,CAAnB;AACA,MAAMG,YAAY,0BAAWH,GAAX,EAAgBC,UAAhB,CAAlB;AACA,2BAAY,0BAAWD,GAAX,EAAgBG,SAAhB,CAAZ,EAA2CH,GAA3C;AACD;;AAED,SAASE,cAAT,CAAwBE,KAAxB,EAA+C;AAC7C,MAAM;AACJC,aADI;AAEJC,SAFI;AAGJC,aAHI;AAIJC,YAJI;AAKJC,OALI;AAMJC;AANI,MAOFN,KAPJ;AAQA,SAAO,oBAAMI,QAAN,EACJG,KADI,CACEC,cADF,EAEJC,IAFI,CAGHC,QAAQ,CAAC;AACPC,UAAS,QADF;AAEPN,OAFO;AAGPO,QAASX,SAHF;AAIPY,SAASX,KAJF;AAKPY,aAAS,oBAAqB,CAAC,GAAGX,SAAJ,CALvB,CAKsC;AALtC,MAMPG,EANO;AAOPS,SAASL;AAPF,GAAD,CAHL,EAYHA,QAAQM,iBAAiBhB,KAAjB,EAAwBU,IAAxB,CAZL,CAAP;AAcD;;AAED,IAAMF,iBAAiB;AACrBS,QAAMb,YAAYA,SAASc,QAAT,IAAqB,IAArB,IAA6BC,MAAMC,OAAN,CAAchB,SAASc,QAAvB,CAD1B;AAErBG,QAAOjB,QAAD,IAA6BA,QAFd;AAGrBkB,QAAOlB,QAAD,IAA0BA;AAHX,CAAvB;;AAMA,SAASY,gBAAT,CAA0BhB,KAA1B,EAAiC,EAAEkB,QAAF,EAAjC,EAA6E;AAC3E,MAAM;AACJZ,MADI,EACAD,GADA,EACKF,SADL,EACgBF,SADhB,EAC2BC;AAD3B,MAEFF,KAFJ;AAGA,MAAMuB,MAAML,SAASM,GAAT,CAAa,CAAC,EAAEC,MAAF,EAAD,KAAgBA,MAA7B,CAAZ;AACA,MAAMX,UAAU,yBAAOA,OAAP,CAAeY,GAAf,CAAmBrB,GAAnB,EAAwBC,EAAxB,CAAhB;;AAaA,MAAMqB,iBAAiCT,SAASM,GAAT,CAAaI,QAAQ;AAC1DjB,UAAM,OADoD;AAE1DC,QAAMgB,IAAIH,MAFgD;AAG1DZ,SAAMe,IAAIC,KAHgD;AAI1Df,WAJ0D;AAK1DR,MAL0D;AAM1DS,SAAMa;AANoD,GAAR,CAAb,CAAvC;AAQA,SAAO,CAAC,GAAGD,cAAJ,EAhBoB;AACzBhB,UAAM,WADmB;AAEzBC,QAAMX,SAFmB;AAGzBY,SAAMX,KAHmB;AAIzBY,WAJyB;AAKzBR,MALyB;AAMzBS,SAAMQ;AANmB,GAgBpB,CAAP;AACD","file":"normalize.js","sourcesContent":["//@flow\n\nimport { Right } from 'apropos'\n\nimport {\n  type RawInput,\n  type RawContainer,\n  type RawObject,\n  type MessageDraft,\n} from './index.h'\nimport { toCryptoKey } from 'Newtype'\nimport processing from './processing'\nimport Config from 'ConfigProvider'\n\nimport mergePatch from './merge-patch'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`task-index`\n\n/*::\nimport { decrypt } from './decrypt'\ndeclare var inp: RawInput\ndeclare function wait<T>(data: Promise<T>): T\nconst decryptedData = wait(decrypt(inp).promise())\n\ntype NormalizeInput = typeof decryptedData\n*/\n\nexport function normalize(ctx: NormalizeInput) {\n  const flattenRaw = flattenMessage(ctx)\n  const processed = processing(ctx, flattenRaw)\n  return { ...mergePatch(ctx, processed), ...ctx }\n}\n\nfunction flattenMessage(input): MessageDraft[] {\n  const {\n    messageID,\n    seqNo,\n    sessionID,\n    response,\n    uid,\n    dc,\n  } = input\n  return Right(response)\n    .logic(checkContainer)\n    .fold(\n      data => [{\n        type   : 'object',\n        uid,\n        id     : messageID,\n        seq    : seqNo,\n        session: /*:: toCryptoKey( */ [...sessionID] /*:: ) */,\n        dc,\n        raw    : data\n      }],\n      data => flattenContainer(input, data)\n    )\n}\n\nconst checkContainer = {\n  cond: response => response.messages != null && Array.isArray(response.messages),\n  pass: (response): RawContainer => (response: any),\n  fail: (response): RawObject => (response: any),\n}\n\nfunction flattenContainer(input, { messages }: RawContainer): MessageDraft[] {\n  const {\n    dc, uid, sessionID, messageID, seqNo,\n  } = input\n  const ids = messages.map(({ msg_id }) => msg_id)\n  const session = Config.session.get(uid, dc)\n  if (__DEV__)\n    console.log(`input.sessionID`, sessionID)\n  if (__DEV__)\n    console.log(`real session`, session)\n  const cont: MessageDraft = {\n    type: 'container',\n    id  : messageID,\n    seq : seqNo,\n    session,\n    dc,\n    raw : ids,\n  }\n  const normalizedMsgs: MessageDraft[] = messages.map(msg => ({\n    type: 'inner',\n    id  : msg.msg_id,\n    seq : msg.seqno,\n    session,\n    dc,\n    raw : msg,\n  }))\n  return [...normalizedMsgs, cont]\n}\n"]}