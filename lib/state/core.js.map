{"version":3,"sources":["../../src/state/core.js"],"names":["log","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configureStore","rootReducer","initialState","epicMiddleware","enhancers","meta","store","dispatch","rootStream","multicast","observe"],"mappings":";;;;;;AACA;;AACA;;AACA;;AACA;;;;AAGA;;AAEA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AARA,IAAMA,MAAM,uBAAO,YAAnB;;AAUA,IAAIC,iCAAJ;;AAGE,IAAI,oBAAW,KAAX,IAAoB,OAAOC,MAAP,KAAkB,QAA1C,EACED;AACE;AACAC,OAAOC,oCAAP,kBAFF;;;AAoBJ,SAASC,cAAT,CAAwBC,WAAxB,EAAwCC,YAAxC,EAAyD;AACvD,MAAMC,iBAAiB,oDAAvB;AACA,MAAMC,YAAYP,iBAChB,4BACE,kCAAiB,EAAEQ,MAAM,EAAR,EAAjB,CADF,0DAIEF,cAJF,CADgB,CAAlB;;AASA;AACA,MAAMG,QAAQ,wBACZL,WADY,EAEZC,YAFY,EAGZE,SAHY,CAAd;;AAKA,SAAOE,KAAP;AACD;;AAED,IAAMA,QAAQN,kCAA4B,EAA5B,CAAd;;AAEA,wBAAWM,MAAMC,QAAjB;;AAEA,IAAMC,aAA4B,gBAAKF,KAAL,EAAYG,SAAZ,EAAlC;;AAEAD,WAAWE,OAAX;;kBAEeJ,K","file":"core.js","sourcesContent":["//@flow\nimport { type Stream, from } from 'most'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { createEpicMiddleware } from 'redux-most'\nimport Logger from 'mtproto-logger'\nconst log = Logger`redux-core`\n\nimport { isNode } from 'Runtime'\n\nimport { type State } from './index.h'\nimport rootReducer from './reducer'\nimport rootEpic from './epic'\nimport { skipEmptyMiddleware, normalizeActions, tryAddUid } from './middleware'\nimport { emitState, onDispatch } from './portal'\n\nlet composeEnhancers = compose\n\nif (!__DEV__) {\n  if (isNode === false && typeof window === 'object')\n    composeEnhancers =\n      //eslint-disable-next-line\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n}\n\nif (__DEV__) {\n  // composeEnhancers = require('remote-redux-devtools').composeWithDevTools({\n  //   realtime             : true,\n  //   hostname             : 'localhost',\n  //   port                 : 8000,\n  //   maxAge               : 600,\n  //   suppressConnectErrors: true,\n  // })\n\n  process.on('unhandledRejection', val => {\n    console.log(val)\n    console.trace('on')\n  })\n}\n\nfunction configureStore(rootReducer: *, initialState: *) {\n  const epicMiddleware = createEpicMiddleware(rootEpic)\n  const enhancers = composeEnhancers(\n    applyMiddleware(\n      normalizeActions({ meta: {} }),\n      tryAddUid,\n      skipEmptyMiddleware,\n      epicMiddleware,\n    )\n  )\n\n  //$FlowIssue\n  const store = createStore(\n    rootReducer,\n    initialState,\n    enhancers)\n\n  return store\n}\n\nconst store = configureStore(rootReducer, {})\n\nonDispatch(store.dispatch)\n\nconst rootStream: Stream<State> = from(store).multicast()\n\nrootStream.observe(emitState)\n\nexport default store\n"]}