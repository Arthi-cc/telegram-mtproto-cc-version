{"version":3,"sources":["../../../src/state/reducer/index.js"],"names":["initial","trimAction","action","type","progress","idle","current","done","result","TASK","DONE","state","payload","apiPL","onlyAPI","newState","reduce","reduceResults","empty","reducer","acc","val","id","api","apiID","data","body","init","list","maybeGetK","fold","x","snd","saved","res","push","findReq","req","requestID","units","filter","p","flags","resolved","getReqIDs","map","unitReduce","unit","newIdle","newCurrent","newDone","find","inIdle","findIndex","inCurrent","watcher","currentState","length","newNext","ids","concat","update","uid","INIT","ackDefault","pendingAck","ACK_ADD","dc","ack","dcAcks","updated","Set","ACK_DELETE","RECOVERY_MODE","halt","recovery","homeDc","STORAGE_IMPORTED","home","DC_DETECTED","DC_CHANGED","newDC","dcDetected","DC_REJECTED","lastMessages","authData","salt","AUTH","RESOLVE","set","serverSalt","merge","summary","remove","auth","authKey","authID","makeAuthID","authKeyID","Array","isArray","slice","commandReducer","apiRequests","msg","isAPI","msg_id","clientRequest","REQUEST","NEW","netReq","client","command","request","status","homeStatus","statusWatch","dcList","singleStatus","has","kv","decoratedClient","clientReducer","oldValue","newValue","idsReducer","mainReducer"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\n/* eslint-disable object-shorthand */\n\nimport { combineReducers, type Reducer } from 'redux'\nimport { createReducer } from 'redux-act'\nimport {\n  append,\n  contains,\n  without,\n  map,\n  takeLast,\n  pipe,\n  concat,\n  tail,\n  head,\n  remove,\n} from 'ramda'\n// import { Pure, liftF } from '@safareli/free'\n// import { of, Left, Right } from 'apropos'\n// import { Maybe } from 'folktale/maybe'\nimport type {\n  ApiNewRequest,\n  State,\n  Client,\n  ClientList,\n  InitType,\n  OnAckAdd,\n  OnStorageImported,\n  OnRecovery,\n  OnDcDetected,\n} from '../index.h'\nimport {\n  trimType,\n} from '../helpers'\nimport {\n  type UID,\n  toUID,\n  type DCNumber,\n} from 'Newtype'\nimport { MAIN, NET, API } from 'Action'\nimport keyStorage, { KeyStorage } from 'Util/key-storage'\nimport { KeyValue } from 'Monad'\nimport { sha1BytesSync } from 'Bin'\nimport { NetMessage } from '../../service/networker/net-message'\nimport requestWatch from './request'\nimport ApiRequest from '../../service/main/request'\nimport Config from 'ConfigProvider'\n\nimport {\n  type PUnitList,\n  type MessageUnit,\n} from '../../task/index.h'\n\nconst initial: any = {}\n\ndeclare var req: ApiRequest\n\nfunction trimAction(action: any): string {\n  return trimType(action.type)\n}\n\ntype RequestResult = { +_: string, +[key: string]: any }\n\nconst progress = (() => {\n\n  const idle = createReducer({}, [])\n  const current = createReducer({}, [])\n  const done = createReducer({}, [])\n  const result = createReducer({\n    //$off\n    [API.TASK.DONE]: (\n      state: KeyValue<string, RequestResult[]>,\n      payload: MessageUnit[]\n    ): KeyValue<string, RequestResult[]> => {\n      const apiPL = onlyAPI(payload)\n      const newState = apiPL.reduce(reduceResults, state)\n      return newState\n    }\n  }, KeyValue.empty())\n  type Progress = {\n    idle: ApiRequest[],\n    current: ApiRequest[],\n    done: ApiRequest[],\n    result: KeyValue<string, RequestResult[]>,\n  }\n  const reducer: Reducer<Progress> = combineReducers({\n    idle,\n    current,\n    done,\n    result,\n  })\n\n  function reduceResults(\n    acc: KeyValue<string, RequestResult[]>,\n    val: MessageUnit\n  ) {\n    const id = val.api.apiID\n    const data = val.body\n    const init: RequestResult[] = []\n    const list = acc\n      .maybeGetK(id)\n      .fold(() => init, x => x.snd())\n    const saved = append(data, list)\n    const res = acc.push([[id, saved]])\n    return res\n  }\n\n  const findReq = (id: string) => (req: ApiRequest) => req.requestID === id\n  const onlyAPI = (units: MessageUnit[]) => units\n    .filter(p => p.flags.api && p.api.resolved)\n  const getReqIDs = (list: ApiRequest[]) => list.map(req => req.requestID)\n\n  function unitReduce({ idle, current, done, result }: Progress, unit: MessageUnit) {\n    const id = unit.api.apiID\n    let newIdle = idle\n    let newCurrent = current\n    let newDone = done\n    const find = findReq(id)\n    const inIdle = newIdle.findIndex(find)\n    const inCurrent = newCurrent.findIndex(find)\n    if (inIdle > -1) {\n      const req = newIdle[inIdle]\n      newIdle = remove(inIdle, 1, newIdle)\n      newDone = append(req, newDone)\n    }\n    if (inCurrent > -1) {\n      const req = newCurrent[inCurrent]\n      newCurrent = remove(inCurrent, 1, newCurrent)\n      newDone = append(req, newDone)\n    }\n    return {\n      idle   : newIdle,\n      current: newCurrent,\n      done   : newDone,\n      result,\n    }\n  }\n\n  return function watcher(\n    currentState: Progress,\n    action: any\n  ): Progress {\n    const state: Progress = reducer(currentState, action)\n    const { idle, current, done, result } = state\n    switch (trimAction(action)) {\n      case 'api/next': {\n        if (idle.length === 0) return state\n        if (current.length > 0) return state\n        const newNext: ApiRequest = head(idle) /*:: || req */\n        const newState = {\n          idle   : tail(idle),\n          current: append(newNext, current),\n          done,\n          result,\n        }\n        return newState\n      }\n      case 'api/task new': {\n        const ids = getReqIDs(idle)\n          .concat(\n            getReqIDs(current),\n          )\n        const payload: ApiRequest[] = action.payload\n        const update = payload.filter(req => !contains(req.requestID, ids))\n        const newIdle = idle.concat(update)\n        return {\n          idle: newIdle,\n          current,\n          done,\n          result\n        }\n      }\n      case 'api/task done': {\n        const payload: MessageUnit[] = action.payload\n        const apiPL = onlyAPI(payload)\n        const newState: Progress = apiPL.reduce(unitReduce, state)\n        return newState\n      }\n      default: return state\n    }\n  }\n})()\n\n\n\nconst uid = createReducer({\n  //$FlowIssue\n  [MAIN.INIT]: (state: string, payload: InitType) => payload.uid,\n}, '')\n\ntype AckMap = { [dc: number]: string[] }\n\nconst ackDefault: AckMap = initial\nconst pendingAck = createReducer({\n  //$off\n  [NET.ACK_ADD]: (state: AckMap, { dc, ack }: OnAckAdd): AckMap => {\n    const dcAcks = state[dc] || []\n    const updated = [...new Set([...dcAcks, ...ack])]\n    return { ...state, [dc | 0]: updated }\n  },\n  //$off\n  [NET.ACK_DELETE]: (state: AckMap, { dc, ack }: OnAckAdd): AckMap => {\n    const dcAcks = state[dc] || []\n    const updated = without(ack, dcAcks)\n    return { ...state, [dc | 0]: updated }\n  },\n  //$off\n  [MAIN.RECOVERY_MODE]: (state: AckMap, { halt, recovery }: OnRecovery): AckMap =>  ({\n    ...state,\n    [halt]: [],\n  })\n}, ackDefault)\n\nconst homeDc = createReducer({\n  //$off\n  [MAIN.STORAGE_IMPORTED]: (state: number, { home }: OnStorageImported) => home,\n  //$off\n  [MAIN.DC_DETECTED]     : (state: number, { dc }: OnDcDetected) => dc,\n  //$FlowIssue\n  [MAIN.DC_CHANGED]      : (state: number, { newDC }: OnDcDetected) => newDC,\n}, 2)\n\nconst dcDetected = createReducer({\n  //$off\n  [MAIN.DC_DETECTED]: () => true,\n  //$off\n  [MAIN.DC_REJECTED]: () => false,\n}, false)\n\n\nconst lastMessages = createReducer({\n  //$off\n  [API.TASK.DONE]: (state: UID[], payload: MessageUnit[]): UID[] => pipe(\n    map(unit => /*:: toUID( */ unit.id /*:: ) */),\n    concat(state),\n    takeLast(100),\n  )(payload)\n}, [])\n\nconst authData = (() => {\n  const salt = createReducer({\n    //$off\n    [MAIN.AUTH.RESOLVE]    : (state: KeyStorage, payload: OnAuthResolve) => state.set(payload.dc, payload.serverSalt),\n    //$off\n    [MAIN.STORAGE_IMPORTED]: (state: KeyStorage, { salt }: OnStorageImported) => state.merge(salt),\n    '[01] action carrier'  : (state: KeyStorage, payload: PUnitList) => state.merge(payload.summary.salt),\n    //$off\n    [MAIN.RECOVERY_MODE]   : (state: KeyStorage, { halt, recovery }: OnRecovery): KeyStorage =>\n      state.remove(halt)\n  }, keyStorage())\n\n  const auth = createReducer({\n    //$off\n    [MAIN.STORAGE_IMPORTED]: (state: KeyStorage, { auth }: OnStorageImported) => state.merge(auth),\n    '[01] action carrier'  : (state: KeyStorage, payload: PUnitList) => state.merge(payload.summary.auth),\n    //$off\n    [MAIN.AUTH.RESOLVE]    : (state: KeyStorage, payload: OnAuthResolve) => state.set(payload.dc, payload.authKey),\n    //$off\n    [MAIN.RECOVERY_MODE]   : (state: KeyStorage, { halt, recovery }: OnRecovery): KeyStorage =>\n      state.remove(halt)\n  }, keyStorage())\n\n  const authID = createReducer({\n    //$off\n    [MAIN.STORAGE_IMPORTED]: (state: KeyStorage, { auth }: OnStorageImported) => state.merge(map(makeAuthID, auth)),\n    '[01] action carrier'  : (state: KeyStorage, payload: PUnitList) =>\n    //$off\n      state.merge(map(makeAuthID, payload.summary.auth)),\n    //$off\n    [MAIN.AUTH.RESOLVE] : (state: KeyStorage, payload: OnAuthResolve) => state.set(payload.dc, payload.authKeyID),\n    //$off\n    [MAIN.RECOVERY_MODE]: (state: KeyStorage, { halt, recovery }: OnRecovery): KeyStorage =>\n      state.remove(halt)\n  }, keyStorage())\n\n  const makeAuthID = (auth: number[] | false): number[] | false => Array.isArray(auth)\n    ? sha1BytesSync(auth).slice(-8)\n    : false\n\n  return { auth, salt, authID }\n})()\n\nfunction commandReducer(\n  state: KeyValue<string, string> = KeyValue.empty(),\n  action: any\n): KeyValue<string, string> {\n  switch ( trimType(action.type) ) {\n    case 'networker/sent add': {\n      const payload: NetMessage[] = action.payload\n      const apiRequests = payload\n        .filter(msg => msg.isAPI)\n        .map(({ msg_id, requestID }) => [msg_id, requestID || ''])\n      return state.push(apiRequests)\n    }\n    case 'main/recovery mode': return state\n    default: return state\n  }\n}\n\nconst clientRequest = createReducer({\n  //$off\n  [API.REQUEST.NEW]: (\n    state: KeyValue<UID, ApiRequest>,\n    { netReq }: ApiNewRequest\n  ): KeyValue<UID, ApiRequest> =>\n    state.push([[netReq.requestID, netReq]])\n}, KeyValue.empty())\n\nconst client: Reducer<Client> = combineReducers({\n  uid,\n  homeDc,\n  progress,\n  command   : commandReducer,\n  request   : clientRequest,\n  lastMessages,\n  dcDetected,\n  ...authData,\n  pendingAck,\n  status    : createReducer({}, {}),\n  homeStatus: createReducer({}, false),\n})\n\nfunction statusWatch(state: Client) {\n  const dcList = Config.dcList(state.uid)\n  const singleStatus = dc =>\n    state.auth.has(dc)\n    && state.authID.has(dc)\n    && state.salt.has(dc)\n  const kv: KeyValue<DCNumber, boolean> = KeyValue.empty()\n  return kv.push(\n    dcList\n      .map(dc => [dc, singleStatus(dc)]))\n}\n\nfunction decoratedClient(state: Client, action: $off): Client {\n  const currentState = requestWatch(client(state, action), action)\n  const status = statusWatch(currentState)\n  const homeStatus = status\n    .maybeGetK(currentState.homeDc)\n    .fold(() => false, x => x.snd())\n  return {\n    ...currentState,\n    status,\n    homeStatus,\n  }\n}\n\nconst clientReducer: Reducer<ClientList> = (state: ClientList = { ids: [] }, action: any) => {\n  if (typeof action.uid !== 'string') return state\n  const uid: string = action.uid\n  const oldValue = state[uid]\n  const newValue = decoratedClient(oldValue, action)\n  if (oldValue === newValue) return state\n  return {\n    ...state,\n    [uid]: newValue,\n    ids  : idsReducer(state.ids, uid)\n  }\n}\n\nfunction idsReducer(state: string[], uid: string): string[] {\n  return contains(uid, state)\n    ? state\n    : append(uid, state)\n}\n\nconst mainReducer: Reducer<State> = combineReducers({\n  client: clientReducer,\n})\n\nexport default mainReducer\n"]}