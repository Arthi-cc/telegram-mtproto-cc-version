{"version":3,"sources":["../../src/state/helpers.js"],"names":["doubleCreator","actionSelector","action","stream","tag","meta","x","getType","Object","defineProperties","value","enumerable","type","guardedReducer","guards","reducer","state","payload","i","ln","length","guard","trimType"],"mappings":";;;;;;QAgCgBA,a,GAAAA,a;;AA9BhB;;AACA;;AACA;;AACA;;AAkBA,IAAMC,iBACHC,MAAD,IACGC,MAAD,IAAY,uBAAOD,MAAP,EAAeC,MAAf,CAFhB;;AASO,SAASH,aAAT,CACLI,GADK,EACMC,IADN,EAE4B;AACjC,MAAMH,SAAoC,OAAOG,IAAP,KAAgB,UAAhB,GACtC,4BAAaD,GAAb,EAAmBE,CAAD,IAAOA,CAAzB,EAA4BD,IAA5B,CADsC,GAEtC,4BAAaD,GAAb,CAFJ;AAGA,MAAMD,SAAuCF,eAAeC,OAAOK,OAAP,EAAf,CAA7C;AACAC,SAAOC,gBAAP,CAAwBP,MAAxB,EAAgC;AAC9BC,YAAQ;AACNO,aAAYP,MADN;AAENQ,kBAAY;AAFN,KADsB;AAK9BC,UAAM;AACJF,aAAYR,OAAOK,OAAP,EADR;AAEJI,kBAAY;AAFR;AALwB,GAAhC;AAUA,SAAOT,MAAP;AACD;;AAEM,IAAMW,0CAAiB,CAC5BC,MAD4B,EAE5BC,OAF4B,KAGzB,CAACC,KAAD,EAAWC,OAAX,KAA0B;AAC7B,OAAK,IAAIC,IAAI,CAAR,EAAWC,KAAKL,OAAOM,MAA5B,EAAoCF,IAAIC,EAAxC,EAA4CD,GAA5C,EAAiD;AAC/C,QAAMG,QAAQP,OAAOI,CAAP,CAAd;AACA,QAAI,CAACG,MAAML,KAAN,EAAaC,OAAb,CAAL,EACE,OAAOD,KAAP;AACH;AACD,SAAOD,QAAQC,KAAR,EAAeC,OAAf,CAAP;AACD,CAVM;;AAYA,IAAMK,8BACX,oBAAQ,YAAR,EAAsB,EAAtB,CADK","file":"helpers.js","sourcesContent":["//@flow\n\nimport { Stream } from 'most'\nimport { replace } from 'ramda'\nimport { createAction } from 'redux-act'\nimport { select } from 'redux-most'\n\n\ntype ActionCreator<Type, Payload> =\n  (stream: Stream<any>) =>\n    Stream<Action<Type, Payload>>\n\ndeclare class Act<Tag = 'action'> { toString(): Tag }\n\ntype Action<Tag = 'action', Payload = {}, Meta = void> = {\n  (payload: Payload, meta: Meta): Action<Tag, Payload>,\n  // call$(payload: Payload, meta: Meta): Action<Tag, Payload>,\n  // (payload: Payload): Action<Tag, Payload>,\n  getType(): Tag,\n  type: Tag,\n  payload: Payload,\n}\n\nconst actionSelector =\n  (action: any): ActionCreator<any, any> =>\n    (stream) => select(action, stream)\n\nexport type ActionPair<Type, Payload, Meta = void> = Action<Type, Payload, Meta> & {\n  stream: ActionCreator<Type, Payload>,\n  type: Type,\n}\n\nexport function doubleCreator<Type, Payload, Meta>(\n  tag: Type, meta?: (pl: Payload, meta: Meta) => any\n): ActionPair<Type, Payload, Meta> {\n  const action: ActionPair<Type, Payload> = typeof meta === 'function'\n    ? createAction(tag, (x) => x, meta)\n    : createAction(tag)\n  const stream: ActionCreator<Type, Payload> = actionSelector(action.getType())\n  Object.defineProperties(action, {\n    stream: {\n      value     : stream,\n      enumerable: false,\n    },\n    type: {\n      value     : action.getType(),\n      enumerable: false,\n    }\n  })\n  return action\n}\n\nexport const guardedReducer = <S, -P>(\n  guards: ((state: S, payload: P) => boolean)[],\n  reducer: (state: S, payload: P) => S,\n) => (state: S, payload: P) => {\n  for (let i = 0, ln = guards.length; i < ln; i++) {\n    const guard = guards[i]\n    if (!guard(state, payload))\n      return state\n  }\n  return reducer(state, payload)\n}\n\nexport const trimType: (type: string) => string =\n  replace(/\\[\\d+\\]\\s*/, '')\n"]}