{"version":3,"sources":["../../src/state/index.h.js"],"names":[],"mappings":";;AAEA;;AAGA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;AACA","file":"index.h.js","sourcesContent":["//@flow\n\nimport { type AxiosXHR } from 'axios'\n\n\nimport ApiRequest from '../service/main/request'\nimport { NetMessage } from '../service/networker/net-message'\nimport NetworkerThread from '../service/networker'\nimport { type MessageUnit } from '../task/index.h'\nimport { KeyStorage } from 'Util/key-storage'\nimport { KeyValue } from 'Monad'\nimport {\n  type CryptoKey,\n  toCryptoKey,\n  type DCNumber,\n  toDCNumber,\n  type UID,\n  toUID,\n} from 'Newtype'\nexport type MessageHistory = {\n  id: string,\n  seq: number,\n  direction: 'in' | 'out',\n  message: MessageUnit\n}\n\nexport type OnRecovery = {\n  halt: DCNumber,\n  recovery: DCNumber,\n}\n\nexport type InitType = {\n  uid: UID,\n}\n\nexport type ApiNewRequest = {\n  netReq: ApiRequest,\n  method: string,\n  params: { [key: string]: mixed },\n  timestamp: number,\n}\n\nexport type CommandList = {\n  commands: string[],\n  msgs: string[],\n  byMsg: { [msg: string]: string },\n  byCommand: { [command: string]: string },\n}\n\nexport type Client = {\n  uid: string,\n  homeDc: DCNumber,\n  dcDetected: boolean,\n  command: KeyValue<string, string>,\n  request: KeyValue<UID, ApiRequest>,\n  pendingAck: { [dc: number]: string[] },\n  lastMessages: UID[],\n  progress: {\n    idle: ApiRequest[],\n    current: ApiRequest[],\n    done: ApiRequest[],\n    result: KeyValue<string, { +_: string, +[key: string]: any }[]>,\n  },\n  salt: KeyStorage,\n  auth: KeyStorage,\n  authID: KeyStorage,\n  homeStatus: boolean,\n  status: KeyValue<DCNumber, boolean>,\n}\n\nexport type ClientList = {\n  ids: string[],\n  [uid: string]: Client,\n}\n\nexport type State = {\n  client: ClientList,\n}\n\nexport type OnSeqSet = {\n  dc: number,\n  seq: number,\n}\n\nexport type OnAckAdd = {\n  dc: DCNumber,\n  ack: string[]\n}\n\nexport type OnNewTask = ApiRequest[]\n\nexport type OnRequestDone = MessageUnit[]/* {\n  message: NetMessage,\n  thread: NetworkerThread,\n  result: {\n    messageID: string,\n    response: MTP,\n    seqNo: number,\n    sessionID: Uint8Array,\n  },\n  normalized: MessageUnit[],\n} */\n\nexport type OnStorageImported = {\n  +auth: { [dc: number]: number[] },\n  +salt: { [dc: number]: number[] },\n  +session: { [dc: number]: number[] },\n  +home: DCNumber,\n  +uid: UID,\n}\n\nexport type OnReceiveResponse = {\n  message: NetMessage,\n  noResponseMsgs: string[],\n  result: AxiosXHR<ArrayBuffer>,\n  thread: NetworkerThread,\n  dc: DCNumber,\n  uid: UID,\n}\n\nexport type OnNetSend = {\n  message: NetMessage,\n  threadID: string,\n  thread: NetworkerThread,\n  noResponseMsgs: string[],\n}\n\nexport type OnDcDetected = {\n  dc: DCNumber,\n  uid: UID,\n}\n\nexport type OnNext = {\n  dc: DCNumber,\n  uid: UID,\n}\n\nexport type OnAuthResolve = {\n  dc: DCNumber,\n  uid: UID,\n  authKey: CryptoKey,\n  authKeyID: CryptoKey,\n  serverSalt: CryptoKey,\n}\n"]}