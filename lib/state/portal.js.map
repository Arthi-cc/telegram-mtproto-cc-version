{"version":3,"sources":["../../src/state/portal.js"],"names":["emitState","onDispatch","dispatch","emitter","wildcard","state","emit","on","action","uid","TypeError","rootStream","skipRepeats","multicast","currentState","observe","getState"],"mappings":";;;;;;QAWgBA,S,GAAAA,S;QAIAC,U,GAAAA,U;QAIAC,Q,GAAAA,Q;;AAjBhB;;;;AACA;;AAEA;;;;AAEO,IAAMC,4BAAU,2BAAY;AACjCC,YAAU;AADuB,CAAZ,CAAhB;;AAIA,SAASJ,SAAT,CAAmBK,KAAnB,EAAiC;AACtCF,UAAQG,IAAR,CAAa,OAAb,EAAsBD,KAAtB;AACD;;AAEM,SAASJ,UAAT,CAAoBC,QAApB,EAAmC;AACxCC,UAAQI,EAAR,CAAW,UAAX,EAAuBL,QAAvB;AACD;;AAEM,SAASA,QAAT,CAAkBM,MAAlB,EAA+BC,GAA/B,EAA4C;AACjD,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIC,SAAJ,CAAe,2BAA0B,OAAOD,GAAI,IAAGA,GAAI,EAA3D,CAAN;AACD;AACDD,SAAOC,GAAP,GAAaA,GAAb;AACAN,UAAQG,IAAR,CAAa,UAAb,EAAyBE,MAAzB;AACD;;AAEM,IAAMG,kCAA4B,qBAAU,OAAV,EAAmBR,OAAnB,EACtCS,WADsC,GAEtCC,SAFsC,EAAlC;;AAIP,IAAIC,qBAAJ;;AAEAH,WAAWI,OAAX,CAAmBV,SAAS;AAC1BS,iBAAeT,KAAf;AACD,CAFD;;AAIO,IAAMW,8BAAwB,MAAMF,YAApC","file":"portal.js","sourcesContent":["//@flow\n\nimport Emitter from 'eventemitter2'\nimport { fromEvent, Stream } from 'most'\n\nimport { type State } from './index.h'\n\nexport const emitter = new Emitter({\n  wildcard: true\n})\n\nexport function emitState(state: State) {\n  emitter.emit('state', state)\n}\n\nexport function onDispatch(dispatch: any) {\n  emitter.on('dispatch', dispatch)\n}\n\nexport function dispatch(action: any, uid: string) {\n  if (typeof uid !== 'string') {\n    throw new TypeError(`uid must be string, got ${typeof uid} ${uid}`)\n  }\n  action.uid = uid\n  emitter.emit('dispatch', action)\n}\n\nexport const rootStream: Stream<State> = fromEvent('state', emitter)\n  .skipRepeats()\n  .multicast()\n\nlet currentState: State\n\nrootStream.observe(state => {\n  currentState = state\n})\n\nexport const getState: () => State = () => currentState\n"]}