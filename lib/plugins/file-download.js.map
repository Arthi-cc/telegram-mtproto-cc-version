{"version":3,"sources":["../../src/plugins/file-download.js"],"names":["CHUNK_SIZE","usedMethod","getOffset","chunkNum","getArgs","location","offset","limit","getLocation","doc","_","id","access_hash","downloadDocument","ctx","parts","Math","ceil","size","results","Uint8Array","i","args","response","api","mtpInvokeApi","set","bytes","pluginName"],"mappings":";;;;;;;;AAEA,IAAMA,aAAa,KAAnB;;;AAEA,IAAMC,aAAa,gBAAnB;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,CAACC,WAAmB,CAApB,KAA0BH,aAAaG,QAAzD;;AAEA,IAAMC,UAAU,CAACC,QAAD,EAAuBC,MAAvB,MAA2C;AACzDD,UADyD;AAEzDC,QAFyD;AAGzDC,SAAOP;AAHkD,CAA3C,CAAhB;;AAMA,IAAMQ,cAAeC,GAAD,KAAkC;AACpDC,KAAa,2BADuC;AAEpDC,MAAaF,IAAIE,EAFmC;AAGpDC,eAAaH,IAAIG;AAHmC,CAAlC,CAApB;;AAMA,IAAMC,mBACHC,GAAD;AAAA,+BACE,WAAML,GAAN,EAA0B;AACxB;AACA,QAAMJ,WAAWG,YAAYC,GAAZ,CAAjB;AACA,QAAMM,QAAQC,KAAKC,IAAL,CAAUR,IAAIS,IAAJ,GAAWlB,UAArB,CAAd;AACA,QAAMmB,UAAU,IAAIC,UAAJ,CAAeX,IAAIS,IAAnB,CAAhB;AACA,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIN,KAApB,EAA2BM,GAA3B,EAAgC;AAC9B,UAAMf,SAASJ,UAAUmB,CAAV,CAAf;AACA,UAAMC,OAAOlB,QAAQC,QAAR,EAAkBC,MAAlB,CAAb;AACA,UAAMiB,WAAW,MAAMT,IAAIU,GAAJ,CAAQC,YAAR,CAAqBxB,UAArB,EAAiCqB,IAAjC,CAAvB;AACA;AACAH,cAAQO,GAAR,CAAYH,SAASI,KAArB,EAA4BrB,MAA5B;AACD;AACD,WAAOa,OAAP;AACD,GAdH;;AAAA;AAAA;AAAA;AAAA,IADF;;AAiBAN,iBAAiBe,UAAjB,GAA8B,UAA9B;;kBAEef,gB","file":"file-download.js","sourcesContent":["//@flow\nimport type { MTProto } from '../service/main'\nconst CHUNK_SIZE = 10240\n\nconst usedMethod = 'upload.getFile'\n\ntype MTInputFileLocation =\n  'inputDocumentFileLocation'\n  | 'inputVideoFileLocation'\n\ntype MTLocation = {\n  _: MTInputFileLocation,\n  id: string,\n  access_hash: string,\n}\n\ntype MTDocument = {\n  _: 'document',\n  id: string,\n  access_hash: string,\n  mime_type: 'video/mp4' | 'text/x-log',\n  size: number,\n  dc_id: number,\n  version: number,\n}\n\n\n\n// const downloadFilePart = (\n//   location,\n//   chunkNum: number = 0,\n//   telegram\n// ) => {\n//   const args = {\n//     location,\n//     offset: CHUNK_SIZE * chunkNum,\n//     limit : CHUNK_SIZE,\n//   }\n//   return telegram(usedMethod, args)\n// }\n\nconst getOffset = (chunkNum: number = 0) => CHUNK_SIZE * chunkNum\n\nconst getArgs = (location: MTLocation, offset: number) => ({\n  location,\n  offset,\n  limit: CHUNK_SIZE,\n})\n\nconst getLocation = (doc: MTDocument): MTLocation => ({\n  _          : 'inputDocumentFileLocation',\n  id         : doc.id,\n  access_hash: doc.access_hash\n})\n\nconst downloadDocument =\n  (ctx: MTProto) =>\n    async(doc: MTDocument) => {\n      // console.dir(ctx, { colors: true })\n      const location = getLocation(doc)\n      const parts = Math.ceil(doc.size / CHUNK_SIZE)\n      const results = new Uint8Array(doc.size)\n      for (let i = 0; i < parts; i++) {\n        const offset = getOffset(i)\n        const args = getArgs(location, offset)\n        const response = await ctx.api.mtpInvokeApi(usedMethod, args)\n        //TODO mtpInvokeApi was removed!\n        results.set(response.bytes, offset)\n      }\n      return results\n    }\n\ndownloadDocument.pluginName = 'loadFile'\n\nexport default downloadDocument\n"]}