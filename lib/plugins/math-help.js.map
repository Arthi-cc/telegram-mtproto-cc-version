{"version":3,"sources":["../../src/plugins/math-help.js"],"names":["makePasswordHash","getRandomId","salt","password","passwordUTF8","decodeURIComponent","escape","buffer","ArrayBuffer","length","byteView","Uint8Array","len","i","charCodeAt"],"mappings":";;;;;QAuBgBA,gB,GAAAA,gB;QA6BAC,W,GAAAA,W;;AAlDhB;;AAEA;;;;;;;;;;;;;;;;;;;AAmBO,SAASD,gBAAT,CAA0BE,IAA1B,EAAuDC,QAAvD,EAAyE;AAC9E,MAAMC,eAAeC,mBAAmBC,OAAOH,QAAP,CAAnB,CAArB;AACA,MAAII,SAAS,IAAIC,WAAJ,CAAgBJ,aAAaK,MAA7B,CAAb;AACA,MAAMC,WAAW,IAAIC,UAAJ,CAAeJ,MAAf,CAAjB;AACA,MAAMK,MAAMR,aAAaK,MAAzB;AACA,OAAK,IAAII,IAAI,CAAb,EAAgBA,IAAID,GAApB,EAAyBC,GAAzB;AACEH,aAASG,CAAT,IAAcT,aAAaU,UAAb,CAAwBD,CAAxB,CAAd;AADF,GAGAN,SAAS,uBACP,uBACEL,IADF,EAEEQ,QAFF,CADO,EAKPR,IALO,CAAT;;AAQA,SAAO,yBAAeK,MAAf,CAAP;AACD;;AAGD;;;;;;;;;;;AASO,SAASN,WAAT,GAAyC;AAC9C,SAAO,CAAE,wBAAc,UAAd,CAAF,EAA6B,wBAAc,UAAd,CAA7B,CAAP;AACD","file":"math-help.js","sourcesContent":["//@flow\n\nimport { bufferConcat, sha256HashSync, nextRandomInt } from '../bin'\n\n/**\n * ### Make hash from user password string\n *\n * Used in methods `auth.checkPassword`, `account.getPasswordSettings`, `account.updatePasswordSettings` and some other\n *\n * **Usage**:\n *\n *     const makePasswordHash =\n *       require('telegram-mtproto').plugins.makePasswordHash\n *     const { current_salt } = await telegram('account.getPassword')\n *     const hash = makePasswordHash(current_salt, userPassword)\n *     const result = await telegram('auth.checkPassword', {\n *       password_hash: hash,\n *     })\n *\n * @param {(Uint8Array | number[])} salt\n * @param {string} password\n * @returns {number[]} bytes\n */\nexport function makePasswordHash(salt: Uint8Array | number[], password: string) {\n  const passwordUTF8 = decodeURIComponent(escape(password))\n  let buffer = new ArrayBuffer(passwordUTF8.length)\n  const byteView = new Uint8Array(buffer)\n  const len = passwordUTF8.length\n  for (let i = 0; i < len; i++)\n    byteView[i] = passwordUTF8.charCodeAt(i)\n\n  buffer = bufferConcat(\n    bufferConcat(\n      salt,\n      byteView,\n    ),\n    salt,\n  )\n\n  return sha256HashSync(buffer)\n}\n\n\n/**\n * ### Create new `random_id` value\n *\n * Useful for many methods, including `messages.sendMessage`, `messages.sendMedia`,\n * `messages.forwardMessage` etc.\n *\n * @export\n * @returns {number[]}\n */\nexport function getRandomId(): [number, number] {\n  return [ nextRandomInt(0xFFFFFFFF), nextRandomInt(0xFFFFFFFF) ]\n}\n"]}