export function failSafeStringify(value) {
  try {
    return JSON.stringify(value);
  } catch (error) {
    return String(value);
  }
}

var sanctuaryType = (() => {
  var version = function versionRounding(version) {
    if (version.length < 2) return version;
    var splitted = version.split(/\./);
    var major = splitted[0] || '';
    var minor = splitted[1] || '';
    return major === '0' ? `0.${minor}` : major;
  }("0.6.2");

  return function getType(objectName) {
    return ["apropos", '/', objectName, '@', version].join('');
  };
})();

function addSanctuaryType(name, proto) {
  Object.defineProperty( /*::( */proto /*::, {}) */, '@@type', {
    value: sanctuaryType(name)
  });
}

var fantasyLandMethods = ['map', 'chain', 'equals', 'ap', 'of'].map(name => [name, `fantasy-land/${name}`]);

function checkAddFL([typeName, fullName], klass) {
  var classStatic = /*::( */klass; /*::, {}) */
  if (typeof classStatic[typeName] === 'function') {
    var fn = classStatic[typeName];
    Object.defineProperty( /*::( */klass /*::, {}) */, fullName, {
      value: fn,
      enumerable: false,
      writable: true,
      configurable: true
    });
  }
  var proto = /*::( */klass.prototype; /*::, {}) */
  if (proto != null && typeof proto[typeName] === 'function') {
    var _fn = proto[typeName];
    Object.defineProperty( /*::( */proto /*::, {}) */, fullName, {
      value: _fn,
      enumerable: false,
      writable: true,
      configurable: true
    });
  }
}

export function addInterop(klass, name) {
  addSanctuaryType(name, klass);
  fantasyLandMethods.forEach(names => checkAddFL(names, klass));
}
//# sourceMappingURL=util.js.map