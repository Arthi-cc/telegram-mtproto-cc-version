{"version":3,"sources":["../src/crypto.js"],"names":["identity","has","both","isNode","isWebpack","blueDefer","immediate","convertToUint8Array","sha1HashSync","sha256HashSync","aesEncryptSync","aesDecryptSync","convertToByteArray","convertToArrayBuffer","pqPrimeFactorization","bytesModPow","convertIfArray","val","Array","isArray","hasWindow","window","webWorker","taskID","awaiting","webCrypto","isWebCrypto","useWebCrypto","digest","useSha1Crypto","useSha256Crypto","finalizeTask","result","deferred","resolve","crypto","msCrypto","subtle","webkitSubtle","isCryptoTask","workerEnable","Worker","initWorker","TmpWorker","tmpWorker","require","err","console","error","onmessage","e","data","info","onerror","stack","postMessage","performTaskWorker","task","params","embed","promise","sha1Hash","bytes","bytesTyped","name","then","sha256Hash","aesEncrypt","keyBytes","ivBytes","aesDecrypt","encryptedBytes","factorize","bytesSrc","modPow","x","y","m","CryptoWorker"],"mappings":"AACA,SAASA,QAAT,EAAmBC,GAAnB,EAAwBC,IAAxB;AACA,SAASC,MAAT,EAAiBC,SAAjB;;AAEA,OAAOC,SAAP;;AAEA,SAASC,SAAT;AACA,SAASC,mBAAT,EAA8BC,YAA9B,EAA4CC,cAA5C,EACEC,cADF,EACkBC,cADlB,EACkCC,kBADlC,EACsDC,oBADtD,EAEEC,oBAFF,EAEwBC,WAFxB,QAE2C,OAF3C;;AAIA,IAAMC,iBAAkBC,GAAD,IAASC,MAAMC,OAAN,CAAcF,GAAd,IAC5BV,oBAAoBU,GAApB,CAD4B,GAE5BA,GAFJ;;AAIA,IAAMG,YAAY,OAAOC,MAAP,KAAkB,WAApC;;AAEA,IAAIC,YAAY,CAACnB,MAAjB;AACA,IAAIoB,SAAS,CAAb;AACA,IAAMC,WAAsC,EAA5C;AACA,IAAMC,YAAYC,aAAlB;AACA,IAAMC,eAAeF,aAAa,CAAC,CAACA,UAAUG,MAA9C;AACA,IAAIC,gBAAgBF,YAApB;AACA,IAAIG,kBAAkBH,YAAtB;AACA,IAAMI,eAAe,CAACR,MAAD,EAAiBS,MAAjB,KAA4B;AAC/C,MAAMC,WAAWT,SAASD,MAAT,CAAjB;AACA,MAAIU,QAAJ,EAAc;AACZA,aAASC,OAAT,CAAiBF,MAAjB;AACA,WAAOR,SAASD,MAAT,CAAP;AACD;AACF,CAND;;AAQA,SAASG,WAAT,GAAuB;AACrB,MAAIvB,UAAU,CAACiB,SAAf,EAA0B,OAAO,KAAP;AAC1B;AACA,MAAIC,OAAOc,MAAP,KAAkB,KAAK,CAAvB,IAA4Bd,OAAOe,QAAP,KAAoB,KAAK,CAAzD,EACE,OAAO,KAAP;AACF;AACA,SAAQf,OAAOc,MAAP,KAAkBd,OAAOc,MAAP,CAAcE,MAAd,IAAwBhB,OAAOc,MAAP,CAAcG,YAAxD,CAAD;AACP;AACKjB,SAAOe,QAAP,IAAmBf,OAAOe,QAAP,CAAgBC,MAFxC;AAGD;;AAED,IAAME,eAAerC,KAAKD,IAAI,QAAJ,CAAL,EAAoBA,IAAI,QAAJ,CAApB,CAArB;;AAEA;AACA,IAAMuC,eAAe,CAACrC,MAAD,IAAWiB,SAAX,IAAwBC,OAAOoB,MAA/B,IAAyCrC,SAA9D;AACA,SAASsC,UAAT,GAAsB;AACpB,MAAIC,kBAAJ;AAAA,MAAeC,kBAAf;AACA,MAAI;AACF;AACAD,gBAAYE,OAAZ;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,YAAQC,KAAR,CAAc,oBAAd,EAAoCF,GAApC;AACAxB,gBAAY,KAAZ;AACA;AACD;AACD,MAAI;AACFsB,gBAAY,IAAID,SAAJ,EAAZ;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZC,YAAQC,KAAR,CAAc,oBAAd,EAAoCF,GAApC;AACAxB,gBAAY,KAAZ;AACA;AACD;;AAED;AACA;AACA;AACAsB,YAAUK,SAAV,GAAsBC,KAAK;AACzB,QAAIA,EAAEC,IAAF,KAAW,OAAf,EAAwB;AACtBJ,cAAQK,IAAR,CAAa,UAAb;AACD,KAFD,MAEO,IAAI,CAACb,aAAaW,EAAEC,IAAf,CAAL,EAA2B;AAChCJ,cAAQK,IAAR,CAAa,iBAAb,EAAgCF,CAAhC,EAAmCA,EAAEC,IAArC;AACA,aAAOD,CAAP;AACD,KAHM,MAIL,OAAO5B,YACHS,aAAamB,EAAEC,IAAF,CAAO5B,MAApB,EAA4B2B,EAAEC,IAAF,CAAOnB,MAAnC,CADG,GAEHV,YAAYsB,SAFhB;AAGH,GAVD;;AAYAA,YAAUS,OAAV,GAAoB,UAASL,KAAT,EAAgB;AAClCD,YAAQC,KAAR,CAAc,UAAd,EAA0BA,KAA1B,EAAiCA,MAAMM,KAAvC;AACAhC,gBAAY,KAAZ;AACD,GAHD;AAIAsB,YAAUW,WAAV,CAAsB,GAAtB;AACAjC,cAAYsB,SAAZ;AACD;AACD,IAAIJ,YAAJ,EACEE;;AAEF,SAASc,iBAAT,CAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgD;AAC9C;AACA,MAAM1B,WAAW5B,WAAjB;;AAEAmB,WAASD,MAAT,IAAmBU,QAAnB;;AAEAyB,SAAOD,IAAP,GAAcA,IAAd;AACAC,SAAOnC,MAAP,GAAgBA,MAAhB,CACC,CAACoC,SAASrC,SAAV,EAAqBiC,WAArB,CAAiCG,MAAjC;;AAEDnC;;AAEA,SAAOU,SAAS2B,OAAhB;AACD;;AAED,IAAMC,WAAYC,KAAD,IAAc;AAC7B,MAAIjC,aAAJ,EAAmB;AACjB;AACA;AACA,QAAMkC,aAAa/C,eAAe8C,KAAf,CAAnB;AACA;AACA,WAAOrC,UAAUG,MAAV,CAAiB,EAAEoC,MAAM,OAAR,EAAjB,EAAoCD,UAApC,EAAgDE,IAAhD,CAAqDrC;AAC1D;AACAA,UAFK,EAEGsB,KAAK;AACbH,cAAQC,KAAR,CAAc,qBAAd,EAAqCE,CAArC;AACArB,sBAAgB,KAAhB;AACA,aAAOrB,aAAasD,KAAb,CAAP;AACD,KANM,CAAP;AAOD;AACD,SAAOxD,UAAUE,YAAV,EAAwBsD,KAAxB,CAAP;AACD,CAfD;;AAiBA,IAAMI,aAAcJ,KAAD,IAAc;AAC/B,MAAIhC,eAAJ,EAAqB;AACnB,QAAMiC,aAAa/C,eAAe8C,KAAf,CAAnB;AACA;AACA,WAAOrC,UAAUG,MAAV,CAAiB,EAAEoC,MAAM,SAAR,EAAjB,EAAsCD,UAAtC,EACJE,IADI,CACCjE;AACJ;AAFG,MAGDkD,KAAK;AACLH,cAAQC,KAAR,CAAc,qBAAd,EAAqCE,CAArC;AACApB,wBAAkB,KAAlB;AACA,aAAOrB,eAAeqD,KAAf,CAAP;AACD,KAPE,CAAP;AAQD;AACD,SAAOxD,UAAUG,cAAV,EAA0BqD,KAA1B,CAAP;AACD,CAdD;;AAgBA,IAAMK,aAAa,CAACL,KAAD,EAAWM,QAAX,EAAwBC,OAAxB,KACjB/D,UAAU,MAAMO,qBAAqBH,eAAeoD,KAAf,EAAsBM,QAAtB,EAAgCC,OAAhC,CAArB,CAAhB,CADF;;AAGA,IAAMC,aAAa,CAACC,cAAD,EAAoBH,QAApB,EAAiCC,OAAjC,KACjB/D,UAAU,MAAMO,qBACdF,eAAe4D,cAAf,EAA+BH,QAA/B,EAAyCC,OAAzC,CADc,CAAhB,CADF;;AAIA,SAASG,SAAT,CAAmBC,QAAnB,EAAoD;AAClD,MAAMX,QAAQlD,mBAAmB6D,QAAnB,CAAd;AACA,SAAOnD,YACHkC,kBAAkB,WAAlB,EAA+B,EAAEM,KAAF,EAA/B,CADG,GAEHxD,UAAUQ,oBAAV,EAAgCgD,KAAhC,CAFJ;AAGD;;AAED,IAAMY,SAAS,CAACC,CAAD,EACCC,CADD,EAECC,CAFD,KAGbvD,YACIkC,kBAAkB,SAAlB,EAA6B;AAC7BmB,GAD6B;AAE7BC,GAF6B;AAG7BC;AAH6B,CAA7B,CADJ,GAMIvE,UAAUS,WAAV,EAAuB4D,CAAvB,EAA0BC,CAA1B,EAA6BC,CAA7B,CATN;;AAWA,OAAO,IAAMC,eAAe;AAC1BjB,UAD0B;AAE1BK,YAF0B;AAG1BC,YAH0B;AAI1BG,YAJ0B;AAK1BE,WAL0B;AAM1BE;AAN0B,CAArB;;AASP,eAAeI,YAAf","file":"crypto.js","sourcesContent":["//@flow\nimport { identity, has, both } from 'ramda'\nimport { isNode, isWebpack } from 'Runtime'\n\nimport blueDefer from 'Util/defer'\nimport type { Defer } from 'Util/defer'\nimport { immediate } from 'mtproto-shared'\nimport { convertToUint8Array, sha1HashSync, sha256HashSync,\n  aesEncryptSync, aesDecryptSync, convertToByteArray, convertToArrayBuffer,\n  pqPrimeFactorization, bytesModPow } from './bin'\n\nconst convertIfArray = (val) => Array.isArray(val)\n  ? convertToUint8Array(val)\n  : val\n\nconst hasWindow = typeof window !== 'undefined'\n\nlet webWorker = !isNode\nlet taskID = 0\nconst awaiting: { [task: number]: Defer } = {}\nconst webCrypto = isWebCrypto()\nconst useWebCrypto = webCrypto && !!webCrypto.digest\nlet useSha1Crypto = useWebCrypto\nlet useSha256Crypto = useWebCrypto\nconst finalizeTask = (taskID: number, result) => {\n  const deferred = awaiting[taskID]\n  if (deferred) {\n    deferred.resolve(result)\n    delete awaiting[taskID]\n  }\n}\n\nfunction isWebCrypto() {\n  if (isNode || !hasWindow) return false\n  //eslint-disable-next-line\n  if (window.crypto === void 0 && window.msCrypto === void 0)\n    return false\n  //eslint-disable-next-line\n  return (window.crypto && (window.crypto.subtle || window.crypto.webkitSubtle))\n  //eslint-disable-next-line\n    || window.msCrypto && window.msCrypto.subtle\n}\n\nconst isCryptoTask = both(has('taskID'), has('result'))\n\n//eslint-disable-next-line\nconst workerEnable = !isNode && hasWindow && window.Worker && isWebpack\nfunction initWorker() {\n  let TmpWorker, tmpWorker\n  try {\n    //$FlowIssue\n    TmpWorker = require('worker-loader?inline&fallback=false!./worker.js')\n  } catch (err) {\n    console.error('webWorker disabled', err)\n    webWorker = false\n    return\n  }\n  try {\n    tmpWorker = new TmpWorker()\n  } catch (err) {\n    console.error('webWorker disabled', err)\n    webWorker = false\n    return\n  }\n\n  // tmpWorker.onmessage = function(event) {\n  //   console.info('CW tmpWorker.onmessage', event && event.data)\n  // }\n  tmpWorker.onmessage = e => {\n    if (e.data === 'ready') {\n      console.info('CW ready')\n    } else if (!isCryptoTask(e.data)) {\n      console.info('Not crypto task', e, e.data)\n      return e\n    } else\n      return webWorker\n        ? finalizeTask(e.data.taskID, e.data.result)\n        : webWorker = tmpWorker\n  }\n\n  tmpWorker.onerror = function(error) {\n    console.error('CW error', error, error.stack)\n    webWorker = false\n  }\n  tmpWorker.postMessage('b')\n  webWorker = tmpWorker\n}\nif (workerEnable)\n  initWorker()\n\nfunction performTaskWorker(task, params, embed) {\n  // console.log(rework_d_T(), 'CW start', task)\n  const deferred = blueDefer()\n\n  awaiting[taskID] = deferred\n\n  params.task = task\n  params.taskID = taskID\n  ;(embed || webWorker).postMessage(params)\n\n  taskID++\n\n  return deferred.promise\n}\n\nconst sha1Hash = (bytes: *) => {\n  if (useSha1Crypto) {\n    // We don't use buffer since typedArray.subarray(...).buffer gives the whole buffer and not sliced one.\n    // webCrypto.digest supports typed array\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-1' }, bytesTyped).then(digest =>\n      // console.log(rework_d_T(), 'Native sha1 done')\n      digest, e => {\n      console.error('Crypto digest error', e)\n      useSha1Crypto = false\n      return sha1HashSync(bytes)\n    })\n  }\n  return immediate(sha1HashSync, bytes)\n}\n\nconst sha256Hash = (bytes: *) => {\n  if (useSha256Crypto) {\n    const bytesTyped = convertIfArray(bytes)\n    // console.log(rework_d_T(), 'Native sha1 start')\n    return webCrypto.digest({ name: 'SHA-256' }, bytesTyped)\n      .then(identity\n        // console.log(rework_d_T(), 'Native sha1 done')\n        , e => {\n          console.error('Crypto digest error', e)\n          useSha256Crypto = false\n          return sha256HashSync(bytes)\n        })\n  }\n  return immediate(sha256HashSync, bytes)\n}\n\nconst aesEncrypt = (bytes: *, keyBytes: *, ivBytes: *): Promise<ArrayBuffer> =>\n  immediate(() => convertToArrayBuffer(aesEncryptSync(bytes, keyBytes, ivBytes)))\n\nconst aesDecrypt = (encryptedBytes: *, keyBytes: *, ivBytes: *): Promise<ArrayBuffer> =>\n  immediate(() => convertToArrayBuffer(\n    aesDecryptSync(encryptedBytes, keyBytes, ivBytes)))\n\nfunction factorize(bytesSrc: number[] | Uint8Array) {\n  const bytes = convertToByteArray(bytesSrc)\n  return webWorker\n    ? performTaskWorker('factorize', { bytes })\n    : immediate(pqPrimeFactorization, bytes)\n}\n\nconst modPow = (x: number[] | Uint8Array,\n                y: number[] | Uint8Array,\n                m: number[] | Uint8Array): Promise<number[]> =>\n  webWorker\n    ? performTaskWorker('mod-pow', {\n      x,\n      y,\n      m\n    })\n    : immediate(bytesModPow, x, y, m)\n\nexport const CryptoWorker = {\n  sha1Hash,\n  sha256Hash,\n  aesEncrypt,\n  aesDecrypt,\n  factorize,\n  modPow\n}\n\nexport default CryptoWorker\n"]}