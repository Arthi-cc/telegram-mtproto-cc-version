{"version":3,"sources":["../src/bin.js"],"names":["Rusha","CryptoJSlib","CryptoJS","inflate","random","eGCD_","greater","divide_","str2bigInt","equalsInt","isZero","bigInt2str","copy_","copyInt_","rightShift_","leftShift_","sub_","add_","powMod","bpe","one","rushaInstance","generateNonce","nonce","Array","i","nextRandomInt","bytesToString","bytes","ln","length","temp","String","fromCharCode","result","join","stringToChars","str","charCodeAt","strDecToHex","toLowerCase","bytesToHex","arr","push","toString","bytesFromHex","hexString","len","start","parseInt","charAt","substr","bytesCmp","bytes1","bytes2","bytesXor","bytesToWords","ArrayBuffer","Uint8Array","words","lib","WordArray","init","bytesFromWords","wordArray","sigBytes","bytesFromLeemonBigInt","bigInt","bytesToArrayBuffer","b","buffer","convertToArrayBuffer","byteLength","BYTES_PER_ELEMENT","convertToUint8Array","isArray","TypeError","convertToByteArray","bytesUint8","newBytes","bytesFromArrayBuffer","byteView","from","bufferConcat","buffer1","buffer2","set1","set2","l1","l2","tmp","set","dividerLem","longToInts","sLong","lemNum","div","rem","resL","longToBytes","reverse","lshift32","high","low","highNum","nLow","res","rshift32","num","intToUint","val","middle","uintToInt","sha1HashSync","hashBytes","rawDigest","sha1BytesSync","sha256HashSync","hashWords","SHA256","rsaEncrypt","publicKey","addPadding","N","modulus","E","exponent","X","encryptedBigInt","encryptedBytes","blockSize","zeroes","needPadding","padding","concat","aesEncryptSync","keyBytes","ivBytes","encryptedWords","AES","encrypt","iv","pad","NoPadding","mode","IGE","ciphertext","aesDecryptSync","decryptedWords","decrypt","gzipUncompress","maxValue","Math","floor","pqPrimeFactorization","pqBytes","minSize","ceil","hex","lWhat","pqPrimeLeemon","what","minLen","it","q","lim","a","c","g","z","x","y","j","P","Q","bytesModPow","m","xBigInt","yBigInt","mBigInt","resBigInt"],"mappings":"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","file":"bin.js","sourcesContent":["//@flow\n\nimport Rusha from 'rusha'\nimport * as CryptoJSlib from '@goodmind/node-cryptojs-aes'\nconst { CryptoJS } = CryptoJSlib\nimport { inflate } from 'pako/lib/inflate'\n\nimport random from './service/secure-random'\n\nimport type { PublicKeyExtended } from './service/main/index.h'\n\nimport { eGCD_, greater, divide_, str2bigInt, equalsInt,\n  isZero, bigInt2str, copy_, copyInt_, rightShift_,\n  leftShift_, sub_, add_, powMod, bpe, one } from './vendor/leemon'\n\n\nconst rushaInstance = new Rusha(1024 * 1024)\n\nexport type Bytes = number[]\n\nexport function generateNonce() {\n  const nonce = new Array(16)\n  for (let i = 0; i < 16; i++)\n    nonce[i] = nextRandomInt(0xFF)\n  return nonce\n}\n\n\nexport function bytesToString(bytes: Uint8Array) {\n  const ln = bytes.length\n  const temp = new Array(ln)\n  for (let i = 0; i < ln; ++i)\n    temp[i] = String.fromCharCode(bytes[i])\n  const result = temp.join('')\n  return result\n}\n\nexport function stringToChars(str: string) {\n  const ln = str.length\n  const result: Bytes = Array(ln)\n  for (let i = 0; i < ln; ++i)\n    result[i] = str.charCodeAt(i)\n  return result\n}\n\nexport const strDecToHex = (str: string) =>\n  bigInt2str(\n    str2bigInt(str, 10, 0), 16\n  ).toLowerCase()\n\nexport function bytesToHex(bytes: Bytes | Uint8Array = []) {\n  const arr = []\n  for (let i = 0; i < bytes.length; i++) {\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\n  }\n  return arr.join('')\n}\n\nexport function bytesFromHex(hexString: string): Bytes {\n  const len = hexString.length\n  let start = 0\n  const bytes = []\n\n  if (hexString.length % 2) {\n    bytes.push(parseInt(hexString.charAt(0), 16))\n    start++\n  }\n\n  for (let i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\n  }\n\n  return bytes\n}\n\nexport function bytesCmp(bytes1: Bytes | Uint8Array,\n                         bytes2: Bytes | Uint8Array) {\n  const len = bytes1.length\n  if (len !== bytes2.length) {\n    return false\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (bytes1[i] !== bytes2[i])\n      return false\n  }\n  return true\n}\n\nexport function bytesXor(bytes1: Bytes | Uint8Array, bytes2: Bytes | Uint8Array) {\n  const len = bytes1.length\n  const bytes = []\n\n  for (let i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i]\n  }\n\n  return bytes\n}\n\nexport function bytesToWords(bytes: Bytes | ArrayBuffer | Uint8Array) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  const len = bytes.length\n  const words = []\n  let i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << 24 - i % 4 * 8\n  }\n\n  return new CryptoJS.lib.WordArray.init(words, len)\n}\n\nexport function bytesFromWords(wordArray: *): Bytes {\n  const words = wordArray.words\n  const sigBytes = wordArray.sigBytes\n  const bytes = []\n\n  for (let i = 0; i < sigBytes; i++) {\n    bytes.push(words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)\n  }\n\n  return bytes\n}\n\n\nexport function bytesFromLeemonBigInt(bigInt: Bytes) {\n  const str = bigInt2str(bigInt, 16)\n  return bytesFromHex(str)\n}\n\nexport function bytesToArrayBuffer(b: *) {\n  return (new Uint8Array(b)).buffer\n}\n\nexport function convertToArrayBuffer(bytes: Buffer | ArrayBuffer | Uint8Array | Bytes): ArrayBuffer {\n  // Be careful with converting subarrays!!\n  if (bytes instanceof ArrayBuffer) {\n    return bytes\n  }\n  if (bytes instanceof Uint8Array) {\n    //$FlowIssue\n    if (bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT)\n      return bytes.buffer\n  }\n  return bytesToArrayBuffer(bytes)\n}\n\nexport function convertToUint8Array(bytes: Bytes | Uint8Array | ArrayBuffer): Uint8Array {\n  if (bytes instanceof Uint8Array)\n    return bytes\n  if (Array.isArray(bytes))\n    return new Uint8Array(bytes)\n  if (bytes instanceof ArrayBuffer)\n    return new Uint8Array(bytes)\n  throw new TypeError(`convertToUint8Array mismatch! ${bytes}`)\n}\n\nexport function convertToByteArray(bytes: Bytes | Uint8Array): number[] {\n  if (Array.isArray(bytes))\n    return bytes\n  const bytesUint8 = convertToUint8Array(bytes)\n  const ln = bytesUint8.length\n  if (ln === 0) {\n    return []\n  }\n  const newBytes: number[] = new Array(ln)\n  newBytes[0] = 0\n  for (let i = 0; i < ln; i++)\n    newBytes[i] = bytesUint8[i]\n  return newBytes\n}\n\nexport function bytesFromArrayBuffer(buffer: ArrayBuffer) {\n  const byteView = new Uint8Array(buffer)\n  const bytes = Array.from( byteView )\n  return bytes\n}\n\nexport function bufferConcat(buffer1: ArrayBuffer | Uint8Array | Bytes, buffer2: ArrayBuffer | Uint8Array | Bytes) {\n  let set1, set2, l1, l2\n  if (buffer1 instanceof ArrayBuffer) {\n    l1 = buffer1.byteLength\n    set1 = new Uint8Array(buffer1)\n  } else {\n    l1 = buffer1.length\n    set1 = buffer1\n  }\n\n  if (buffer2 instanceof ArrayBuffer) {\n    l2 = buffer2.byteLength\n    set2 = new Uint8Array(buffer2)\n  } else {\n    l2 = buffer2.length\n    set2 = buffer2\n  }\n\n  const tmp = new Uint8Array(l1 + l2)\n  tmp.set(set1, 0)\n  tmp.set(set2, l1)\n\n  return tmp.buffer\n}\n\n// const dividerBig = bigint(0x100000000)\nconst dividerLem = str2bigInt('100000000', 16, 4)\n\n// const printTimers = (timeL, timeB, a, b, n) => setTimeout(\n//   () => console.log(`Timer L ${timeL} B ${timeB}`, ...a, ...b, n || ''),\n//   100)\n\nexport function longToInts(sLong: string) {\n  const lemNum = str2bigInt(sLong, 10, 6)\n  const div = new Array(lemNum.length)\n  const rem = new Array(lemNum.length)\n  divide_(lemNum, dividerLem, div, rem)\n  const resL = [\n    //$FlowIssue\n    ~~bigInt2str(div, 10),\n    //$FlowIssue\n    ~~bigInt2str(rem, 10)\n  ]\n  return resL\n}\n\nexport function longToBytes(sLong: string) {\n  return bytesFromWords({ words: longToInts(sLong), sigBytes: 8 }).reverse()\n}\n\nexport function lshift32(high: number, low: number) {\n  const highNum = str2bigInt(high.toString(), 10, 6)\n  const nLow = str2bigInt(low.toString(), 10, 6)\n  leftShift_(highNum, 32)\n\n  add_(highNum, nLow)\n  const res = bigInt2str(highNum, 10)\n  return res\n}\n\nexport const rshift32 = (str: string) => {\n  const num = str2bigInt(str, 10, 6)\n  rightShift_(num, 32)\n  return bigInt2str(num, 10)\n}\n\nexport function intToUint(val: string) {\n  //$FlowIssue\n  let result = ~~val\n  if (result < 0)\n    result = result + 0x100000000\n  return result\n}\n\nconst middle = 0x100000000 / 2 - 1\n\nexport function uintToInt(val: number): number {\n  if (val > middle)\n    val = val - 0x100000000\n  return val\n}\n\nexport function sha1HashSync(bytes: Bytes | ArrayBuffer | Uint8Array): ArrayBuffer {\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\n  const hashBytes = rushaInstance.rawDigest(bytes).buffer\n  // console.log(dT(), 'SHA-1 hash finish')\n\n  return hashBytes\n}\n\nexport function sha1BytesSync(bytes: Bytes | ArrayBuffer | Uint8Array) {\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\n}\n\nexport function sha256HashSync(bytes: Bytes | ArrayBuffer) {\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n  const hashWords = CryptoJS.SHA256(bytesToWords(bytes))\n  // console.log(dT(), 'SHA-2 hash finish')\n\n  const hashBytes = bytesFromWords(hashWords)\n\n  return hashBytes\n}\n\nexport function rsaEncrypt(publicKey: PublicKeyExtended, bytes: Bytes) {\n  const newBytes: number[] = addPadding(bytes, 255)\n\n  const N = str2bigInt(publicKey.modulus, 16, 256)\n  const E = str2bigInt(publicKey.exponent, 16, 256)\n  const X = str2bigInt(bytesToHex(newBytes), 16, 256)\n  const encryptedBigInt = powMod(X, E, N),\n        encryptedBytes = bytesFromHex(bigInt2str(encryptedBigInt, 16))\n\n  return encryptedBytes\n}\n\ninterface AddPadding {\n  (bytes: Bytes, blockSize?: number, zeroes?: boolean): Bytes,\n  (bytes: ArrayBuffer, blockSize?: number, zeroes?: boolean): ArrayBuffer,\n}\n\nconst addPadding: AddPadding = (\n  bytes,\n  blockSize: number = 16,\n  zeroes: boolean = false) => {\n  let len\n\n  if (bytes instanceof ArrayBuffer) {\n    len = bytes.byteLength\n  } else {\n    len = bytes.length\n  }\n\n  let result = bytes\n\n  const needPadding = blockSize - len % blockSize\n  if (needPadding > 0 && needPadding < blockSize) {\n    const padding = new Array(needPadding)\n    if (zeroes) {\n      for (let i = 0; i < needPadding; i++)\n        padding[i] = 0\n    } else\n      random(padding)\n    if (bytes instanceof ArrayBuffer) {\n      result = bufferConcat(bytes, padding)\n    } else\n      result = bytes.concat(padding)\n  }\n\n  return result\n}\n\nexport function aesEncryptSync(bytes: Bytes, keyBytes: Bytes, ivBytes: Bytes) {\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)aesEncryptSync\n\n  const newBytes = addPadding(bytes)\n  const encryptedWords = CryptoJS.AES.encrypt(bytesToWords(newBytes), bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  }).ciphertext\n\n  const encryptedBytes = bytesFromWords(encryptedWords)\n  // console.log(dT(), 'AES encrypt finish')\n\n  return encryptedBytes\n}\n\nexport function aesDecryptSync(encryptedBytes: Bytes | Uint8Array, keyBytes: Bytes, ivBytes: Bytes) {\n\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\n  const decryptedWords = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(encryptedBytes) }, bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  })\n\n  const bytes = bytesFromWords(decryptedWords)\n  // console.log(dT(), 'AES decrypt finish')\n\n  return bytes\n}\n\nexport function gzipUncompress(bytes: Uint8Array): Uint8Array {\n  // console.log('Gzip uncompress start')\n  const result = inflate(bytes)\n  // console.log('Gzip uncompress finish')\n  return result\n}\n\nexport function nextRandomInt(maxValue: number) {\n  return Math.floor(Math.random() * maxValue)\n}\n\n\nexport function pqPrimeFactorization(pqBytes: Bytes) {\n  const minSize = Math.ceil(64 / bpe) + 1\n\n  // const what = new BigInteger(pqBytes)\n  const hex = bytesToHex(pqBytes)\n  const lWhat = str2bigInt(hex, 16, minSize)\n  const result = pqPrimeLeemon(lWhat)\n  return result\n}\n\n\nexport function pqPrimeLeemon(what: Bytes) {\n  const minBits = 64\n  const minLen = Math.ceil(minBits / bpe) + 1\n  let it = 0\n  let q, lim\n  const a = new Array(minLen)\n  const b = new Array(minLen)\n  const c = new Array(minLen)\n  const g = new Array(minLen)\n  const z = new Array(minLen)\n  const x = new Array(minLen)\n  const y = new Array(minLen)\n\n  for (let i = 0; i < 3; i++) {\n    q = (nextRandomInt(128) & 15) + 17\n    copyInt_(x, nextRandomInt(1000000000) + 1)\n    copy_(y, x)\n    lim = 1 << i + 18\n\n    for (let j = 1; j < lim; j++) {\n      ++it\n      copy_(a, x)\n      copy_(b, x)\n      copyInt_(c, q)\n\n      while (!isZero(b)) {\n        if (b[0] & 1) {\n          add_(c, a)\n          if (greater(c, what)) {\n            sub_(c, what)\n          }\n        }\n        add_(a, a)\n        if (greater(a, what)) {\n          sub_(a, what)\n        }\n        rightShift_(b, 1)\n      }\n\n      copy_(x, c)\n      if (greater(x, y)) {\n        copy_(z, x)\n        sub_(z, y)\n      } else {\n        copy_(z, y)\n        sub_(z, x)\n      }\n      eGCD_(z, what, g, a, b)\n      if (!equalsInt(g, 1)) {\n        break\n      }\n      if ((j & j - 1) === 0) {\n        copy_(y, x)\n      }\n    }\n    if (greater(g, one)) {\n      break\n    }\n  }\n\n  divide_(what, g, x, y)\n\n  const [P, Q] =\n    greater(g, x)\n      ? [x, g]\n      : [g, x]\n\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\n\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\n}\n\nexport function bytesModPow(x: Bytes | Uint8Array, y: Bytes | Uint8Array, m: Bytes | Uint8Array) {\n  const xBigInt = str2bigInt(bytesToHex(x), 16)\n  const yBigInt = str2bigInt(bytesToHex(y), 16)\n  const mBigInt = str2bigInt(bytesToHex(m), 16)\n  const resBigInt = powMod(xBigInt, yBigInt, mBigInt)\n\n  return bytesFromHex(bigInt2str(resBigInt, 16))\n}\n\n"]}