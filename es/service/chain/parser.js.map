{"version":3,"sources":["../../../src/service/chain/parser.js"],"names":["readResponse","getDataWithPad","readHash","parsedResponse","Deserialization","NetMessage","convertToUint8Array","responseBuffer","uid","dc","authKeyID","authKey","thisSessionID","prevSessionID","getMsgById","msgKey","encryptedData","reader","response","authKeyStored","dataWithPadding","hashData","seqNo","messageID","buffer","sessionID","mtproto","currentSession","prevSession","getter","parser"],"mappings":";;AAEA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,QAAvC,EAAiDC,cAAjD,QAAuE,kBAAvE;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA;;AAMA,SAASC,mBAAT;;AAcA;AAAA,+BAAe,WAAsB;AACnCC,kBADmC;AAEnCC,OAFmC;AAGnCC,MAHmC;AAInCC,aAJmC;AAKnCC,WALmC;AAMnCC,iBANmC;AAOnCC,iBAPmC;AAQnCC;AARmC,GAAtB,EAcZ;;AAED,QAAM,EAAEC,MAAF,EAAUC,aAAV,KAA4BhB,aAAa;AAC7CiB,cAAe,IAAIb,eAAJ,CAAoBG,cAApB,EAAoC,EAApC,EAAwCC,GAAxC,CAD8B;AAE7CU,gBAAeX,cAF8B;AAG7CY,qBAAe,CAAC,GAAGT,SAAJ;AAH8B,KAAb,CAAlC;;AAMA,QAAMU,kBAAkB,MAAMnB,eAAe;AAC3CU,eAASL,oBAAoBK,OAApB,CADkC;AAE3CI,YAF2C;AAG3CC;AAH2C,KAAf,CAA9B;;AAMA,QAAM;AACJK,cADI;AAEJC,WAFI;AAGJC,eAHI;AAIJC,YAJI;AAKJC;AALI,QAMFvB,SAAS;AACXe,cAAgB,IAAIb,eAAJ,CAAoBgB,eAApB,EAAqC,EAAEM,SAAS,IAAX,EAArC,EAAwDlB,GAAxD,CADL;AAEXmB,sBAAgBf,aAFL;AAGXgB,mBAAgBf,aAHL;AAIXO,qBAJW;AAKXZ;AALW,KAAT,CANJ;;AAkBA;AACA,QAAMU,WAAmB,MAAMf,eAAe;AAC5CkB,cAD4C;AAE5CN,YAF4C;AAG5CE,cAAQ,IAAIb,eAAJ,CAAoBoB,MAApB,EARkB;AAC1BE,iBAAS,IADiB;AAE1BG,gBAASf,UAFiB,EAQlB,EAAiDN,GAAjD;AAHoC,KAAf,CAA/B;;AAMA,WAAO;AACLU,cADK;AAELK,eAFK;AAGLE,eAHK;AAILH;AAJK,KAAP;AAMD,GA3DD;;AAAA,kBAA8BQ,MAA9B;AAAA;AAAA;AAAA","file":"parser.js","sourcesContent":["//@flow\n\nimport { readResponse, getDataWithPad, readHash, parsedResponse } from './parse-response'\nimport { Deserialization } from '../../tl'\nimport { NetMessage } from '../networker/net-message'\n\nimport {\n  type CryptoKey,\n  type DCNumber,\n  type UID,\n} from 'Newtype'\n\nimport { convertToUint8Array } from 'Bin'\n\nexport type ParserContext = {\n  responseBuffer: ArrayBuffer,\n  uid: UID,\n  dc: DCNumber,\n  authKeyID: CryptoKey,\n  authKey: CryptoKey,\n  // authKeyUint8: Uint8Array,\n  thisSessionID: number[],\n  prevSessionID: number[],\n  getMsgById: ({ req_msg_id: string }) => NetMessage,\n}\n\nexport default async function parser({\n  responseBuffer,\n  uid,\n  dc,\n  authKeyID,\n  authKey,\n  thisSessionID,\n  prevSessionID,\n  getMsgById,\n}: ParserContext): Promise<{\n  response: Object,\n  messageID: string,\n  sessionID: Uint8Array,\n  seqNo: number\n}> {\n\n  const { msgKey, encryptedData } = readResponse({\n    reader       : new Deserialization(responseBuffer, {}, uid),\n    response     : responseBuffer,\n    authKeyStored: [...authKeyID]\n  })\n\n  const dataWithPadding = await getDataWithPad({\n    authKey: convertToUint8Array(authKey),\n    msgKey,\n    encryptedData\n  })\n\n  const {\n    hashData,\n    seqNo,\n    messageID,\n    buffer,\n    sessionID,\n  } = readHash({\n    reader        : new Deserialization(dataWithPadding, { mtproto: true }, uid),\n    currentSession: thisSessionID,\n    prevSession   : prevSessionID,\n    dataWithPadding,\n    uid,\n  })\n\n  const deserializerOptions = {\n    mtproto: true,\n    getter : getMsgById\n  }\n  //$FlowIssue\n  const response: Object = await parsedResponse({\n    hashData,\n    msgKey,\n    reader: new Deserialization(buffer, deserializerOptions, uid)\n  })\n\n  return {\n    response,\n    messageID,\n    sessionID,\n    seqNo\n  }\n}\n"]}