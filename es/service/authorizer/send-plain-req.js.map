{"version":3,"sources":["../../../src/service/authorizer/send-plain-req.js"],"names":["reject","Fluture","of","send","ErrorBadResponse","ErrorNotFound","generateID","readLong","readInt","writeLong","writeLongP","writeInt","Config","Serialization","Deserialization","sendPlain","uid","url","sendData","onRes","plainRequest","buffer","onlySendPlainReq","chain","mapRej","onlySendPlainErr","req","onlySendPlain","requestBuffer","requestLength","byteLength","requestArray","Int32Array","header","headBox","writer","headerBuffer","getBuffer","headerArray","headerLength","resultBuffer","ArrayBuffer","resultArray","set","length","err","response","status","data","error","emit","deserializer","mtproto","ctx","typeBuffer","e","statusText"],"mappings":"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","file":"send-plain-req.js","sourcesContent":["//@flow\n\nimport { reject, Fluture, of } from 'fluture'\n\nimport { send } from '../../http'\nimport { ErrorBadResponse, ErrorNotFound } from '../../error'\nimport { generateID } from '../time-manager'\nimport { readLong, readInt } from '../../tl/reader'\nimport { writeLong, writeLongP, writeInt } from '../../tl/writer'\nimport Config from 'ConfigProvider'\nimport { Serialization, Deserialization } from '../../tl'\n\nexport default function sendPlain(\n  uid: string,\n  url: string\n) {\n  const sendData = send(url)\n  const onRes = plainRequest(uid, url)\n\n  return (buffer: ArrayBuffer) =>\n    onlySendPlainReq(uid, buffer)\n      .chain(sendData)\n      .mapRej(onlySendPlainErr)\n      .chain(onRes)\n}\n\nconst plainRequest = (uid, url) => req =>\n  onlySendPlain(uid, url, req)\n\nfunction onlySendPlainReq(uid: string, requestBuffer: ArrayBuffer) {\n  const requestLength = requestBuffer.byteLength,\n        requestArray = new Int32Array(requestBuffer)\n\n  const header = new Serialization({}, uid)\n  const headBox = header.writer\n\n  writeLongP(headBox, 0, 0, 'auth_key_id') // Auth key\n  writeLong(headBox, generateID(uid), 'msg_id') // Msg_id\n  writeInt(headBox, requestLength, 'request_length')\n\n  const headerBuffer: ArrayBuffer = headBox.getBuffer(),\n        headerArray = new Int32Array(headerBuffer)\n  const headerLength = headerBuffer.byteLength\n\n  const resultBuffer = new ArrayBuffer(headerLength + requestLength),\n        resultArray = new Int32Array(resultBuffer)\n\n  resultArray.set(headerArray)\n  resultArray.set(requestArray, headerArray.length)\n\n  return of(resultArray)\n}\n\nfunction onlySendPlainErr(err) {\n  if (err && err.response && err.response.status === 404)\n    return new ErrorNotFound(err)\n  return err\n}\n\nfunction onlySendPlain(\n  uid: string,\n  url: string,\n  req/*::: **/\n): Fluture<Deserialization, ErrorBadResponse> {\n  if (!req.data || !req.data.byteLength) {\n    const error = new ErrorBadResponse(url)\n    Config.emit(uid)('response-raw', error)\n    return reject(error)\n  }\n\n  let deserializer\n  try {\n    deserializer = new Deserialization(req.data, { mtproto: true }, uid)\n    const ctx = deserializer.typeBuffer\n    readLong(ctx, 'auth_key_id')\n    readLong(ctx, 'msg_id')\n    readInt(ctx, 'msg_len')\n  } catch (e) {\n    const error = new ErrorBadResponse(url, e)\n    Config.emit(uid)('response-raw', error)\n    return reject(error)\n  }\n  Config.emit(uid)('response-raw', {\n    data      : req.data,\n    status    : req.status,\n    statusText: req.statusText\n  })\n  return of(deserializer)\n}\n"]}