{"version":3,"sources":["../../src/service/invoke.js"],"names":["tap","Maybe","Just","tryP","of","ofF","Auth","API","dispatch","createThread","Config","ApiRequest","MaybeT","queryHomeDc","queryKeys","makeAuthRequest","netReq","toFuture","ERR","noDC","queryReqDc","chain","dc","withDC","uid","map","networker","wrapApiCall","msg","deferred","promise","mapRej","e","defer","reject","fold","x","newThread","toFutureR","chainRej","authRequest","thread","get","bimap","console","error","message","stack","authKey","authKeyID","serverSalt","auth","salt","invoke","method","params","options","dcID","REQUEST","NEW","timestamp","Date","now","requestID","deferFinal","Error","isNothing"],"mappings":"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","file":"invoke.js","sourcesContent":["//@flow\nimport { tap } from 'ramda'\n// import { Just } from 'folktale/maybe'\nimport { Maybe } from 'apropos'\nconst { Just } = Maybe\nimport { tryP, of as ofF } from 'fluture'\n\nimport Auth from './authorizer'\nimport { type LeftOptions } from './main/index.h'\n\nimport { type UID, type DCNumber } from 'Newtype'\nimport { API } from 'Action'\nimport { dispatch } from 'State'\nimport { createThread } from './networker'\n\nimport Config from 'ConfigProvider'\nimport ApiRequest from './main/request'\n\nimport { MaybeT } from 'Monad'\nimport {\n  queryHomeDc,\n  queryKeys,\n} from '../state/query'\n\nexport const makeAuthRequest = (netReq: ApiRequest) =>\n  MaybeT\n    .toFuture(ERR.noDC, queryReqDc(netReq))\n    .chain(dc => withDC(netReq.uid, dc))\n    .map(networker => networker.wrapApiCall(netReq))\n    .chain(msg => tryP(() => msg.deferred.promise))\n    .mapRej(tap(e => netReq.defer.reject(e)))\n    .chain(() => tryP(() => netReq.defer.promise))\n\nconst queryReqDc = (netReq: ApiRequest) =>\n  netReq.dc\n    .fold(\n      () => queryHomeDc(netReq.uid),\n      x => Just(x)\n    )\n\nfunction withDC(uid, dc) {\n  const doAuth = () => authRequest(uid, dc)\n  const newThread = () => createThread( dc, uid )\n  const getThread = () =>\n    Config\n      .thread\n      .get(uid, dc)\n      .fold(newThread, x => x)\n\n  return MaybeT\n    .toFutureR(queryKeys(uid, dc))\n    .chainRej(doAuth)\n    .map(getThread)\n}\n\nexport const authRequest = (uid: UID, dc: DCNumber) => Auth(uid, dc)\n  .bimap(\n    tap(e => console.error('Auth error', e.message, e.stack)),\n    ({\n      authKey, authKeyID, serverSalt, dc\n    }) => ({\n      auth: authKey,\n      salt: serverSalt,\n      // authKeyID,\n      dc\n    })\n  )\n\nexport default function invoke(\n  uid: UID,\n  method: string,\n  params: Object = {},\n  options: LeftOptions = {}\n) {\n  return ofF()\n    .map(() => {\n      const netReq = new ApiRequest(\n        { method, params },\n        { ...options },\n        uid,\n        //$off\n        options.dcID\n      )\n      dispatch(API.REQUEST.NEW({\n        netReq,\n        method,\n        params,\n        timestamp: Date.now(),\n      }, netReq.requestID), uid)\n      return netReq\n    })\n    .chain(netReq => tryP(() => netReq.deferFinal.promise))\n}\n\ndeclare class NoDCError extends Error {  }\ndeclare class NoThreadError extends Error {  }\ndeclare var typedError: <E, /*:: -*/F>(ErrorClass: Class<E>, x: F) => E\n\nconst ERR = {\n  noDC: () => /*:: typedError(NoDCError,*/\n    new Error('get Networker without dcID') /*::) */,\n  isNothing() { throw new Error(`UnsafeMaybeValue recieve nothing`) }\n}\n"]}