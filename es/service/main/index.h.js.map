{"version":3,"sources":["../../../src/service/main/index.h.js"],"names":["Fluture","MTError"],"mappings":"AAEA,OAA8B,kBAA9B;AACA;;;AAGA,SAASA,OAAT;AACA;AACA;AACA,SAASC,OAAT,QAAwB,aAAxB","file":"index.h.js","sourcesContent":["//@flow\n\nimport { type TLSchema } from '../../tl/index.h'\nimport { type AsyncStorage } from 'mtproto-shared'\nimport type { MTProto } from './index'\n\nimport { Fluture } from 'fluture'\nimport { type Emit, type On } from 'eventemitter2'\nimport { type Response } from 'Newtype'\nimport { MTError } from '../../error'\n\nexport type LeftOptions = {\n  dcID?: number,\n  createNetworker?: boolean,\n}\n\nexport type ApiConfig = {\n  invokeWithLayer?: number,\n  layer          ?: number,\n  initConnection ?: number,\n  api_id         ?: number,\n  device_model   ?: string,\n  system_version ?: string,\n  app_version    ?: string,\n  lang_code      ?: string\n}\n\nexport type PublicKey = {\n  modulus: string,\n  exponent: string\n}\n\nexport type PublicKeyExtended = PublicKey & {\n  fingerprint: string\n}\n\nexport type DC = {\n  id: number,\n  host: string,\n  port: number\n}\nexport type ServerConfig = {\n  dev?: boolean,\n  webogram?: boolean,\n  dcList?: Array<DC>\n}\n\nexport interface Plugin {\n  (ctx: MTProto): mixed,\n  pluginName: string,\n}\n\nexport type ConfigType = {\n  server?: ServerConfig,\n  api?: ApiConfig,\n  app?: {\n    storage?: AsyncStorage,\n    publicKeys?: PublicKey[],\n    plugins?: Plugin[],\n  },\n  schema?: TLSchema,\n  mtSchema?: TLSchema\n}\n\nexport type StrictConfig = {\n  server: ServerConfig,\n  api: ApiConfig,\n  app: {\n    storage: AsyncStorage,\n    publicKeys: PublicKey[],\n    plugins: Plugin[],\n  },\n  schema: TLSchema,\n  mtSchema: TLSchema,\n}\n\nexport interface ApiManagerInstance {\n  (method: string): Promise<any>,\n  (method: string, params: Object): Promise<any>,\n  (method: string, params: Object, options: LeftOptions): Promise<any>,\n  future(method: string, params?: Object): Fluture<Response, MTError>,\n  storage: AsyncStorage,\n  on: On,\n  emit: Emit,\n  bus: *,\n}\n"]}