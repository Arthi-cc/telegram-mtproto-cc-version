{"version":3,"sources":["../../src/plugins/long-poll.js"],"names":["Bluebird","encaseP2","cache","tsNow","Logger","log","Config","longPollRequest","thread","maxWait","wrapMtpCall","max_delay","wait_after","max_wait","requestOpts","futureRequest","LongPoll","constructor","pendingTime","Date","now","requestTime","alreadyWaitPending","pending","currentRequest","map","x","checkLongPoll","promise","setPendingTime","request","writePollTime","allowLongPoll","sendLongPool","halt","get","uid","dcID","resolve","result","noResponse","longPoll","notContentRelated"],"mappings":";;AAEA,OAAOA,QAAP;AACA,SAASC,QAAT,EAAmBC,KAAnB;;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AACA;;AAEA,OAAOC,MAAP;AACA,IAAMC,MAAMD,MAAO,WAAnB;AACA,OAAOE,MAAP;;AAGA,SAASC,eAAT,CAAyBC,MAAzB,EAAkDC,OAAlD,EAAmE;AACjE,SAAOD,OAAOE,WAAP,CAAmB,WAAnB,EAAgC;AACrCC,eAAY,CADyB;AAErCC,gBAAY,GAFyB;AAGrCC,cAAYJ;AAHyB,GAAhC,EAIJK,WAJI,CAAP;AAKD;;AAED,IAAMC,gBAAgB,CAACP,MAAD,EAASC,OAAT,KAAqBR,SACzCM,eADyC,EACxBC,MADwB,EAChBC,OADgB,CAA3C;;AAIA;;;;;;AAMA,eAAe,MAAMO,QAAN,CAAe;AAQ5BC,cAAYT,MAAZ,EAAqC;AAAA,SAJrCC,OAIqC,GAJ3B,IAI2B;AAAA,SAHrCS,WAGqC,GAHvBC,KAAKC,GAAL,EAGuB;AAAA,SAFrCC,WAEqC,GAFvBF,KAAKC,GAAL,EAEuB;AAAA,SADrCE,kBACqC,GADP,KACO;;AACnC,SAAKd,MAAL,GAAcA,MAAd;AACA;AACA;AACA;AACA;AACA;AACA;AAED;AACD,MAAIe,OAAJ,GAA4B;AAC1B,QAAI,CAAC,KAAKC,cAAV,EACE,KAAKA,cAAL,GAAsBtB,MAAMa,cAAc,KAAKP,MAAnB,EAA2B,KAAKC,OAAhC,EACzBgB,GADyB,CACrBC,KAAK;AACR,aAAO,KAAKF,cAAZ;AACA,WAAKhB,MAAL,CAAYmB,aAAZ;AACA,WAAKJ,OAAL;AACD,KALyB,CAAN,CAAtB;AAMF,WAAO,KAAKC,cAAL,CAAoBI,OAApB,EAAP;AACD;;AAEDC,mBAAiB;AACf,QAAMT,MAAMjB,OAAZ;AACA,SAAKkB,WAAL,GAAmBD,GAAnB;AACA,SAAKF,WAAL,GAAmBE,MAAM,KAAKX,OAA9B;AACD;;AAEKqB,SAAN,GAAgB;AAAA;;AAAA;AACd,YAAM,MAAKP,OAAX;AADc;AAEf;;AAEDQ,kBAAgB;AACd,SAAKV,WAAL,GAAmBlB,OAAnB;AACD;;AAED6B,kBAAgB;AACd,WAAO,IAAP;AACA;AACA;AACA;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMC,cAAN,GAAmC;AAAA;;AAAA;AACjC;AACA,UAAI3B,OAAO4B,IAAP,CAAYC,GAAZ,CAAgB,OAAK3B,MAAL,CAAY4B,GAA5B,EAAiC,OAAK5B,MAAL,CAAY6B,IAA7C,CAAJ,EAAwD,OAAOrC,SAASsC,OAAT,CAAiB,KAAjB,CAAP;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMC,SAAS,MAAM,OAAKhB,OAA1B;AACA,aAAOgB,MAAP;AAfiC;AAgBlC;AAzE2B;;AA4E9B,IAAMzB,cAAc;AAClB0B,cAAmB,IADD;AAElBC,YAAmB,IAFD;AAGlBC,qBAAmB;AAHD,CAApB","file":"long-poll.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\nimport { encaseP2, cache } from 'fluture'\n\nimport { tsNow } from '../service/time-manager'\n/*:: import { NetworkerThread } from '../service/networker' */\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`long-poll`\nimport Config from 'ConfigProvider'\n\n\nfunction longPollRequest(thread: NetworkerThread, maxWait: number) {\n  return thread.wrapMtpCall('http_wait', {\n    max_delay : 0,\n    wait_after: 200,\n    max_wait  : maxWait\n  }, requestOpts)\n}\n\nconst futureRequest = (thread, maxWait) => encaseP2(\n  longPollRequest, thread, maxWait\n)\n\n/*::\ndeclare var fakeThread: NetworkerThread\nconst future = futureRequest(fakeThread, 25e3)\ntype FutureRequest = typeof future\n*/\n\nexport default class LongPoll {\n  thread: NetworkerThread\n  currentRequest: FutureRequest | void\n  futureRequest: FutureRequest\n  maxWait = 15e3\n  pendingTime = Date.now()\n  requestTime = Date.now()\n  alreadyWaitPending: boolean = false\n  constructor(thread: NetworkerThread) {\n    this.thread = thread\n    // if (inited) {\n    //   log('Networker')(thread)\n    //   //$ FlowIssue\n    //   this.request = () => Bluebird.resolve()\n    // }\n    // inited = true\n\n  }\n  get pending(): Promise<any> {\n    if (!this.currentRequest)\n      this.currentRequest = cache(futureRequest(this.thread, this.maxWait)\n        .map(x => {\n          delete this.currentRequest\n          this.thread.checkLongPoll()\n          this.pending\n        }))\n    return this.currentRequest.promise()\n  }\n\n  setPendingTime() {\n    const now = tsNow()\n    this.requestTime = now\n    this.pendingTime = now + this.maxWait\n  }\n\n  async request() {\n    await this.pending\n  }\n\n  writePollTime() {\n    this.requestTime = tsNow()\n  }\n\n  allowLongPoll() {\n    return true\n    // const result = this.requestTime + WAIT < tsNow()\n    // log`allow long poll`(result)\n    // return result\n  }\n  // async sending() {\n  //   this.alreadyWaitPending = true\n  //   await waitToTime(this)\n  //   this.alreadyWaitPending = false\n  //   this.setPendingTime()\n  //   const result = await this.request()\n  //   return result\n  // }\n  async sendLongPool(): Promise<any> {\n    //TODO add base dc check\n    if (Config.halt.get(this.thread.uid, this.thread.dcID)) return Bluebird.resolve(false)\n    // return cache(futureRequest(this.thread, this.maxWait)\n    //   .map(x => {\n    //     log`poll response`(x)\n    //     // delete this.currentRequest\n    //     this.thread.checkLongPoll()\n    //     // this.pending\n    //   })).promise()\n    // if (this.allowLongPoll()) {\n    //   this.pending = this.sending()\n    // }\n\n    const result = await this.pending\n    return result\n  }\n}\n\nconst requestOpts = {\n  noResponse       : true,\n  longPoll         : true,\n  notContentRelated: true\n}\n"]}