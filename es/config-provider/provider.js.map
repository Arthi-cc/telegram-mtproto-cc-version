{"version":3,"sources":["../../src/config-provider/provider.js"],"names":["Fluture","ProviderRegistryError","ScopedEmitter","NetworkerThread","Layout","L1Cache","StorageAdapter","provider","getConfig","uid","config","registerInstance","fullConfig","keyManager","keyManagerNotInited","storageAdapter","storage","timerOffset","seq","session","fastCache","thread","authRequest","halt","publicKeys","lastMessageID","Error"],"mappings":"AACA,SAASA,OAAT;AACA;AACA;;AAEA,SAASC,qBAAT,QAAsC,UAAtC;AACA,OAA8B,eAA9B;AACA;AACA,OAIO,yBAJP;AAKA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;AAEA,IAAMC,WAAqB,EAA3B;;AAEA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAgC;AACrC,MAAMC,SAASH,SAASE,GAAT,CAAf;AACA,MAAIC,UAAU,IAAd,EAAoB,MAAM,IAAIT,qBAAJ,CAA0BQ,GAA1B,CAAN;AACpB,SAAOC,MAAP;AACD;;AAED,OAAO,SAASC,gBAAT,CAA0BD,MAA1B,EAAuE;AAC5E,MAAME,+BAEDF,MAFC;AAGJG,gBAAgBC,mBAHZ;AAIJ;AACAC,oBAAgB,IAAIT,cAAJ,CAAmBI,OAAOM,OAA1B,CALZ;AAMJC,iBAAgB,CANZ;AAOJC,SAAgB,EAPZ;AAQJC,aAAgB,EARZ;AASJC,eAAgB,EATZ;AAUJC,YAAgB,EAVZ;AAWJC,iBAAgB,EAXZ;AAYJC,UAAgB,EAZZ;AAaJC,gBAAgB,EAbZ;AAcJC,mBAAgB,CAAC,CAAD,EAAI,CAAJ;AAdZ,IAAN;AAgBAlB,WAASK,WAAWH,GAApB,IAA2BG,UAA3B;AACD;;AAED,SAASE,mBAAT,GAA+E;AAC7E,QAAM,IAAIY,KAAJ,CAAW,wBAAX,CAAN;AACD","file":"provider.js","sourcesContent":["//@flow\nimport { Fluture } from 'fluture'\nimport { type Emit } from 'eventemitter2'\nimport { type AsyncStorage } from 'mtproto-shared'\n\nimport { ProviderRegistryError } from '../error'\nimport { type TLSchema } from '../tl/index.h'\nimport { type DCNumber } from 'Newtype'\nimport {\n  type PublicKey,\n  type PublicKeyExtended,\n  type ApiConfig,\n} from '../service/main/index.h'\nimport ScopedEmitter from '../event/scoped-emitter'\nimport NetworkerThread from '../service/networker'\nimport Layout from '../layout'\nimport L1Cache from '../l1-cache'\nimport StorageAdapter from '../storage-adapter'\n\nconst provider: Provider = { }\n\nexport function getConfig(uid: string) {\n  const config = provider[uid]\n  if (config == null) throw new ProviderRegistryError(uid)\n  return config\n}\n\nexport function registerInstance(config: $Diff<InstanceConfig, InstanceDiff>) {\n  const fullConfig: InstanceConfig = {\n    //$FlowIssue\n    ...config,\n    keyManager    : keyManagerNotInited,\n    //$off\n    storageAdapter: new StorageAdapter(config.storage),\n    timerOffset   : 0,\n    seq           : {},\n    session       : {},\n    fastCache     : {},\n    thread        : {},\n    authRequest   : {},\n    halt          : {},\n    publicKeys    : {},\n    lastMessageID : [0, 0]\n  }\n  provider[fullConfig.uid] = fullConfig\n}\n\nfunction keyManagerNotInited(/*::fingerprints: string[] */): PublicKeyExtended {\n  throw new Error(`Key manager not inited`)\n}\n\ntype InstanceConfig = {\n  /*::+*/uid: string,\n  emit: Emit,\n  /*::+*/rootEmitter: ScopedEmitter,\n  /*::+*/storage: AsyncStorage,\n  /*::+*/storageAdapter: StorageAdapter,\n  /*::+*/apiConfig: ApiConfig,\n  publicKeys: { [key: string]: PublicKey },\n  keyManager: (fingerprints: string[]) => PublicKeyExtended,\n  authRequest: { [dc: number]: Fluture<*, *> },\n  seq: { [dc: number]: number },\n  session: { [dc: number]: number[] },\n  halt: { [dc: number]: boolean },\n  thread: { [dc: number]: NetworkerThread },\n  fastCache: { [dc: number]: L1Cache },\n  /*::+*/schema: {|\n    apiSchema: TLSchema,\n    mtSchema: TLSchema\n  |},\n  /*::+*/layer: {|\n    apiLayer: Layout,\n    mtLayer: Layout,\n  |},\n  timerOffset: number,\n  lastMessageID: [number, number],\n  dcMap: Map<DCNumber, string>\n}\n\ntype InstanceDiff = {\n  timerOffset: number,\n  lastMessageID: [number, number],\n  /*::+*/storageAdapter: StorageAdapter,\n  authRequest: { [dc: number]: Fluture<*, *> },\n  thread: { [dc: number]: NetworkerThread },\n  halt: { [dc: number]: boolean },\n  fastCache: { [dc: number]: L1Cache },\n  keyManager(fingerprints: string[]): PublicKeyExtended,\n  publicKeys: { [key: string]: PublicKey },\n  seq: { [dc: number]: number },\n  session: { [dc: number]: number[] },\n}\n\ntype Provider = {\n  [uid: string]: InstanceConfig\n}\n"]}