{"version":3,"sources":["../src/worker.js"],"names":["pqPrimeFactorization","bytesModPow","sha1HashSync","aesEncryptSync","aesDecryptSync","require","console","info","post","postPlain","data","postMessage","result","postStar","err","runTask","task","bytes","x","y","m","keyBytes","ivBytes","encryptedBytes","Error","onmessage","e","taskID"],"mappings":"AAEA,IAAM,EAAEA,oBAAF,EAAwBC,WAAxB,EAAqCC,YAArC;AACJC,gBADI,EACYC,cADZ,KAC+BC,QAAQ,OAAR,CADrC;;AAGAC,QAAQC,IAAR,CAAa,0BAAb;;AAEA,IAAMC,OAAO,CAAC,MAAM;AAIlB,WAASC,SAAT,CAAmBC,IAAnB,EAA8B;AAC5BC,gBAAYD,IAAZ;AACD;AACD,MAAIE,SANJ,SAASC,QAAT,CAAkBH,IAAlB,EAA6B;AAC3BC,gBAAYD,IAAZ,EAAkB,GAAlB;AACD,GAID;AACA,MAAI;AACFE,WAAO,OAAP;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZF,aAASH,SAAT;AACAG,WAAO,OAAP;AACD,GALD,SAKU;AACR;AACA,WAAOA,MAAP;AACD;AACF,CAjBY,GAAb;;AAmBA,IAAMG,UAAUL,QAAQ;AACtB,UAAQA,KAAKM,IAAb;AACE,SAAK,WAAL;AAAoB,aAAOhB,qBAAqBU,KAAKO,KAA1B,CAAP;AACpB,SAAK,SAAL;AAAoB,aAAOhB,YAAYS,KAAKQ,CAAjB,EAAoBR,KAAKS,CAAzB,EAA4BT,KAAKU,CAAjC,CAAP;AACpB,SAAK,WAAL;AAAoB,aAAOlB,aAAaQ,KAAKO,KAAlB,CAAP;AACpB,SAAK,aAAL;AAAoB,aAAOd,eAAeO,KAAKO,KAApB,EAA2BP,KAAKW,QAAhC,EAA0CX,KAAKY,OAA/C,CAAP;AACpB,SAAK,aAAL;AAAoB,aAAOlB,eAAeM,KAAKa,cAApB,EACeb,KAAKW,QADpB,EAC8BX,KAAKY,OADnC,CAAP;AAEpB;AACE,YAAM,IAAIE,KAAJ,CAAW,iBAAgBd,KAAKM,IAAK,EAArC,CAAN;AARJ;AAUD,CAXD;;AAaAS,YAAY,UAASC,CAAT,EAAY;AACtB,MAAIA,EAAEhB,IAAF,KAAW,EAAf,EAAmB;AACjBJ,YAAQC,IAAR,CAAa,mBAAb;AACD,GAFD,MAEO,IAAI,OAAOmB,EAAEhB,IAAT,KAAkB,QAAtB,EAAgC;AACrCJ,YAAQC,IAAR,CAAa,4BAAb,EAA2CmB,EAAEhB,IAA7C;AACD,GAFM,MAEA;AACL,QAAMiB,SAASD,EAAEhB,IAAF,CAAOiB,MAAtB;AACA,QAAMf,SAASG,QAAQW,EAAEhB,IAAV,CAAf;AACAF,SAAK,EAAEmB,MAAF,EAAUf,MAAV,EAAL;AACD;AACF,CAVD","file":"worker.js","sourcesContent":["//@flow\n\nconst { pqPrimeFactorization, bytesModPow, sha1HashSync,\n  aesEncryptSync, aesDecryptSync } = require('./bin')\n\nconsole.info('Crypto worker registered')\n\nconst post = (() => {\n  function postStar(data: any) {\n    postMessage(data, '*')\n  }\n  function postPlain(data: any) {\n    postMessage(data)\n  }\n  let result = postStar\n  try {\n    result('ready')\n  } catch (err) {\n    result = postPlain\n    result('ready')\n  } finally {\n    //eslint-disable-next-line\n    return result\n  }\n})()\n\nconst runTask = data => {\n  switch (data.task) {\n    case 'factorize'  : return pqPrimeFactorization(data.bytes)\n    case 'mod-pow'    : return bytesModPow(data.x, data.y, data.m)\n    case 'sha1-hash'  : return sha1HashSync(data.bytes)\n    case 'aes-encrypt': return aesEncryptSync(data.bytes, data.keyBytes, data.ivBytes)\n    case 'aes-decrypt': return aesDecryptSync(data.encryptedBytes,\n                                              data.keyBytes, data.ivBytes)\n    default:\n      throw new Error(`Unknown task: ${data.task}`)\n  }\n}\n\nonmessage = function(e) {\n  if (e.data === '') {\n    console.info('empty crypto task')\n  } else if (typeof e.data === 'string') {\n    console.info('crypto task string message', e.data)\n  } else {\n    const taskID = e.data.taskID\n    const result = runTask(e.data)\n    post({ taskID, result })\n  }\n}\n\ndeclare function postMessage(data: any, target?: '*'): void\n"]}