{"version":3,"sources":["../../src/util/warning.js"],"names":["intersperse","isNode","objectFlagVariants","browser","node","objectFlag","newLine","warnString","issueLink","issueString","prepareMessage","message","length","getMessage","isIssue","parts","concat","push","join","warning","spec","doWarn","data","console","warn"],"mappings":"AACA,SAASA,WAAT;AACA,SAASC,MAAT;;AAEA,IAAMC,qBAAqB;AACzBC,WAAS,IADgB;AAEzBC,QAAU;AAFe,CAA3B;;AAKA,IAAMC,aAAaJ,SACfC,mBAAmBE,IADJ,GAEfF,mBAAmBC,OAFvB;;AAIA,IAAMG,UAAW,IAAjB;;AAEA,IAAMC,aAAa,eAAnB;;AAEA,IAAMC,YAAY,qDAAlB;;AAEA,IAAMC,cACL;oCACmCD,SAAU,EAF9C;;AAUA,SAASE,cAAT,CAAwBC,OAAxB,EAA8D;AAC5D,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC,OAAO,CAACA,OAAD,CAAP;AACjC,MAAIA,QAAQC,MAAR,KAAmB,CAAvB,EAA0B,OAAO,CAACD,QAAQ,CAAR,CAAD,EAAaN,UAAb,CAAP;AAC1B,SAAOL,YAAYK,UAAZ,EAAwBM,OAAxB,CAAP;AACD;;AAED,SAASE,UAAT,CAAoB,EAAEC,OAAF,EAAWH,OAAX,EAApB,EAA4D;AAC1D,MAAII,QAAkB,CAACR,UAAD,EAAaD,OAAb,CAAtB;AACAS,UAAQA,MAAMC,MAAN,CAAaN,eAAeC,OAAf,CAAb,CAAR;AACA,MAAIG,OAAJ,EACEC,MAAME,IAAN,CAAWX,OAAX,EAAoBG,WAApB;AACFM,QAAME,IAAN,CAAWX,OAAX;AACA,SAAOS,MAAMG,IAAN,CAAW,EAAX,CAAP;AACD;;AAED,eAAe,SAASC,OAAT,CAAiBC,IAAjB,EAAiC;AAC9C,MAAMT,UAAUE,WAAWO,IAAX,CAAhB;AACA,SAAO,SAASC,MAAT,CAAgB,GAAGC,IAAnB,EAAgC;AACrCC,YAAQC,IAAR,CAAab,OAAb,EAAsB,GAAGW,IAAzB;AACD,GAFD;AAGD","file":"warning.js","sourcesContent":["//@flow\nimport { intersperse } from 'ramda'\nimport { isNode } from 'Runtime'\n\nconst objectFlagVariants = {\n  browser: '%O',\n  node   : `\\n%j\\n`,\n}\n\nconst objectFlag = isNode\n  ? objectFlagVariants.node\n  : objectFlagVariants.browser\n\nconst newLine = `\\n`\n\nconst warnString = '!! WARNING !!'\n\nconst issueLink = 'https://github.com/zerobias/telegram-mtproto/issues'\n\nconst issueString =\n`This is most likely a problem with the telegram-mtproto itself.\nFeel free to create an issue here ${issueLink}`\n\n\ntype WarnSpec = {\n  isIssue: boolean,\n  message: string | string[]\n}\n\nfunction prepareMessage(message: string | string[]): string[] {\n  if (typeof message === 'string') return [message]\n  if (message.length === 1) return [message[0], objectFlag]\n  return intersperse(objectFlag, message)\n}\n\nfunction getMessage({ isIssue, message }: WarnSpec): string {\n  let parts: string[] = [warnString, newLine]\n  parts = parts.concat(prepareMessage(message))\n  if (isIssue)\n    parts.push(newLine, issueString)\n  parts.push(newLine)\n  return parts.join('')\n}\n\nexport default function warning(spec: WarnSpec) {\n  const message = getMessage(spec)\n  return function doWarn(...data: any[]) {\n    console.warn(message, ...data)\n  }\n}\n"]}