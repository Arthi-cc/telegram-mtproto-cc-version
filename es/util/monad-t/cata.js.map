{"version":3,"sources":["../../../src/util/monad-t/cata.js"],"names":["example","read","path","write","data"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA,IAAMA,UAAU;AACdC,QAAQC,IAAD,KAAmB,EAAEA,IAAF,EAAnB,CADO;AAEdC,SAAO,CAACD,IAAD,EAAeE,IAAf,MAAmC,EAAEF,IAAF,EAAQE,IAAR,EAAnC;AAFO,CAAhB","file":"cata.js","sourcesContent":["//@flow\n\n// type Maker1<A> = (a: A) => { [field: string]: A }\n// type Maker2<A, B> = (a: A, b: B) => { a: A, b: B }\n// type Maker3<A, B, C> = (a: A, b: B, c: C) => { a: A, b: B, c: C }\n//\n// declare var m: Maker3<string, number, 1>\n//\n// const mm = m\n// mm\n\nconst example = {\n  read : (path: string) => ({ path }),\n  write: (path: string, data: number[]) => ({ path, data }),\n}\n\nclass Cata<T> {\n  data: T\n  tag: string\n  constructor(tag: string, data: T) {\n    this.data = data\n    this.tag = tag\n  }\n}\n\n// const res = cata(example)\n// const calls = res.read('val')\n// calls\n//\n// type ToCata = <I, V>((...I) => V) => ((...I) => Cata<V>)\n//\n// function cata<T: {[variant: string]: <-I, +O>(...$ReadOnlyArray<I>) => O}>(types: T): $ObjMap<T, ToCata> {\n//   const keys = Object.keys(types)\n//   const result = keys.reduce((acc, key) => ({\n//     ...acc,\n//     [key](...args) {\n//       const obj = types[key](...args)\n//       return new Cata(key, obj)\n//     }\n//   }), {})\n//\n//   return result\n// }\n"]}