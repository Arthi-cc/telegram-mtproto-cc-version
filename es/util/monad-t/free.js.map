{"version":3,"sources":["../../../src/util/monad-t/free.js"],"names":["of","map","ap","chain","Freeλʹ","retract","m","foldMap","id","hoist","f","x","liftF","Free","graft","chainRec","next","done","v","cata","Pure","Lift","g","xx","Ap","y","Chain","d","Pureλ","constructor","toString","Liftλ","Apλ","Chainλ","a","compose","mapping","equals","lte","concat","empty","contramap","alt","zero","reduce","traverse","extend","extract","bimap","promap","patch","obj","Object","keys","forEach","key","prototype","assign","command","chainRecNext","value","chainRecDone","i"],"mappings":"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","file":"free.js","sourcesContent":["//@flow\n\n//\nimport { of, map, ap, chain } from 'ramda'\n//\n// // data Free i a\n// //   = Ap { x: (Free i b), y: (Free i (b -> a)) }\n// //   | Pure { x: a }\n// //   | Lift { x: i, f: (b -> a) }\n// //   | Chain { x: (Free i b), f: (b -> (Free i a)) }\n// function Free() {\n//   throw new TypeError('No direct use of Free constructor is Allowed')\n// }\n\nexport type Freeλ = {\n  foldMap(f: *, m: *): *,\n  cata<C, L, A, P>(d: Cata<C, L, A, P>): *,\n}\n\nclass Freeλʹ {\n  retract(m) {\n    return this.foldMap(id, m)\n  }\n  hoist(f) {\n    return this.foldMap(x => liftF(f(x)), Free)\n  }\n  graft(f) {\n    return this.foldMap(f, Free)\n  }\n  foldMap(f, m) {\n    return m.chainRec((next, done, v) => v.cata({\n      Pure : (x) => map(done, m.of(x)),\n      Lift : (x, g: $off) => map(xx => done(g(xx)), f(x)),\n      Ap   : (x: Freeλ, y: Freeλ) => map(done, ap(y.foldMap(f, m), x.foldMap(f, m))),\n      Chain: (x: Freeλ, g: $off) => map(xx => next(g(xx)), x.foldMap(f, m)),\n    }), this)\n  }\n  cata(d): * {}\n}\n// // λʹ\n// function Pure(x) {\n//   if (!(this instanceof Pure)) {\n//     return new Pure(x)\n//   }\n//   this.x = x\n// }\n// Pure.prototype = Object.create(Free.prototype)\n// Pure.prototype.constructor = Pure\n// Pure.prototype.cata = function(d) { return d.Pure(this.x) }\n//\n\nexport type Cata<+C, +L, +A, +P> = {\n  Chain<-F>(x: Freeλ, f: F): C,\n  Lift<-X, -F>(x: X, f: F): L,\n  Ap(x: Freeλ, y: Freeλ): A,\n  Pure<-X>(x: X): P,\n}\n\nclass Pureλ<A> extends Freeλʹ {\n  x: A\n  constructor(x: A) {\n    super()\n    this.x = x\n  }\n  cata<-C, -L, -A, P>(d: Cata<C, L, A, P>): P {\n    return d.Pure(this.x)\n  }\n  static toString() {\n    return 'Free.Pure'\n  }\n  toString() {\n    return 'Free.Pure'\n  }\n  map<B>(f: (x: A) => B): Pureλ<B> {\n    return new Pureλ(f(this.x))\n  }\n  ap(y: *) {\n    return map(f => f(this.x), y)\n  }\n  chain(f: *) {\n    return f(this.x)\n  }\n  /*::\n  static $call: (<B>(x: B) => Pureλ<B>)\n  */\n}\n\n\n\n\nclass Liftλ extends Freeλʹ {\n  x: any\n  f: any\n  constructor(x: any, f: any) {\n    super()\n    this.x  = x\n    this.f = f\n  }\n  cata(x: Cata<any, any, any, any>) {\n    return x.Lift(this.x, this.f)\n  }\n  static toString() {\n    return 'Free.Lift'\n  }\n  toString() {\n    return 'Free.Lift'\n  }\n\n  ap(y) {\n    return new Apλ(this, y)\n  }\n  chain(f) {\n    return new Chainλ(this, f)\n  }\n  map(f) {\n    return new Liftλ(this.x, x => f(this.f(x)))\n  }\n  /*::\n  static $call: ((x: any, f: any) => Liftλ)\n  */\n}\n\nclass Apλ extends Freeλʹ {\n  x: Freeλ\n  y: Freeλ\n  constructor(x: Freeλ, y: Freeλ) {\n    super()\n    this.x  = x\n    this.y = y\n  }\n  cata(x: Cata<any, any, any, any>) {\n    return x.Ap(this.x, this.y)\n  }\n  static toString() {\n    return 'Free.Ap'\n  }\n  map(f) {\n    return new Apλ(this.x, map(a => map(f, a), this.y))\n  }\n  toString() {\n    return 'Free.Ap'\n  }\n  ap(y) {\n    return new Apλ(this, y)\n  }\n  chain(f) {\n    return new Chainλ(this, f)\n  }\n  /*::\n  static $call: ((x: any, f: any) => Apλ)\n  */\n}\n\nclass Chainλ extends Freeλʹ {\n  x: Freeλ\n  f: any\n  constructor(x: Freeλ, f: any) {\n    super()\n    this.x  = x\n    this.f = f\n  }\n  cata(x: Cata<any, any, any, any>) {\n    return x.Chain(this.x, this.f)\n  }\n  static toString() {\n    return 'Free.Chain'\n  }\n  map(f) {\n    return new Chainλ(this.x, a => map(f, this.f(a)))\n  }\n  ap(y) {\n    return new Apλ(this, y)\n  }\n  toString() {\n    return 'Free.Chain'\n  }\n  chain(f) {\n    return new Chainλ(this.x, v => chain(f, this.f(v)))\n  }\n  /*::\n  static $call: ((x: any, f: any) => Chainλ)\n  */\n}\n\nconst compose = (f, g) => (x) => f(g(x))\nconst id = x => x\n\n// function Pure<B>(x: B): Pureλ<B> {\n//   return new Pureλ(x)\n// }\n\n//$off\nfunction Lift(x, f): Liftλ {\n  return new Liftλ(x, f)\n}\n\n//$off\nfunction Ap(x, y): Apλ {\n  return new Apλ(x, y)\n}\n\n//$off\nfunction Chain(x, f): Chainλ {\n  return new Chainλ(x, f)\n}\n\n//$off\nfunction Pure<A>(x: A): Pureλ<A> {\n  return new Pureλ(x)\n}\n\n\nconst mapping = {\n  equals: 'fantasy-land/equals',\n  lte: 'fantasy-land/lte',\n  compose: 'fantasy-land/compose',\n  id: 'fantasy-land/id',\n  concat: 'fantasy-land/concat',\n  empty: 'fantasy-land/empty',\n  map: 'fantasy-land/map',\n  contramap: 'fantasy-land/contramap',\n  ap: 'fantasy-land/ap',\n  of: 'fantasy-land/of',\n  alt: 'fantasy-land/alt',\n  zero: 'fantasy-land/zero',\n  reduce: 'fantasy-land/reduce',\n  traverse: 'fantasy-land/traverse',\n  chain: 'fantasy-land/chain',\n  chainRec: 'fantasy-land/chainRec',\n  extend: 'fantasy-land/extend',\n  extract: 'fantasy-land/extract',\n  bimap: 'fantasy-land/bimap',\n  promap: 'fantasy-land/promap'\n}\n\nconst patch = obj => Object.keys(mapping).forEach(key => {\n  //$off\n  if (typeof obj[key] === 'function') {\n    //$off\n    obj[mapping[key]] = obj[key]\n  }\n})\n\n;[\n  Freeλʹ, Freeλʹ.prototype,\n  Pureλ, Pureλ.prototype,\n  Chainλ, Chainλ.prototype,\n  Liftλ, Liftλ.prototype,\n  Apλ, Apλ.prototype,\n].forEach(patch)\n\n\n//$off\nObject.assign(Pure, Pureλ); (Pure: typeof Pureλ)\n//$off\nObject.assign(Chain, Chainλ); (Chain: typeof Chainλ)\n//$off\nObject.assign(Ap, Apλ); (Ap: typeof Apλ)\n//$off\nObject.assign(Lift, Liftλ); (Lift: typeof Liftλ)\n\nfunction liftF(command): Liftλ {\n  return new Liftλ(command, id)\n}\n\nexport const Free: {\n  (): void,\n  Pure<A>(x: A): Pureλ<A>,\n  Ap: typeof Ap,\n  Lift: typeof Lift,\n  Chain: typeof Chain,\n  chainRec: typeof chainRec,\n} = Object.assign(function Free() {}, {\n  Pure,\n  of: Pure,\n  liftF,\n  Ap,\n  Chain,\n  Lift,\n  chainRec,\n})\n\n\nexport default Free\n\n//\n// function Lift(x, f) {\n//   if (!(this instanceof Lift)) {\n//     return new Lift(x, f)\n//   }\n//   this.x = x\n//   this.f = f\n// }\n// Lift.prototype = Object.create(Free.prototype)\n// Lift.prototype.constructor = Lift\n// Lift.prototype.cata = function(d) { return d.Lift(this.x, this.f) }\n//\n// function Ap(x, y) {\n//   if (!(this instanceof Ap)) {\n//     return new Ap(x, y)\n//   }\n//   this.x = x\n//   this.y = y\n// }\n// Ap.prototype = Object.create(Free.prototype)\n// Ap.prototype.constructor = Ap\n// Ap.prototype.cata = function(d) { return d.Ap(this.x, this.y) }\n//\n// function Chain(x, f) {\n//   if (!(this instanceof Chain)) {\n//     return new Chain(x, f)\n//   }\n//   this.x = x\n//   this.f = f\n// }\n//\n// Chain.prototype = Object.create(Free.prototype)\n// Chain.prototype.constructor = Chain\n// Chain.prototype.cata = function(d) { return d.Chain(this.x, this.f) }\n//\n// Free.Pure = Pure\n// Free.Ap = Ap\n// Free.Lift = Lift\n// Free.Chain = Chain\n//\n// const compose = (f, g) => (x) => f(g(x))\n// const id = x => x\n//\n// /* istanbul ignore next */\n// Free.Pure.toString = () => 'Free.Pure'\n// /* istanbul ignore next */\n// Free.Ap.toString = () => 'Free.Ap'\n// /* istanbul ignore next */\n// Free.Lift.toString = () => 'Free.Lift'\n// /* istanbul ignore next */\n// Free.Chain.toString = () => 'Free.Chain'\n// /* istanbul ignore next */\n// Free.prototype.toString = function() {\n//   return this.cata({\n//     Pure : (x) => `Free.Pure(${x})`,\n//     Lift : (x, f) => `Free.Lift(${x},=>)`,\n//     Ap   : (x, y) => `Free.Ap(${x},${y})`,\n//     Chain: (x, f) => `Free.Chain(${x},=>)`,\n//   })\n// }\n//\n// Free.of = Free.Pure\n// Free.liftF = command => Free.Lift(command, id)\n//\n// Free.prototype.map = function(f) {\n//   return this.cata({\n//     Pure : (x) => Free.Pure(f(x)),\n//     Lift : (x, g) => Free.Lift(x, compose(f, g)),\n//     Ap   : (x, y) => Free.Ap(x, map((a) => map(f, a), y)),\n//     Chain: (x, g) => Free.Chain(x, (a) => map(f, g(a))),\n//   })\n// }\n//\n// Free.prototype.ap = function(y) {\n//   return this.cata({\n//     Pure : (x) => map((f) => f(x), y),\n//     Ap   : () => Free.Ap(this, y),\n//     Lift : () => Free.Ap(this, y),\n//     Chain: () => Free.Ap(this, y),\n//   })\n// }\n//\n// Free.prototype.chain = function(f) {\n//   return this.cata({\n//     Pure : (x) => f(x),\n//     Ap   : () => Free.Chain(this, f),\n//     Lift : () => Free.Chain(this, f),\n//     Chain: (x, g) => Free.Chain(x, (v) => chain(f, g(v))),\n//   })\n// }\n//\n// Free.prototype.hoist = function(f) {\n//   return this.foldMap(compose(Free.liftF, f), Free)\n// }\n//\n// Free.prototype.retract = function(m) {\n//   return this.foldMap(id, m)\n// }\n//\n// Free.prototype.foldMap = function(f, m) {\n//   return m.chainRec((next, done, v) => v.cata({\n//     Pure : (x) => map(done, of(m, x)),\n//     Lift : (x, g) => map(compose(done, g), f(x)),\n//     Ap   : (x, y) => map(done, ap(y.foldMap(f, m), x.foldMap(f, m))),\n//     Chain: (x, g) => map(compose(next, g), x.foldMap(f, m)),\n//   }), this)\n// }\n//\n// Free.prototype.graft = function(f) {\n//   return this.foldMap(f, Free)\n// }\n//\n\nconst chainRecNext = (value) => ({ done: false, value })\nconst chainRecDone = (value) => ({ done: true, value })\n\nfunction chainRec(f, i) {\n  return chain(\n    ({ done, value }) => done ? new Pureλ(value) : chainRec(f, value),\n    f(chainRecNext, chainRecDone, i)\n  )\n}\n\n//\n// Free.chainRec = (f, i) => chain(\n//   ({ done, value }) => done ? Free.of(value) : Free.chainRec(f, value),\n//   f(chainRecNext, chainRecDone, i)\n// )\n//\n// // patchAll([Free, Free.prototype])\n//\n// // module.exports = Free\n//\n// export default Free\n"]}