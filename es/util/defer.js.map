{"version":3,"sources":["../../src/util/defer.js"],"names":["Bluebird","filler","value","Error","blueDefer","resolve","reject","promise","rs","rj"],"mappings":"AAEA,OAAOA,QAAP;;AAEA;;AAQA,IAAMC,SAA8BC,KAAD,IAAW;AAC5C,QAAM,IAAIC,KAAJ,CAAW,4BAAX,CAAN;AACD,CAFD;;AAIA;;;AAGA,OAAO,IAAMC,YAAY,MAAa;AACpC,MAAIC,UAAUJ,MAAd;AAAA,MACIK,SAASL,MADb;AAEA,MAAMM,UAAU,IAAIP,QAAJ,CAAa,CAACQ,EAAD,EAAKC,EAAL,KAAY;AACvCJ,cAAUG,EAAV;AACAF,aAASG,EAAT;AACD,GAHe,CAAhB;AAIA,SAAO;AACLJ,WADK;AAELC,UAFK;AAGLC;AAHK,GAAP;AAKD,CAZM;;AAcP,eAAeH,SAAf","file":"defer.js","sourcesContent":["//@flow\n\nimport Bluebird from 'bluebird'\n\n// export type Defer = $Shape<Bluebird.Defer>\n\nexport type Defer = {\n  resolve<T>(rs: T): void,\n  reject<E>(rs: E): void,\n  promise: Promise<*>,\n}\n\nconst filler: (value: *) => void = (value) => {\n  throw new Error(`Filler must not be called!`)\n}\n\n/**\n * Defered promise like in Q and $q\n */\nexport const blueDefer = (): Defer => {\n  let resolve = filler,\n      reject = filler\n  const promise = new Bluebird((rs, rj) => {\n    resolve = rs\n    reject = rj\n  })\n  return {\n    resolve,\n    reject,\n    promise\n  }\n}\n\nexport default blueDefer\n"]}