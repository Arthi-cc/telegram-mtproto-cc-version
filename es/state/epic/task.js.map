{"version":3,"sources":["../../../src/state/epic/task.js"],"names":["Stream","of","ofF","toPairs","contains","Logger","log","API","NET","normalize","decrypt","jsonError","queryAck","NetworkerThread","dispatch","tsNow","NetContainer","Config","flatPairs","data","concat","map","n","list","epicHandler","actionCreator","future","action","thru","stream","e","payload","chainRej","err","NETWORK_ERROR","uid","promise","filter","recoverWith","receiveResponse","RECEIVE_RESPONSE","normalized","summary","dc","thread","processAck","ack","reqResend","id","processMessageAck","ackMessage","pushResend","performResend","type","noResponseMsgs","cache","fastCache","get","sentDel","msgID","hasSent","msg","getSent","push","deleteSent","deferred","resolve","checkConnectionPeriod","Math","max","sqrt","checkLongPoll","result","obj","TASK","DONE","sentMessage","acked","body","ackMsgIDs","ACK_ADD","sheduleRequest","value","inner","setPending","hasResends","resendMsgIDs","getResends","wrapMtpMessage","_","msg_ids","noShedule","notContentRelated","lastResendReq","req_msg_id","msg_id","resend_msg_ids"],"mappings":"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","file":"task.js","sourcesContent":["//@flow\n\nimport { Stream, of } from 'most'\nimport { of as ofF } from 'fluture'\nimport { toPairs, contains } from 'ramda'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`epic-task`\n\nimport { API, NET } from '../action'\nimport { normalize, decrypt } from '../../task'\nimport jsonError from 'Util/json-error'\nimport {\n  queryAck,\n} from '../query'\nimport NetworkerThread from '../../service/networker'\nimport { dispatch } from '../portal'\nimport { tsNow } from '../../service/time-manager'\nimport { NetContainer } from '../../service/networker/net-message'\nimport Config from 'ConfigProvider'\n\nfunction flatPairs(data) {\n  return []\n    .concat(\n      ...toPairs(data)\n        .map(([n, list]) => list)\n    )\n\n}\n\nconst epicHandler = (actionCreator, future) => (action: Stream<any>) => action\n  .thru(actionCreator.stream)\n  .map(e => e.payload)\n  .map(payload => future(payload)\n    .chainRej(err => ofF(dispatch(NET.NETWORK_ERROR(jsonError(err)), payload.uid)))\n    .promise())\n  .filter(() => false)\n  .recoverWith(err => of(NET.NETWORK_ERROR(jsonError(err))))\n\nexport const receiveResponse = epicHandler(\n  NET.RECEIVE_RESPONSE,\n  payload => decrypt(payload)\n    .map(normalize)\n    .map((data) => {\n      const {\n        normalized,\n        summary,\n        dc,\n        uid,\n        // salt: saltKey,\n        // auth: authKey,\n        thread,\n      } = data\n      const {\n        processAck,\n        ack,\n        reqResend,\n      } = summary\n      // const { salt, auth } = summary\n      // const saltPairs = toPairs(salt)\n      // const authPairs = toPairs(auth)\n      // for (const [dc, value] of saltPairs) {\n      //   if (!Array.isArray(value)) {\n      //     await Config.storage.remove(uid, `dc${dc}_server_salt`)\n      //   } else {\n      //     await Config.storage.set(uid, `dc${dc}_server_salt`, value)\n      //   }\n      // }\n      // for (const [dc, value] of authPairs) {\n      //   if (!Array.isArray(value)) {\n      //     await Config.storage.remove(uid, `dc${dc}_auth_key`)\n      //   } else {\n      //     await Config.storage.set(uid, `dc${dc}_auth_key`, value)\n      //   }\n      // }\n\n      for (const id of flatPairs(processAck)) {\n        processMessageAck(uid, dc, id)\n      }\n      for (const id of flatPairs(ack)) {\n        ackMessage(uid, dc, id, thread)\n      }\n      for (const id of flatPairs(reqResend)) {\n        pushResend(uid, dc, id, thread)\n      }\n      performResend(uid, dc, thread)\n\n      dispatch({\n        type   : '[01] action carrier',\n        payload: {\n          normalized, summary\n        }\n      }, uid)\n      if (__DEV__)\n        normalized.forEach(\n          msg => console.log(\n            'normalized, summary',\n            msg, `\\n`,\n            summary, `\\n`))\n      return {\n        ...data,\n        uid,\n        dc,\n        normalized,\n      }\n    })\n    .map(({ uid, dc, thread, noResponseMsgs, normalized }) => {\n      // await thread.requestPerformer(message, noResponseMsgs, result)\n      const cache = Config.fastCache.get(uid, dc)\n      // thread.toggleOffline(false)\n      const sentDel = []\n      for (const msgID of noResponseMsgs)\n        if (cache.hasSent(msgID)) {\n          const msg = cache.getSent(msgID)\n          sentDel.push(msg)\n          cache.deleteSent(msg)\n          msg.deferred.resolve()\n        }\n      // dispatch(NETWORKER_STATE.SENT.DEL(sentDel, thread.dcID))\n      thread.checkConnectionPeriod = Math.max(1.1, Math.sqrt(thread.checkConnectionPeriod))\n      thread.checkLongPoll()\n      const result = normalized.map(obj => ({ ...obj, uid }))\n      dispatch(API.TASK.DONE(result), uid)\n    })\n)\n\nfunction processMessageAck(uid, dc, msg: string) {\n  const cache = Config.fastCache.get(uid, dc)\n  const sentMessage = cache.getSent(msg)\n  if (sentMessage && !sentMessage.acked) { //TODO Warning, mutable changes!\n    delete sentMessage.body\n    sentMessage.acked = true\n  }\n}\n\nfunction ackMessage(uid, dc, msg: string, thread: NetworkerThread) {\n  const ackMsgIDs = queryAck(uid, dc)\n  if (contains(msg, ackMsgIDs)) return\n  dispatch(NET.ACK_ADD({ dc, ack: [msg] }), uid)\n  thread.sheduleRequest(30000)\n}\n\nfunction pushResend(uid, dc, msg: string, thread: NetworkerThread) {\n  const cache = Config.fastCache.get(uid, dc)\n  const value = tsNow()\n  const sentMessage = cache.getSent(msg)\n  if (sentMessage instanceof NetContainer) {\n    for (const msg of sentMessage.inner) {\n      cache.setPending(msg, value)\n    }\n  } else {\n    cache.setPending(msg, value)\n  }\n  thread.sheduleRequest(100)\n}\n\nfunction performResend(uid, dc, thread: NetworkerThread) {\n  const cache = Config.fastCache.get(uid, dc)\n  if (cache.hasResends()) {\n    const resendMsgIDs = [...cache.getResends()]\n    const resendOpts = { noShedule: true, notContentRelated: true }\n    const msg = thread.wrapMtpMessage({\n      _      : 'msg_resend_req',\n      msg_ids: resendMsgIDs\n    }, resendOpts)\n    thread.lastResendReq = {\n      req_msg_id    : msg.msg_id,\n      resend_msg_ids: resendMsgIDs,\n    }\n  }\n}\n"]}