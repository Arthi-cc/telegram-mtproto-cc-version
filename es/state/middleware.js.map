{"version":3,"sources":["../../src/state/middleware.js"],"names":["replace","trim","pipe","Logger","log","tryAddUid","next","action","uid","payload","skipEmptyMiddleware","getActionType","Array","isArray","length","type","removeTypeIndex","e","normalizeActions","defaults"],"mappings":"AACA;AACA,SAASA,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB;AACA,OAAOC,MAAP;AACA,IAAMC,MAAMD,MAAO,YAAnB;;AAEA,OAAO,IAAME,YAAY,MAAOC,IAAD,IAAiCC,MAAD,IAAmB;AAEhF,MAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,UAAU,IAA5C,EAAkD;AAClD,MAAI,OAAOA,OAAOC,GAAd,KAAsB,QAA1B,EAAoC,OAAO,CAF9B,MAAMF,KAAKC,MAAL,CAEwB,GAAP;AACpC,MAAI,OAAOA,OAAOE,OAAd,KAA0B,QAA1B,IAAsCF,OAAOE,OAAP,IAAkB,IAAxD,IAAgE,OAAOF,OAAOE,OAAP,CAAeD,GAAtB,KAA8B,QAAlG,EACED,OAAOC,GAAP,GAAaD,OAAOE,OAAP,CAAeD,GAA5B;AACF,SAAOF,KAAKC,MAAL,CAAP;AACD,CAPM;;AASP,OAAO,IAAMG,sBAAsB,MAAOJ,IAAD,IAAcC,MAAD,IAAe;AACnE,MACEI,cAAcJ,MAAd,MAA0B,uBAA1B,IACGK,MAAMC,OAAN,CAAcN,OAAOE,OAArB,CADH,IAEGF,OAAOE,OAAP,CAAeK,MAAf,KAA0B,CAH/B,EAIE;AACAV,OAAI,YAAJ,CAAgBG,OAAOQ,IAAvB,EALF,KAOE,OAAOT,KAAKC,MAAL,CAAP;AACH,CATM;;AAkBP;;;;;;;;AAQA,IAAMS,kBAAkBhB,QAAQ,UAAR,EAAoB,EAApB,CAAxB;;AAEA,IAAMW,gBAAgBT,KACnBe,CAAD,IAAqBA,EAAEF,IAAF,IAAU,EADX,EAEpBC,eAFoB,EAGpBf,IAHoB,CAAtB;;AAMA,OAAO,IAAMiB,mBAC0BC,QAArC,IAA4D,MACzDb,IAAD,IAAcC,MAAD,IAAeD,uBAAUa,QAAV,EAAuBZ,MAAvB,EAFzB","file":"middleware.js","sourcesContent":["//@flow\nimport { type Middleware } from 'redux'\nimport { replace, trim, pipe } from 'ramda'\nimport Logger from 'mtproto-logger'\nconst log = Logger`redux-core`\n\nexport const tryAddUid = () => (next: (action: any) => any) => (action: mixed) => {\n  const send = () => next(action)\n  if (typeof action !== 'object' || action == null) return\n  if (typeof action.uid === 'string') return send()\n  if (typeof action.payload === 'object' && action.payload != null && typeof action.payload.uid === 'string')\n    action.uid = action.payload.uid\n  return next(action)\n}\n\nexport const skipEmptyMiddleware = () => (next: *) => (action: *) => {\n  if (\n    getActionType(action) === 'networker/sent delete'\n    && Array.isArray(action.payload)\n    && action.payload.length === 0\n  ) //TODO Remove hardcode\n    log`skip empty`(action.type)\n  else\n    return next(action)\n}\n\ntype ActionObject = {\n  type: string,\n  payload: mixed,\n  meta: {\n    debounced: boolean\n  },\n}\n/*::\ndeclare var actionObject: ActionObject\ndeclare var dataArray: Array<any>\nconst actionArray = { ...actionObject, payload: dataArray }\n\ntype ActionArray = typeof actionArray\n*/\n\nconst removeTypeIndex = replace(/\\[\\d+\\] /, '')\n\nconst getActionType = pipe(\n  (e: ActionObject) => e.type || '',\n  removeTypeIndex,\n  trim\n)\n\nexport const normalizeActions =\n  <Defaults: { [field: string]: any }>(defaults: Defaults) => () =>\n    (next: *) => (action: *) => next({ ...defaults, ...action })\n"]}