{"version":3,"sources":["../../src/tl/reader.js"],"names":["TypeBuffer","lshift32","bytesToHex","Logger","log","readInt","ctx","field","result","nextInt","readLong","iLow","iHigh","res","readDouble","buffer","ArrayBuffer","intView","Int32Array","doubleView","Float64Array","readString","bytes","readBytes","sUTF8","map","getChar","join","s","decodeURIComponent","escape","e","len","nextByte","next","addPadding","String","fromCharCode"],"mappings":"AAEA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,QAArC;;AAEA,OAAOC,MAAP;AACA,IAAMC,MAAMD,MAAO,WAAnB;;AAIA,OAAO,SAASE,OAAT,CAAiBC,GAAjB,EAAkCC,KAAlC,EAAyD;AAC9D,MAAMC,SAASF,IAAIG,OAAJ,EAAf;AACAL,MAAI,KAAJ,EAAWG,KAAX,EAAkBC,MAAlB;AACA,SAAOA,MAAP;AACD;;AAED,OAAO,SAASE,QAAT,CAAkBJ,GAAlB,EAAmCC,KAAnC,EAAmD;AACxD,MAAMI,OAAeN,QAAQC,GAAR,EAAc,GAAGC,KAAO,YAAxB,CAArB;AACA,MAAMK,QAAgBP,QAAQC,GAAR,EAAc,GAAGC,KAAO,aAAxB,CAAtB;;AAEA,MAAMM,MAAMZ,SAASW,KAAT,EAAgBD,IAAhB,CAAZ;AACA,SAAOE,GAAP;AACD;;AAED,OAAO,SAASC,UAAT,CAAoBR,GAApB,EAAqCC,KAArC,EAAoD;AACzD,MAAMQ,SAAS,IAAIC,WAAJ,CAAgB,CAAhB,CAAf;AACA,MAAMC,UAAU,IAAIC,UAAJ,CAAeH,MAAf,CAAhB;AACA,MAAMI,aAAa,IAAIC,YAAJ,CAAiBL,MAAjB,CAAnB;;AAEAE,UAAQ,CAAR,IAAaZ,QAAQC,GAAR,EAAc,GAAGC,KAAO,cAAxB,CAAb;AACAU,UAAQ,CAAR,IAAaZ,QAAQC,GAAR,EAAc,GAAGC,KAAO,eAAxB,CAAb;;AAEA,SAAOY,WAAW,CAAX,CAAP;AACD;;AAED,OAAO,SAASE,UAAT,CAAoBf,GAApB,EAAqCC,KAArC,EAAoD;AACzD,MAAMe,QAAQC,UAAUjB,GAAV,EAAgB,GAAEC,KAAM,SAAxB,CAAd;AACA,MAAMiB,QAAQ,CAAC,GAAGF,KAAJ,EACXG,GADW,CACPC,OADO,EAEXC,IAFW,CAEN,EAFM,CAAd;;AAIA,MAAIC,UAAJ;AACA,MAAI;AACFA,QAAIC,mBAAmBC,OAAON,KAAP,CAAnB,CAAJ;AACD,GAFD,CAEE,OAAOO,CAAP,EAAU;AACVH,QAAIJ,KAAJ;AACD;;AAEDpB,MAAK,QAAL,EAAcwB,CAAd,EAAkB,GAAErB,KAAM,SAA1B;;AAEA,SAAOqB,CAAP;AACD;;AAED,OAAO,SAASL,SAAT,CAAmBjB,GAAnB,EAAoCC,KAApC,EAAmD;AACxD,MAAIyB,MAAM1B,IAAI2B,QAAJ,EAAV;;AAEA,MAAID,OAAO,GAAX,EAAgB;AACdA,UAAM1B,IAAI2B,QAAJ,KACF3B,IAAI2B,QAAJ,MAAkB,CADhB,GAEF3B,IAAI2B,QAAJ,MAAkB,EAFtB;AAGD;;AAED,MAAMX,QAAQhB,IAAI4B,IAAJ,CAASF,GAAT,CAAd;AACA1B,MAAI6B,UAAJ;;AAEA/B,MAAK,OAAL,EAAaF,WAAWoB,KAAX,CAAb,EAAiC,GAAGf,KAAO,QAA3C;;AAEA,SAAOe,KAAP;AACD;;AAGD,IAAMI,UAAWK,CAAD,IAAeK,OAAOC,YAAP,CAAoBN,CAApB,CAA/B","file":"reader.js","sourcesContent":["//@flow\n\nimport { TypeBuffer } from './type-buffer'\nimport { lshift32, bytesToHex } from '../bin'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`tl:reader`\n\n\n\nexport function readInt(ctx: TypeBuffer, field: string): number {\n  const result = ctx.nextInt()\n  log('int')(field, result)\n  return result\n}\n\nexport function readLong(ctx: TypeBuffer, field: string ) {\n  const iLow: number = readInt(ctx, `${ field }:long[low]`)\n  const iHigh: number = readInt(ctx, `${ field }:long[high]`)\n\n  const res = lshift32(iHigh, iLow)\n  return res\n}\n\nexport function readDouble(ctx: TypeBuffer, field: string) {\n  const buffer = new ArrayBuffer(8)\n  const intView = new Int32Array(buffer)\n  const doubleView = new Float64Array(buffer)\n\n  intView[0] = readInt(ctx, `${ field }:double[low]`)\n  intView[1] = readInt(ctx, `${ field }:double[high]`)\n\n  return doubleView[0]\n}\n\nexport function readString(ctx: TypeBuffer, field: string) {\n  const bytes = readBytes(ctx, `${field}:string`)\n  const sUTF8 = [...bytes]\n    .map(getChar)\n    .join('')\n\n  let s\n  try {\n    s = decodeURIComponent(escape(sUTF8))\n  } catch (e) {\n    s = sUTF8\n  }\n\n  log(`string`)(s, `${field}:string`)\n\n  return s\n}\n\nexport function readBytes(ctx: TypeBuffer, field: string) {\n  let len = ctx.nextByte()\n\n  if (len == 254) {\n    len = ctx.nextByte() |\n        ctx.nextByte() << 8 |\n        ctx.nextByte() << 16\n  }\n\n  const bytes = ctx.next(len)\n  ctx.addPadding()\n\n  log(`bytes`)(bytesToHex(bytes), `${ field }:bytes`)\n\n  return bytes\n}\n\n\nconst getChar = (e: number) => String.fromCharCode(e)"]}