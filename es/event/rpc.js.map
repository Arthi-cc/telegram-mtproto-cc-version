{"version":3,"sources":["../../src/event/rpc.js"],"names":["uintToInt","RpcApiError","Logger","log","onRpcError","rpcError","errorMessage","error_message","matches","match","errorCode","error_code","code","description","migrateRegexp","fileMigrateRegexp","isMigrateError","err","test","message","isFileMigrateError","getMigrateDc","regExp","matched","length","newDcID","isFinite","newDc","parseInt","getFileMigrateDc"],"mappings":"AAEA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,MAAP;AACA,IAAMC,MAAMD,MAAO,YAAnB;;AAOA,OAAO,IAAME,aAAcC,QAAD,IAA2B;AACnD,MAAMC,eAAeD,SAASE,aAAT,IAA0B,EAA/C;AACA,MAAMC,UAAWF,YAAD,CAAeG,KAAf,CAAqB,0BAArB,KAAoD,EAApE;AACA,MAAMC,YAAYV,UAAUK,SAASM,UAAT,IAAuB,CAAjC,CAAlB;AACA,MAAMC,OAAO,CAACF,SAAD,IAAcA,aAAa,CAA3B,GACP,GADO,GAEPA,SAFN;AAGaF,UAAQ,CAAR,KAAc,SAPwB;;AAQnD,MAAMK,cAAcL,QAAQ,CAAR,KAAe,QAAOI,IAAK,IAAGN,YAAa,EAA/D;AACA,SAAO,IAAIL,WAAJ,CAAgBW,IAAhB,EAAsBC,WAAtB,CAAP;AACD,CAVM;;AAYP,IAAMC,gBAAgB,uDAAtB;AACA,IAAMC,oBAAoB,uBAA1B;;AAEA,OAAO,IAAMC,iBAAkBC,GAAD,IAAsBH,cAAcI,IAAd,CAAmBD,IAAIE,OAAvB,CAA7C;AACP,OAAO,IAAMC,qBAAsBH,GAAD,IAAsBF,kBAAkBG,IAAlB,CAAuBD,IAAIE,OAA3B,CAAjD;;AAEP,OAAO,IAAME,eAAe,CAACJ,GAAD,EAAmBK,SAAiBR,aAApC,KAAsD;AAChF,MAAMS,UAAUN,IAAIE,OAAJ,CAAYV,KAAZ,CAAkBa,MAAlB,CAAhB;AACA,MAAI,CAACC,OAAD,IAAYA,QAAQC,MAAR,GAAiB,CAAjC,EAAoC;AAClCrB,QAAI,SAAJ,EAAe,uBAAf,EAAwCc,IAAIE,OAA5C;AACA,WAAO,IAAP;AACD;AACD,MAAM,IAAMM,OAAN,IAAiBF,OAAvB;AACA,MAAI,CAACG,SAASD,OAAT,CAAL,EAAwB;AACtBtB,QAAI,SAAJ,EAAe,gBAAf,EAAiC,YAAjC,EAA+CsB,OAA/C;AACA,WAAO,IAAP;AACD;AACD,MAAME,QAAQC,SAASH,OAAT,EAAkB,EAAlB,CAAd;AACA,SAAOE,KAAP;AACD,CAbM;;AAeP,OAAO,IAAME,mBAAoBZ,GAAD,IAAsBI,aAAaJ,GAAb,EAAkBF,iBAAlB,CAA/C","file":"rpc.js","sourcesContent":["//@flow\n\nimport { uintToInt } from '../bin'\nimport { RpcApiError } from '../error'\nimport Logger from 'mtproto-logger'\nconst log = Logger`event, rpc`\n\nexport type RpcRawError = {\n  error_message?: string,\n  error_code?: number,\n}\n\nexport const onRpcError = (rpcError: RpcRawError) => {\n  const errorMessage = rpcError.error_message || ''\n  const matches = (errorMessage).match(/^([A-Z_0-9]+\\b)(: (.+))?/) || []\n  const errorCode = uintToInt(rpcError.error_code || 0)\n  const code = !errorCode || errorCode <= 0\n      ? 500\n      : errorCode\n  const type = matches[1] || 'UNKNOWN'\n  const description = matches[3] || `CODE#${code} ${errorMessage}`\n  return new RpcApiError(code, description)\n}\n\nconst migrateRegexp = /^(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\\d+)/\nconst fileMigrateRegexp = /^(FILE_MIGRATE_)(\\d+)/\n\nexport const isMigrateError = (err: RpcApiError) => migrateRegexp.test(err.message)\nexport const isFileMigrateError = (err: RpcApiError) => fileMigrateRegexp.test(err.message)\n\nexport const getMigrateDc = (err: RpcApiError, regExp: RegExp = migrateRegexp) => {\n  const matched = err.message.match(regExp)\n  if (!matched || matched.length < 2) {\n    log('warning')('no matched error type', err.message)\n    return null\n  }\n  const [ , , newDcID] = matched\n  if (!isFinite(newDcID)) {\n    log('warning', 'migrated error')('invalid dc', newDcID)\n    return null\n  }\n  const newDc = parseInt(newDcID, 10)\n  return newDc\n}\n\nexport const getFileMigrateDc = (err: RpcApiError) => getMigrateDc(err, fileMigrateRegexp)\n"]}