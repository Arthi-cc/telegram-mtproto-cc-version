{"version":3,"sources":["../../src/event/scoped-emitter.js"],"names":["EventEmitter","arrify","ScopedEmitter","constructor","scope","parent","on","event","listener","fullEvent","concat","normalizeScope","root","off","join","emit","values","addEventListener","removeEventListener","combineScope","scopedEmitter","reduceStarter","scopes","reduce","acc","val"],"mappings":"AAEA,OAAOA,YAAP;AACA,OAAOC,MAAP;;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAGjCC,cAAYC,KAAZ,EAA4BC,MAA5B,EAAwF;AAAA,SAWxFC,EAXwF,GAWnF,CAACC,KAAD,EAAiBC,QAAjB,KAAwC;AAC3C,UAAMC,YAAY,KAAKL,KAAL,CAAWM,MAAX,CAAkBC,eAAeJ,KAAf,CAAlB,CAAlB;AACA,aAAO,KAAKK,IAAL,CAAUN,EAAV,CAAaG,SAAb,EAAwBD,QAAxB,CAAP;AACD,KAduF;;AAAA,SAexFK,GAfwF,GAelF,CAACN,KAAD,EAAgBC,QAAhB,KAAuC;AAC3C,UAAMC,YAAY,CAAC,GAAG,KAAKL,KAAT,EAAgBG,KAAhB,EAAuBO,IAAvB,CAA4B,GAA5B,CAAlB;AACA,aAAO,KAAKF,IAAL,CAAUC,GAAV,CAAcJ,SAAd,EAAyBD,QAAzB,CAAP;AACD,KAlBuF;;AAAA,SAmBxFO,IAnBwF,GAmBjF,CAACR,KAAD,EAAiB,GAAGS,MAApB,KAAsC;AAC3C,UAAMP,YAAY,KAAKL,KAAL,CAAWM,MAAX,CAAkBC,eAAeJ,KAAf,CAAlB,CAAlB;AACA,aAAO,KAAKK,IAAL,CAAUG,IAAV,CAAeN,SAAf,EAA0B,GAAGO,MAA7B,CAAP;AACD,KAtBuF;;AAAA,SAuBxFC,gBAvBwF,GAuBrE,KAAKX,EAvBgE;AAAA,SAwBxFY,mBAxBwF,GAwBlE,KAAKL,GAxB6D;;AACtF,QAAIR,kBAAkBH,aAAtB,EAAqC;AACnC,WAAKU,IAAL,GAAYP,OAAOO,IAAnB;AACA,WAAKR,KAAL,GAAae,aAAad,OAAOD,KAApB,EAA2BA,KAA3B,CAAb;AACD,KAHD,MAGO;AACL,WAAKA,KAAL,GAAaO,eAAeP,KAAf,CAAb;AACA,WAAKQ,IAAL,GAAYP,MAAZ;AACD;AACD;AACD;;AAZgC;;AA8BnC,OAAO,SAASe,aAAT,CAAuBhB,KAAvB,EAAuCC,MAAvC,EAAgG;AACrG,SAAO,IAAIH,aAAJ,CAAkBE,KAAlB,EAAyBC,MAAzB,CAAP;AACD;;AAED,IAAMM,iBAAkBP,KAAD,IAAoBH,OAAOG,KAAP,CAA3C;;AAEA,IAAMiB,gBAA0B,EAAhC;;AAEA,IAAMF,eAAe,CAAC,GAAGG,MAAJ,KAA0BA,OAAOC,MAAP,CAC7C,CAACC,GAAD,EAAMC,GAAN,KAAcD,IAAId,MAAJ,CAAWC,eAAec,GAAf,CAAX,CAD+B,EAE7CJ,aAF6C,CAA/C","file":"scoped-emitter.js","sourcesContent":["//@flow\n\nimport EventEmitter, { type EventEmitterType, type EventID, type Listener } from 'eventemitter2'\nimport arrify from 'Util/arrify'\n\nexport default class ScopedEmitter {\n  scope: string[]\n  root: EventEmitterType\n  constructor(scope: EventID, parent: EventEmitterType): ScopedEmitter & EventEmitterType {\n    if (parent instanceof ScopedEmitter) {\n      this.root = parent.root\n      this.scope = combineScope(parent.scope, scope)\n    } else {\n      this.scope = normalizeScope(scope)\n      this.root = parent\n    }\n    /*:: return this */\n  }\n\n  on = (event: EventID, listener: Listener) => {\n    const fullEvent = this.scope.concat(normalizeScope(event))\n    return this.root.on(fullEvent, listener)\n  }\n  off = (event: string, listener: Listener) => {\n    const fullEvent = [...this.scope, event].join('.')\n    return this.root.off(fullEvent, listener)\n  }\n  emit = (event: EventID, ...values: any[]) => {\n    const fullEvent = this.scope.concat(normalizeScope(event))\n    return this.root.emit(fullEvent, ...values)\n  }\n  addEventListener = this.on\n  removeEventListener = this.off\n}\n\nexport function scopedEmitter(scope: EventID, parent: EventEmitterType | EventEmitter | ScopedEmitter) {\n  return new ScopedEmitter(scope, parent)\n}\n\nconst normalizeScope = (scope: EventID) => arrify(scope)\n\nconst reduceStarter: string[] = []\n\nconst combineScope = (...scopes: EventID[]) => scopes.reduce(\n  (acc, val) => acc.concat(normalizeScope(val)),\n  reduceStarter\n)\n"]}