{"version":3,"sources":["../../src/event/make-event-stream.js"],"names":["fromEvent","makeEventStream","emitter","name","casted","eventName","Array","isArray","join","eventStream"],"mappings":"AAEA,SAASA,SAAT;;;AAIA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAoD;AACzD,SAAO,UACLC,IADK,EAELC,MAFK,EAEa;AAClB,QAAMC,YAAYC,MAAMC,OAAN,CAAcJ,IAAd,IACdA,KAAKK,IAAL,CAAU,GAAV,CADc,GAEdL,IAFJ;AAGA,QAAIM,oBAAJ;AACA,QAAI,OAAOL,MAAP,KAAkB,UAAtB,EAAkC;AAChCK,oBAAcT,UAAUK,SAAV,EAAqBH,OAArB,CAAd;AACD,KAFD,MAEO;AACLO,oBAAcT,UAAUK,SAAV,EAAqBH,OAArB,CAAd;AACD;AACD,WAAOO,WAAP;AACD,GAbD;AAcD","file":"make-event-stream.js","sourcesContent":["//@flow\n\nimport { fromEvent } from 'most'\nimport type { EventEmitterType } from 'eventemitter2'\n\n\nexport function makeEventStream(emitter: EventEmitterType) {\n  return function<CastType>(\n    name: string[] | string,\n    casted: CastType) {\n    const eventName = Array.isArray(name)\n      ? name.join('.')\n      : name\n    let eventStream\n    if (typeof casted === 'function') {\n      eventStream = fromEvent(eventName, emitter)\n    } else {\n      eventStream = fromEvent(eventName, emitter)\n    }\n    return eventStream\n  }\n}\n"]}