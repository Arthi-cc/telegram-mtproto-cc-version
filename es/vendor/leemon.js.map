{"version":3,"sources":["../../src/vendor/leemon.js"],"names":["bpe","mask","radix","digitsStr","one","int2bigInt","t","Array","ss","s0","s3","s4","s5","s6","s7","T","sa","mr_x1","mr_r","mr_a","eg_v","eg_u","eg_A","eg_B","eg_C","eg_D","primes","pows","s_i","s_i2","s_R","s_rm","s_q","s_n1","s_a","s_r2","s_n","s_b","s_d","s_x1","s_x2","s_aa","rpprb","k","buff","findPrimes","n","i","s","p","ans","millerRabinInt","x","b","length","dup","copyInt_","millerRabin","j","copy_","addInt_","rightShift_","powMod_","equalsInt","equals","squareMod_","bitSize","z","w","expand","randTruePrime","randTruePrime_","trim","randProbPrime","randProbPrimeRounds","divisible","B","randBigInt_","modInt","greater","mod","mod_","addInt","mult","y","mult_","powMod","sub","sub_","add","add_","inverseMod","inverseMod_","multMod","multMod_","c","m","pm","dd","r","zz","recSize","Math","pow","floor","random","carry_","divide_","multInt_","isZero","GCD_","randBigInt","a","GCD","xc","yc","xp","yp","A","C","D","q","sing","qp","linComb_","max","halve_","negative","inverseModInt","inverseModInt_","eGCD_","v","g","leftShift_","greaterShift","shift","kx","ky","y1","y2","subShift_","linCombShift_","addShift_","bits","minSize","ceil","str2bigInt","base","d","kk","parseInt","indexOf","substring","bigInt2str","divInt_","len","ys","k1","k2","kn","np","mont_","ui","ks"],"mappingsmB;;;AAC1B,IAAIC,OAAK,CAAT,C,CAAmB;AACnB,IAAIC,QAAMD,OAAK,CAAf,C,CAAmB;;AAEnB;AACA,IAAIE,YAAU,mGAAd;;AAEA;AACA,KAAKH,MAAI,CAAT,EAAa,KAAIA,MAAI,CAAT,GAAgB,KAAGA,GAA/B,EAAqCA,KAArC,I,CAA8C;AAC9CA,QAAM,CAAN,C,CAA2B;AAC3BC,OAAK,CAAC,KAAGD,GAAJ,IAAS,CAAd,C,CAA2B;AAC3BE,QAAMD,OAAK,CAAX,C,CAA2B;AAC3B,OAAO,IAAIG,MAAIC,WAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAR,C,CAAiC;;AAExC;AACA;AACA,IAAIC,IAAE,IAAIC,KAAJ,CAAU,CAAV,CAAN;AACA,IAAIC,KAAGF,CAAP,C,CAAgB;AAChB,IAAIG,KAAGH,CAAP,C,CAAgB;AAChB;AACA;AACA,IAAII,KAAGJ,CAAP,C,CAAgB;AAChB,IAAIK,KAAGL,CAAP;AAAA,IAAUM,KAAGN,CAAb,C,CAAgB;AAChB,IAAIO,KAAGP,CAAP,C,CAAgB;AAChB,IAAIQ,KAAGR,CAAP,C,CAAgB;AAChB,IAAIS,IAAET,CAAN,C,CAAgB;AAChB,IAAIU,KAAGV,CAAP,C,CAAgB;AAChB,IAAIW,QAAMX,CAAV;AAAA,IAAaY,OAAKZ,CAAlB;AAAA,IAAqBa,OAAKb,CAA1B;AAAA,IAAkE;AAC9Dc,OAAKd,CADT;AAAA,IACYe,OAAKf,CADjB;AAAA,IACoBgB,OAAKhB,CADzB;AAAA,IAC4BiB,OAAKjB,CADjC;AAAA,IACoCkB,OAAKlB,CADzC;AAAA,IAC4CmB,OAAKnB,CADjD,CACkE;AAC9D;;AAFJ;AAAA,IAIMoB,SAAOpB,CAJb;AAAA,IAIgBqB,OAAKrB,CAJrB;AAAA,IAIwBsB,MAAItB,CAJ5B;AAAA,IAI+BuB,OAAKvB,CAJpC;AAAA,IAIuCwB,MAAIxB,CAJ3C;AAAA,IAI8CyB,OAAKzB,CAJnD;AAAA,IAIsD0B,MAAI1B,CAJ1D;AAAA,IAI6D2B,OAAK3B,CAJlE;AAAA,IAKI4B,MAAI5B,CALR;AAAA,IAKW6B,OAAK7B,CALhB;AAAA,IAKmB8B,MAAI9B,CALvB;AAAA,IAK0B+B,MAAI/B,CAL9B;AAAA,IAKiCgC,MAAIhC,CALrC;AAAA,IAKwCiC,OAAKjC,CAL7C;AAAA,IAKgDkC,OAAKlC,CALrD;AAAA,IAKwDmC,OAAKnC,CAL7D;AAAA,IAKgE;;AAE5DoC,QAAMpC,CAPV,C,CAOa;;AAEb;;AAEA,IAAIqC,CAAJ,EAAOC,IAAP;;AAEA;AACA,SAASC,UAAT,CAAoBC,CAApB,EAA+B;AAC7B,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,GAAb;AACAF,MAAE,IAAIzC,KAAJ,CAAUuC,CAAV,CAAF;AACA,OAAKC,IAAE,CAAP,EAAUA,IAAED,CAAZ,EAAeC,GAAf;AACEC,MAAED,CAAF,IAAK,CAAL;AADF,GAEAC,EAAE,CAAF,IAAK,CAAL;AACAC,MAAE,CAAF,CAN6B,CAMrB;AACR,SAAMD,EAAEC,CAAF,IAAKH,CAAX,GAAe;AAAmB;AAChC,SAAKC,IAAEC,EAAEC,CAAF,IAAKD,EAAEC,CAAF,CAAZ,EAAkBF,IAAED,CAApB,EAAuBC,KAAGC,EAAEC,CAAF,CAA1B;AAAgC;AAC9BD,QAAED,CAAF,IAAK,CAAL;AADF,KAEAE;AACAD,MAAEC,CAAF,IAAKD,EAAEC,IAAE,CAAJ,IAAO,CAAZ;AACA,WAAOD,EAAEC,CAAF,IAAKH,CAAL,IAAUE,EAAEA,EAAEC,CAAF,CAAF,CAAjB,EAA0BD,EAAEC,CAAF,GAA1B,IALa,CAKsB;AACpC;AACDC,QAAI,IAAI3C,KAAJ,CAAU0C,CAAV,CAAJ;AACA,OAAKF,IAAE,CAAP,EAAUA,IAAEE,CAAZ,EAAeF,GAAf;AACEG,QAAIH,CAAJ,IAAOC,EAAED,CAAF,CAAP;AADF,GAEA,OAAOG,GAAP;AACD;;AAGD;AACA;AACA,SAASC,cAAT,CAAwBC,CAAxB,EAAkCC,CAAlC,EAA6C;AAC3C,MAAIpC,MAAMqC,MAAN,IAAcF,EAAEE,MAApB,EAA4B;AAC1BrC,YAAMsC,IAAIH,CAAJ,CAAN;AACAlC,WAAKqC,IAAIH,CAAJ,CAAL;AACAjC,WAAKoC,IAAIH,CAAJ,CAAL;AACD;;AAEDI,WAASrC,IAAT,EAAekC,CAAf;AACA,SAAOI,YAAYL,CAAZ,EAAejC,IAAf,CAAP;AACD;;AAED;AACA;AACA,SAASsC,WAAT,CAAqBL,CAArB,EAA+BC,CAA/B,EAAyC;AACvC,MAAIN,CAAJ,EAAOW,CAAP,EAAUf,CAAV,EAAaK,CAAb;;AAEA,MAAI/B,MAAMqC,MAAN,IAAcF,EAAEE,MAApB,EAA4B;AAC1BrC,YAAMsC,IAAIH,CAAJ,CAAN;AACAlC,WAAKqC,IAAIH,CAAJ,CAAL;AACAjC,WAAKoC,IAAIH,CAAJ,CAAL;AACD;;AAEDO,QAAMxC,IAAN,EAAYkC,CAAZ;AACAM,QAAMzC,IAAN,EAAYkC,CAAZ;AACAO,QAAM1C,KAAN,EAAamC,CAAb;;AAEAQ,UAAQ1C,IAAR,EAAc,CAAC,CAAf;AACA0C,UAAQ3C,KAAR,EAAe,CAAC,CAAhB;;AAEA;AACA0B,MAAE,CAAF;AACA,OAAKI,IAAE,CAAP,EAAUA,IAAE7B,KAAKoC,MAAjB,EAAyBP,GAAzB;AACE,SAAKW,IAAE,CAAP,EAAUA,IAAEzD,IAAZ,EAAkByD,MAAI,CAAtB;AACE,UAAIN,EAAEL,CAAF,IAAOW,CAAX,EAAc;AACZV,YAAGL,IAAEzB,KAAKoC,MAAL,GAAYtD,GAAd,GAAoB2C,CAApB,GAAwB,CAA3B;AACAI,YAAE7B,KAAKoC,MAAP;AACAI,YAAEzD,IAAF;AACD,OAJD,MAKE0C;AANJ;AADF,GASA,IAAIK,CAAJ,EACEa,YAAY3C,IAAZ,EAAkB8B,CAAlB;;AAEFc,UAAQ3C,IAAR,EAAcD,IAAd,EAAoBkC,CAApB;;AAEA,MAAI,CAACW,UAAU5C,IAAV,EAAgB,CAAhB,CAAD,IAAuB,CAAC6C,OAAO7C,IAAP,EAAaF,KAAb,CAA5B,EAAiD;AAC/CyC,QAAE,CAAF;AACA;AACA,WAAOA,KAAGV,IAAE,CAAL,IAAU,CAACgB,OAAO7C,IAAP,EAAaF,KAAb,CAAlB,EAAuC;AACrCgD,iBAAW9C,IAAX,EAAiBiC,CAAjB;AACA,UAAIW,UAAU5C,IAAV,EAAgB,CAAhB,CAAJ,EAAwB;AACtB,eAAO,CAAP;AACD;AACDuC;AACD;AACD,QAAI,CAACM,OAAO7C,IAAP,EAAaF,KAAb,CAAL,EAA0B;AACxB,aAAO,CAAP;AACD;AACF;AACD,SAAO,CAAP;AACD;;AAED;AACA,SAASiD,OAAT,CAAiBd,CAAjB,EAA2B;AACzB,MAAIM,CAAJ,EAAOS,CAAP,EAAUC,CAAV;AACA,OAAKV,IAAEN,EAAEE,MAAF,GAAS,CAAhB,EAAoBF,EAAEM,CAAF,KAAM,CAAP,IAAcA,IAAE,CAAnC,EAAuCA,GAAvC;AACA,OAAKS,IAAE,CAAF,EAAKC,IAAEhB,EAAEM,CAAF,CAAZ,EAAkBU,CAAlB,EAAsBA,MAAI,CAAL,EAASD,GAA9B;AACAA,OAAGnE,MAAI0D,CAAP;AACA,SAAOS,CAAP;AACD;;AAED;AACA,SAASE,MAAT,CAAgBjB,CAAhB,EAA0BN,CAA1B,EAAqC;AACnC,MAAII,MAAI7C,WAAW,CAAX,EAAc,CAAC+C,EAAEE,MAAF,GAASR,CAAT,GAAaM,EAAEE,MAAf,GAAwBR,CAAzB,IAA4B9C,GAA1C,EAA+C,CAA/C,CAAR;AACA2D,QAAMT,GAAN,EAAWE,CAAX;AACA,SAAOF,GAAP;AACD;;AAED;AACA,SAASoB,aAAT,CAAuB3B,CAAvB,EAAkC;AAChC,MAAIO,MAAI7C,WAAW,CAAX,EAAcsC,CAAd,EAAiB,CAAjB,CAAR;AACA4B,iBAAerB,GAAf,EAAoBP,CAApB;AACA,SAAO6B,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA,SAASuB,aAAT,CAAuB9B,CAAvB,EAAkC;AAChC,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,CAAvB,CAAP,CADoB,CACc;AAC9C,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,CAAvB,CAAP;AACZ,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,CAAvB,CAAP;AACZ,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,CAAvB,CAAP;AACZ,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,CAAvB,CAAP;AACZ,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,CAAvB,CAAP;AACZ,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,EAAvB,CAAP,CAPoB,CAOe;AAC/C,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,EAAvB,CAAP;AACZ,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,EAAvB,CAAP;AACZ,MAAIA,KAAG,GAAP,EAAY,OAAO+B,oBAAoB/B,CAApB,EAAuB,EAAvB,CAAP;AACA,SAAO+B,oBAAoB/B,CAApB,EAAuB,EAAvB,CAAP,CAXoB,CAWe;AAChD;;AAED;AACA,SAAS+B,mBAAT,CAA6B/B,CAA7B,EAAwCG,CAAxC,EAAmD;AACjD,MAAII,GAAJ,EAASH,CAAT,EAAY4B,SAAZ,EAAuBC,CAAvB;AACAA,MAAE,KAAF,CAFiD,CAEvC;AACV1B,QAAI7C,WAAW,CAAX,EAAcsC,CAAd,EAAiB,CAAjB,CAAJ;;AAEA;;AAEA,MAAIjB,OAAO4B,MAAP,IAAe,CAAnB,EACE5B,SAAOmB,WAAW,KAAX,CAAP,CAR+C,CAQpB;;AAE7B,MAAIH,MAAMY,MAAN,IAAcJ,IAAII,MAAtB,EACEZ,QAAMa,IAAIL,GAAJ,CAAN;;AAEF,WAAS;AAAE;AACT;AACA;AACA;;AAEA2B,gBAAY3B,GAAZ,EAAiBP,CAAjB,EAAoB,CAApB,EALO,CAKiB;AACxBO,QAAI,CAAJ,KAAU,CAAV;AACAyB,gBAAU,CAAV;;AAEA;AACA,SAAK5B,IAAE,CAAP,EAAWA,IAAErB,OAAO4B,MAAV,IAAsB5B,OAAOqB,CAAP,KAAW6B,CAA3C,EAA+C7B,GAA/C;AACE,UAAI+B,OAAO5B,GAAP,EAAYxB,OAAOqB,CAAP,CAAZ,KAAwB,CAAxB,IAA6B,CAACgB,UAAUb,GAAV,EAAexB,OAAOqB,CAAP,CAAf,CAAlC,EAA6D;AAC3D4B,oBAAU,CAAV;AACA;AACD;AAJH,KAVO,CAgBP;;AAEA;AACA,SAAK5B,IAAE,CAAP,EAAUA,IAAED,CAAF,IAAO,CAAC6B,SAAlB,EAA6B5B,GAA7B,EAAkC;AAChC8B,kBAAYnC,KAAZ,EAAmBC,CAAnB,EAAsB,CAAtB;AACA,aAAO,CAACoC,QAAQ7B,GAAR,EAAaR,KAAb,CAAR;AAA6B;AAC3BmC,oBAAYnC,KAAZ,EAAmBC,CAAnB,EAAsB,CAAtB;AADF,OAEA,IAAI,CAACc,YAAYP,GAAZ,EAAiBR,KAAjB,CAAL,EACEiC,YAAU,CAAV;AACH;;AAED,QAAI,CAACA,SAAL,EACE,OAAOzB,GAAP;AACH;AACF;;AAED;AACA,SAAS8B,GAAT,CAAa5B,CAAb,EAAuBN,CAAvB,EAAiC;AAC/B,MAAII,MAAIK,IAAIH,CAAJ,CAAR;AACA6B,OAAK/B,GAAL,EAAUJ,CAAV;AACA,SAAO0B,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA,SAASgC,MAAT,CAAgB9B,CAAhB,EAA0BN,CAA1B,EAAqC;AACnC,MAAII,MAAImB,OAAOjB,CAAP,EAAUA,EAAEE,MAAF,GAAS,CAAnB,CAAR;AACAM,UAAQV,GAAR,EAAaJ,CAAb;AACA,SAAO0B,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA,SAASiC,IAAT,CAAc/B,CAAd,EAAwBgC,CAAxB,EAAkC;AAChC,MAAIlC,MAAImB,OAAOjB,CAAP,EAAUA,EAAEE,MAAF,GAAS8B,EAAE9B,MAArB,CAAR;AACA+B,QAAMnC,GAAN,EAAWkC,CAAX;AACA,SAAOZ,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA,OAAO,SAASoC,MAAT,CAAgBlC,CAAhB,EAA0BgC,CAA1B,EAAoCtC,CAApC,EAA8C;AACnD,MAAII,MAAImB,OAAOjB,CAAP,EAAUN,EAAEQ,MAAZ,CAAR;AACAQ,UAAQZ,GAAR,EAAasB,KAAKY,CAAL,EAAQ,CAAR,CAAb,EAAyBZ,KAAK1B,CAAL,EAAQ,CAAR,CAAzB,EAFmD,CAEZ;AACvC,SAAO0B,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA,OAAO,SAASqC,GAAT,CAAanC,CAAb,EAAuBgC,CAAvB,EAAiC;AACtC,MAAIlC,MAAImB,OAAOjB,CAAP,EAAWA,EAAEE,MAAF,GAAS8B,EAAE9B,MAAX,GAAoBF,EAAEE,MAAF,GAAS,CAA7B,GAAiC8B,EAAE9B,MAAF,GAAS,CAArD,CAAR;AACAkC,OAAKtC,GAAL,EAAUkC,CAAV;AACA,SAAOZ,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA,SAASuC,GAAT,CAAarC,CAAb,EAAuBgC,CAAvB,EAAiC;AAC/B,MAAIlC,MAAImB,OAAOjB,CAAP,EAAWA,EAAEE,MAAF,GAAS8B,EAAE9B,MAAX,GAAoBF,EAAEE,MAAF,GAAS,CAA7B,GAAiC8B,EAAE9B,MAAF,GAAS,CAArD,CAAR;AACAoC,OAAKxC,GAAL,EAAUkC,CAAV;AACA,SAAOZ,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA,SAASyC,UAAT,CAAoBvC,CAApB,EAA8BN,CAA9B,EAAwC;AACtC,MAAII,MAAImB,OAAOjB,CAAP,EAAUN,EAAEQ,MAAZ,CAAR;AACA,MAAIN,IACF4C,YAAY1C,GAAZ,EAAiBJ,CAAjB,CADF;;AAEA,SAAOE,IAAIwB,KAAKtB,GAAL,EAAU,CAAV,CAAJ,GAAmB,IAA1B;AACD;;AAED;AACA,SAAS2C,OAAT,CAAiBzC,CAAjB,EAA2BgC,CAA3B,EAAqCtC,CAArC,EAA+C;AAC7C,MAAII,MAAImB,OAAOjB,CAAP,EAAUN,EAAEQ,MAAZ,CAAR;AACAwC,WAAS5C,GAAT,EAAckC,CAAd,EAAiBtC,CAAjB;AACA,SAAO0B,KAAKtB,GAAL,EAAU,CAAV,CAAP;AACD;;AAED;AACA;AACA,SAASqB,cAAT,CAAwBrB,GAAxB,EAAoCP,CAApC,EAA+C;AAC7C,MAAIoD,CAAJ,EAAOC,CAAP,EAAUC,EAAV,EAAcC,EAAd,EAAkBxC,CAAlB,EAAqByC,CAArB,EAAwBvB,CAAxB,EAA2BD,SAA3B,EAAsCR,CAAtC,EAAyCiC,EAAzC,EAA6CC,OAA7C;AACA,MAAIjC,CAAJ;AACA,MAAI1C,OAAO4B,MAAP,IAAe,CAAnB,EACE5B,SAAOmB,WAAW,KAAX,CAAP,CAJ2C,CAIhB;;AAE7B,MAAIlB,KAAK2B,MAAL,IAAa,CAAjB,EAAoB;AAClB3B,WAAK,IAAIpB,KAAJ,CAAU,GAAV,CAAL;AACA,SAAKmD,IAAE,CAAP,EAAUA,IAAE,GAAZ,EAAiBA,GAAjB,EAAsB;AACpB/B,WAAK+B,CAAL,IAAQ4C,KAAKC,GAAL,CAAS,CAAT,EAAY7C,IAAE,IAAF,GAAO,EAAnB,CAAR;AACD;AACF;;AAED;AACAqC,MAAE,GAAF,CAd6C,CAcrC;AACRC,MAAE,EAAF,CAf6C,CAerC;AACS;;AAEjB,MAAInE,KAAKyB,MAAL,IAAaJ,IAAII,MAArB,EAA6B;AAC3BzB,WAAK0B,IAAIL,GAAJ,CAAL;AACApB,UAAKyB,IAAIL,GAAJ,CAAL;AACAjB,WAAKsB,IAAIL,GAAJ,CAAL;AACAf,WAAKoB,IAAIL,GAAJ,CAAL;AACAZ,UAAKiB,IAAIL,GAAJ,CAAL;AACAX,WAAKgB,IAAIL,GAAJ,CAAL,CAN2B,CAMZ;AACfV,WAAKe,IAAIL,GAAJ,CAAL;AACAb,UAAKkB,IAAIL,GAAJ,CAAL;AACAd,UAAKmB,IAAIL,GAAJ,CAAL;AACAtB,UAAK2B,IAAIL,GAAJ,CAAL;AACAnB,WAAKwB,IAAIL,GAAJ,CAAL;AACAlB,UAAKuB,IAAIL,GAAJ,CAAL;AACAhB,UAAKqB,IAAIL,GAAJ,CAAL;AACAT,WAAKc,IAAIL,GAAJ,CAAL;AACD;;AAED,MAAIP,KAnBS,EAmBb,EAAmB;AAAG;AACpBsD,SAAG,CAAC,MAAKtD,IAAE,CAAH,IAAO,CAAX,CAAD,IAAgB,CAAnB,CADiB,CACK;AACtBa,aAASN,GAAT,EAAc,CAAd;AACA,SAAKgD,KAAG,CAAR,EAAWA,EAAX,GAAgB;AACdA,WAAG,CAAH;AACAhD,UAAI,CAAJ,IAAQ,IAAK,KAAIP,IAAE,CAAX,GAAiB2D,KAAKE,KAAL,CAAWF,KAAKG,MAAL,MAAe,KAAG9D,CAAlB,CAAX,CAAzB,CAFc,CAE8C;AAC5D,WAAKe,IAAE,CAAP,EAAWA,IAAEhC,OAAO4B,MAAV,IAAsB,CAAC5B,OAAOgC,CAAP,IAAUuC,EAAX,KAAgBvE,OAAOgC,CAAP,CAAhD,EAA4DA,GAA5D,EAAiE;AAAE;AACjE,YAAI,KAAIR,IAAI,CAAJ,IAAOxB,OAAOgC,CAAP,CAAf,EAA2B;AACzBwC,eAAG,CAAH;AACA;AACD;AACF;AACF;AACDQ,WAAOxD,GAAP;AACA;AACD;;AAED0B,MAAEmB,IAAEpD,CAAF,GAAIA,CAAN,CApD6C,CAoDjC;AACZ,MAAIA,IAAE,IAAEqD,CAAR,EAAY;AACV,SAAKG,IAAE,CAAP,EAAUxD,IAAEA,IAAEwD,CAAJ,IAAOH,CAAjB;AACEG,UAAExE,KAAK2E,KAAKE,KAAL,CAAWF,KAAKG,MAAL,KAAc,GAAzB,CAAL,CAAF;AADF,KADF,CAE6C;AAF7C,OAIEN,IAAE,EAAF;;AAEF;;AAEAE,YAAQC,KAAKE,KAAL,CAAWL,IAAExD,CAAb,IAAgB,CAAxB;;AAEA4B,iBAAevC,GAAf,EAAoBqE,OAApB;AACA7C,WAAS3B,IAAT,EAAe,CAAf;AACAA,OAAKyE,KAAKE,KAAL,CAAW,CAAC7D,IAAE,CAAH,IAAM3C,GAAjB,CAAL,KAAgC,KAAI,CAAC2C,IAAE,CAAH,IAAM3C,GAA1C,CAjE6C,CAiEM;AACnD2G,UAAQ9E,IAAR,EAAcG,GAAd,EAAmBJ,GAAnB,EAAwBG,IAAxB,EAlE6C,CAkES;;AAEtDoC,MAAED,QAAQtC,GAAR,CAAF;;AAEA,WAAS;AACP,aAAS;AAAG;AACViD,kBAAY/C,GAAZ,EAAiBqC,CAAjB,EAAoB,CAApB;AACA,UAAIY,QAAQnD,GAAR,EAAaE,GAAb,CAAJ,EACE;AACH,KALM,CAKU;AACjB8B,YAAQ9B,GAAR,EAAa,CAAb,EANO,CAMW;AAClB4D,SAAK5D,GAAL,EAAUF,GAAV,EAPO,CAOW;;AAElB+B,UAAMvB,GAAN,EAAWJ,GAAX;AACAqD,UAAMjD,GAAN,EAAWN,GAAX;AACA8E,aAASxE,GAAT,EAAc,CAAd;AACAwB,YAAQxB,GAAR,EAAa,CAAb,EAZO,CAYa;;AAEpBuB,UAAMxB,IAAN,EAAYL,GAAZ;AACA8E,aAASzE,IAAT,EAAe,CAAf,EAfO,CAea;;AAEpB;AACA,SAAKwC,YAAU,CAAV,EAAajB,IAAE,CAApB,EAAwBA,IAAEhC,OAAO4B,MAAV,IAAsB5B,OAAOgC,CAAP,IAAUkB,CAAvD,EAA2DlB,GAA3D;AACE,UAAIoB,OAAO1C,GAAP,EAAYV,OAAOgC,CAAP,CAAZ,KAAwB,CAAxB,IAA6B,CAACK,UAAU3B,GAAV,EAAeV,OAAOgC,CAAP,CAAf,CAAlC,EAA6D;AAC3DiB,oBAAU,CAAV;AACA;AACD;AAJH,KAMA,IAAI,CAACA,SAAL,EAAmB;AACjB,UAAI,CAACxB,eAAef,GAAf,EAAoB,CAApB,CAAL,EAA6B;AAC3BuC,oBAAU,CAAV;;AAEJ,QAAI,CAACA,SAAL,EAAgB;AAAG;AACjBf,cAAQxB,GAAR,EAAa,CAAC,CAAd;AACA,WAAKsB,IAAEtB,IAAIkB,MAAJ,GAAW,CAAlB,EAAsBlB,IAAIsB,CAAJ,KAAQ,CAAT,IAAgBA,IAAE,CAAvC,EAA2CA,GAA3C,IAFc,CAEoC;AAClD,WAAK0C,KAAG,CAAH,EAAMhC,IAAEhC,IAAIsB,CAAJ,CAAb,EAAqBU,CAArB,EAAyBA,MAAI,CAAL,EAASgC,IAAjC;AACAA,YAAIpG,MAAI0D,CAAR,CAJc,CAIyB;AACvC,eAAS;AAAG;AACVmB,oBAAY3C,GAAZ,EAAiBkE,EAAjB,EAAqB,CAArB;AACA,YAAIrB,QAAQ3C,GAAR,EAAaF,GAAb,CAAJ,EACE;AACH,OATa,CASG;AACjB0B,cAAQxB,GAAR,EAAa,CAAb,EAVc,CAUI;AAClBwB,cAAQ1B,GAAR,EAAa,CAAb,EAXc,CAWI;AAClByB,YAAMtB,GAAN,EAAWH,GAAX;AACAyB,YAAM1B,IAAN,EAAYG,GAAZ;AACAwB,cAAQ3B,IAAR,EAAc,CAAC,CAAf;AACA6B,cAAQzB,GAAR,EAAaJ,IAAb,EAAmBG,GAAnB,EAfc,CAea;AAC3BwB,cAAQvB,GAAR,EAAa,CAAC,CAAd;AACA,UAAIwE,OAAOxE,GAAP,CAAJ,EAAiB;AACfsB,cAAMtB,GAAN,EAAWH,GAAX;AACA4B,gBAAQzB,GAAR,EAAaF,IAAb,EAAmBC,GAAnB;AACAwB,gBAAQvB,GAAR,EAAa,CAAC,CAAd;AACAsB,cAAMlB,IAAN,EAAYL,GAAZ;AACAuB,cAAMrB,GAAN,EAAWD,GAAX;AACAyE,aAAKxE,GAAL,EAAUF,GAAV,EANe,CAME;AACjB,YAAI2B,UAAUzB,GAAV,EAAe,CAAf,CAAJ,EAAuB;AACrBqB,gBAAMT,GAAN,EAAWT,IAAX;AACA,iBAFqB,CAET;AACb;AACF;AACF;AACF;AACF;;AAED;AACA,SAASsE,UAAT,CAAoBjE,CAApB,EAA+BE,CAA/B,EAA0C;AACxC,MAAIgE,CAAJ,EAAO3D,CAAP;AACA2D,MAAEV,KAAKE,KAAL,CAAW,CAAC1D,IAAE,CAAH,IAAM9C,GAAjB,IAAsB,CAAxB,CAFwC,CAEb;AAC3BqD,MAAEhD,WAAW,CAAX,EAAc,CAAd,EAAiB2G,CAAjB,CAAF;AACAnC,cAAYxB,CAAZ,EAAeP,CAAf,EAAkBE,CAAlB;AACA,SAAOK,CAAP;AACD;;AAED;AACA;AACA,SAASwB,WAAT,CAAqBxB,CAArB,EAA+BP,CAA/B,EAA0CE,CAA1C,EAAqD;AACnD,MAAID,CAAJ,EAAOiE,CAAP;AACA,OAAKjE,IAAE,CAAP,EAAUA,IAAEM,EAAEC,MAAd,EAAsBP,GAAtB;AACEM,MAAEN,CAAF,IAAK,CAAL;AADF,GAEAiE,IAAEV,KAAKE,KAAL,CAAW,CAAC1D,IAAE,CAAH,IAAM9C,GAAjB,IAAsB,CAAxB,CAJmD,CAIxB;AAC3B,OAAK+C,IAAE,CAAP,EAAUA,IAAEiE,CAAZ,EAAejE,GAAf,EAAoB;AAClBM,MAAEN,CAAF,IAAKuD,KAAKE,KAAL,CAAWF,KAAKG,MAAL,MAAe,KAAIzG,MAAI,CAAvB,CAAX,CAAL;AACD;AACDqD,IAAE2D,IAAE,CAAJ,KAAU,CAAC,KAAI,CAAClE,IAAE,CAAH,IAAM9C,GAAX,IAAiB,CAA3B;AACA,MAAIgD,KAAG,CAAP,EACEK,EAAE2D,IAAE,CAAJ,KAAW,KAAI,CAAClE,IAAE,CAAH,IAAM9C,GAArB;AACH;;AAED;AACA,SAASiH,GAAT,CAAa7D,CAAb,EAAuBgC,CAAvB,EAAiC;AAC/B,MAAI8B,EAAJ,EAAQC,EAAR;AACAD,OAAG3D,IAAIH,CAAJ,CAAH;AACA+D,OAAG5D,IAAI6B,CAAJ,CAAH;AACA0B,OAAKI,EAAL,EAASC,EAAT;AACA,SAAOD,EAAP;AACD;;AAED;AACA;AACA,SAASJ,IAAT,CAAc1D,CAAd,EAAwBgC,CAAxB,EAAkC;AAChC,MAAIrC,CAAJ,EAAOqE,EAAP,EAAWC,EAAX,EAAeC,CAAf,EAAkB1C,CAAlB,EAAqB2C,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,IAA9B;AACA,MAAIC,EAAJ;AACA,MAAI5G,EAAEuC,MAAF,IAAUF,EAAEE,MAAhB,EACEvC,IAAEwC,IAAIH,CAAJ,CAAF;;AAEFsE,SAAK,CAAL;AACA,SAAOA,IAAP,EAAa;AAAE;AACbA,WAAK,CAAL;AACA,SAAK3E,IAAE,CAAP,EAAUA,IAAEqC,EAAE9B,MAAd,EAAsBP,GAAtB;AAA2B;AACzB,UAAIqC,EAAErC,CAAF,CAAJ,EAAU;AACR2E,eAAK,CAAL;AACA;AACD;AAJH,KAKA,IAAI,CAACA,IAAL,EAAW,MAPA,CAOO;;AAElB,SAAK3E,IAAEK,EAAEE,MAAT,EAAiB,CAACF,EAAEL,CAAF,CAAD,IAASA,KAAG,CAA7B,EAAgCA,GAAhC,IATW,CAS4B;AACvCqE,SAAGhE,EAAEL,CAAF,CAAH;AACAsE,SAAGjC,EAAErC,CAAF,CAAH;AACAuE,QAAE,CAAF,CAAK1C,IAAE,CAAF,CAAK2C,IAAE,CAAF,CAAKC,IAAE,CAAF;AACf,WAAQH,KAAGE,CAAJ,IAAWF,KAAGG,CAArB,EAAyB;AACvBC,UAAGnB,KAAKE,KAAL,CAAW,CAACY,KAAGE,CAAJ,KAAQD,KAAGE,CAAX,CAAX,CAAH;AACAI,WAAGrB,KAAKE,KAAL,CAAW,CAACY,KAAGxC,CAAJ,KAAQyC,KAAGG,CAAX,CAAX,CAAH;AACA,UAAIC,KAAGE,EAAP,EACE;AACFrH,UAAGgH,IAAEG,IAAEF,CAAP,CAAYD,IAAEC,CAAF,CAAOA,IAAEjH,CAAF,CALI,CAKI;AAC3BA,UAAGsE,IAAE6C,IAAED,CAAP,CAAY5C,IAAE4C,CAAF,CAAOA,IAAElH,CAAF;AACnBA,UAAE8G,KAAGK,IAAEJ,EAAP,CAAWD,KAAGC,EAAH,CAAOA,KAAG/G,CAAH;AACnB;AACD,QAAIsE,CAAJ,EAAO;AACLjB,YAAM5C,CAAN,EAASqC,CAAT;AACAwE,eAASxE,CAAT,EAAYgC,CAAZ,EAAekC,CAAf,EAAkB1C,CAAlB,EAFK,CAEiB;AACtBgD,eAASxC,CAAT,EAAYrE,CAAZ,EAAeyG,CAAf,EAAkBD,CAAlB,EAHK,CAGiB;AACvB,KAJD,MAIO;AACLtC,WAAK7B,CAAL,EAAQgC,CAAR;AACAzB,YAAM5C,CAAN,EAASqC,CAAT;AACAO,YAAMP,CAAN,EAASgC,CAAT;AACAzB,YAAMyB,CAAN,EAASrE,CAAT;AACD;AACF;AACD,MAAIqE,EAAE,CAAF,KAAM,CAAV,EACE;AACF9E,MAAEwE,OAAO1B,CAAP,EAAUgC,EAAE,CAAF,CAAV,CAAF;AACA5B,WAASJ,CAAT,EAAYgC,EAAE,CAAF,CAAZ;AACAA,IAAE,CAAF,IAAK9E,CAAL;AACA,SAAO8E,EAAE,CAAF,CAAP,EAAa;AACXhC,MAAE,CAAF,KAAMgC,EAAE,CAAF,CAAN;AACA9E,QAAE8C,EAAE,CAAF,CAAF,CAAQA,EAAE,CAAF,IAAKgC,EAAE,CAAF,CAAL,CAAWA,EAAE,CAAF,IAAK9E,CAAL;AACpB;AACF;;AAED;AACA;AACA;AACA,SAASsF,WAAT,CAAqBxC,CAArB,EAA+BN,CAA/B,EAAyC;AACvC,MAAIH,IAAE,IAAE,IAAE2D,KAAKuB,GAAL,CAASzE,EAAEE,MAAX,EAAmBR,EAAEQ,MAArB,CAAV;;AAEA,MAAI,EAAEF,EAAE,CAAF,IAAK,CAAP,KAAc,EAAEN,EAAE,CAAF,IAAK,CAAP,CAAlB,EAA6B;AAAG;AAC9BU,aAASJ,CAAT,EAAY,CAAZ;AACA,WAAO,CAAP;AACD;;AAED,MAAI/B,KAAKiC,MAAL,IAAaX,CAAjB,EAAoB;AAClBtB,WAAK,IAAId,KAAJ,CAAUoC,CAAV,CAAL;AACAvB,WAAK,IAAIb,KAAJ,CAAUoC,CAAV,CAAL;AACArB,WAAK,IAAIf,KAAJ,CAAUoC,CAAV,CAAL;AACApB,WAAK,IAAIhB,KAAJ,CAAUoC,CAAV,CAAL;AACAnB,WAAK,IAAIjB,KAAJ,CAAUoC,CAAV,CAAL;AACAlB,WAAK,IAAIlB,KAAJ,CAAUoC,CAAV,CAAL;AACD;;AAEDgB,QAAMtC,IAAN,EAAY+B,CAAZ;AACAO,QAAMvC,IAAN,EAAY0B,CAAZ;AACAU,WAASlC,IAAT,EAAe,CAAf;AACAkC,WAASjC,IAAT,EAAe,CAAf;AACAiC,WAAShC,IAAT,EAAe,CAAf;AACAgC,WAAS/B,IAAT,EAAe,CAAf;AACA,WAAS;AACP,WAAO,EAAEJ,KAAK,CAAL,IAAQ,CAAV,CAAP,EAAqB;AAAG;AACtByG,aAAOzG,IAAP;AACA,UAAI,EAAEC,KAAK,CAAL,IAAQ,CAAV,KAAgB,EAAEC,KAAK,CAAL,IAAQ,CAAV,CAApB,EAAkC;AAAE;AAClCuG,eAAOxG,IAAP;AACAwG,eAAOvG,IAAP;AACD,OAHD,MAGO;AACLmE,aAAKpE,IAAL,EAAWwB,CAAX,EAAgBgF,OAAOxG,IAAP;AAChBkE,aAAKjE,IAAL,EAAW6B,CAAX,EAAgB0E,OAAOvG,IAAP;AACjB;AACF;;AAED,WAAO,EAAEH,KAAK,CAAL,IAAQ,CAAV,CAAP,EAAqB;AAAG;AACtB0G,aAAO1G,IAAP;AACA,UAAI,EAAEI,KAAK,CAAL,IAAQ,CAAV,KAAgB,EAAEC,KAAK,CAAL,IAAQ,CAAV,CAApB,EAAkC;AAAE;AAClCqG,eAAOtG,IAAP;AACAsG,eAAOrG,IAAP;AACD,OAHD,MAGO;AACLiE,aAAKlE,IAAL,EAAWsB,CAAX,EAAgBgF,OAAOtG,IAAP;AAChBgE,aAAK/D,IAAL,EAAW2B,CAAX,EAAgB0E,OAAOrG,IAAP;AACjB;AACF;;AAED,QAAI,CAACsD,QAAQ3D,IAAR,EAAcC,IAAd,CAAL,EAA0B;AAAE;AAC1BmE,WAAKnE,IAAL,EAAWD,IAAX;AACAoE,WAAKlE,IAAL,EAAWE,IAAX;AACAgE,WAAKjE,IAAL,EAAWE,IAAX;AACD,KAJD,MAIO;AAAoB;AACzB+D,WAAKpE,IAAL,EAAWC,IAAX;AACAmE,WAAKhE,IAAL,EAAWF,IAAX;AACAkE,WAAK/D,IAAL,EAAWF,IAAX;AACD;;AAED,QAAIwC,UAAU1C,IAAV,EAAgB,CAAhB,CAAJ,EAAwB;AACtB,aAAO0G,SAASvG,IAAT,CAAP;AAAuB;AACrBkE,aAAKlE,IAAL,EAAWsB,CAAX;AADF,OAEAa,MAAMP,CAAN,EAAS5B,IAAT;;AAEA,UAAI,CAACuC,UAAU3C,IAAV,EAAgB,CAAhB,CAAL,EAAyB;AAAE;AACzBoC,iBAASJ,CAAT,EAAY,CAAZ;AACA,eAAO,CAAP;AACD;AACD,aAAO,CAAP;AACD;AACF;AACF;;AAED;AACA,SAAS4E,aAAT,CAAuB5E,CAAvB,EAAkCN,CAAlC,EAAqD;AACnD,MAAIkE,IAAE,CAAN;AAAA,MAAS3D,IAAE,CAAX;AACA,WAAS;AACP,QAAID,KAAG,CAAP,EAAU,OAAO4D,CAAP;AACV,QAAI5D,KAAG,CAAP,EAAU,OAAO,CAAP;AACVC,SAAG2D,IAAEV,KAAKE,KAAL,CAAW1D,IAAEM,CAAb,CAAL;AACA;AACAN,SAAGM,CAAH;;AAEA,QAAIN,KAAG,CAAP,EAAU,OAAOO,CAAP,CAPH,CAOa;AACpB,QAAIP,KAAG,CAAP,EAAU,OAAO,CAAP;AACVkE,SAAG3D,IAAEiD,KAAKE,KAAL,CAAWpD,IAAEN,CAAb,CAAL;AACA;AACAM,SAAGN,CAAH;AACD;AACD;AACA,SAAO,CAAP;AACD;;AAED;AACA,SAASmF,cAAT,CAAwB7E,CAAxB,EAAmCN,CAAnC,EAA8C;AAC3C,SAAOkF,cAAc5E,CAAd,EAAiBN,CAAjB,CAAP;AACF;;AAGD;AACA;AACA;AACA,OAAO,SAASoF,KAAT,CAAe9E,CAAf,EAAyBgC,CAAzB,EAAmC+C,CAAnC,EAA6CnB,CAA7C,EAAuD3D,CAAvD,EAAiE;AACtE,MAAI+E,IAAE,CAAN;AACA,MAAIzF,IAAE2D,KAAKuB,GAAL,CAASzE,EAAEE,MAAX,EAAmB8B,EAAE9B,MAArB,CAAN;AACA,MAAIjC,KAAKiC,MAAL,IAAaX,CAAjB,EAAoB;AAClBtB,WAAK,IAAId,KAAJ,CAAUoC,CAAV,CAAL;AACArB,WAAK,IAAIf,KAAJ,CAAUoC,CAAV,CAAL;AACApB,WAAK,IAAIhB,KAAJ,CAAUoC,CAAV,CAAL;AACAnB,WAAK,IAAIjB,KAAJ,CAAUoC,CAAV,CAAL;AACAlB,WAAK,IAAIlB,KAAJ,CAAUoC,CAAV,CAAL;AACD;AACD,SAAO,EAAES,EAAE,CAAF,IAAK,CAAP,KAAc,EAAEgC,EAAE,CAAF,IAAK,CAAP,CAArB,EAAgC;AAAG;AACjC0C,WAAO1E,CAAP;AACA0E,WAAO1C,CAAP;AACAgD;AACD;AACDzE,QAAMtC,IAAN,EAAY+B,CAAZ;AACAO,QAAMwE,CAAN,EAAS/C,CAAT;AACA5B,WAASlC,IAAT,EAAe,CAAf;AACAkC,WAASjC,IAAT,EAAe,CAAf;AACAiC,WAAShC,IAAT,EAAe,CAAf;AACAgC,WAAS/B,IAAT,EAAe,CAAf;AACA,WAAS;AACP,WAAO,EAAEJ,KAAK,CAAL,IAAQ,CAAV,CAAP,EAAqB;AAAG;AACtByG,aAAOzG,IAAP;AACA,UAAI,EAAEC,KAAK,CAAL,IAAQ,CAAV,KAAgB,EAAEC,KAAK,CAAL,IAAQ,CAAV,CAApB,EAAkC;AAAE;AAClCuG,eAAOxG,IAAP;AACAwG,eAAOvG,IAAP;AACD,OAHD,MAGO;AACLmE,aAAKpE,IAAL,EAAW8D,CAAX,EAAgB0C,OAAOxG,IAAP;AAChBkE,aAAKjE,IAAL,EAAW6B,CAAX,EAAgB0E,OAAOvG,IAAP;AACjB;AACF;;AAED,WAAO,EAAE4G,EAAE,CAAF,IAAK,CAAP,CAAP,EAAkB;AAAG;AACnBL,aAAOK,CAAP;AACA,UAAI,EAAE3G,KAAK,CAAL,IAAQ,CAAV,KAAgB,EAAEC,KAAK,CAAL,IAAQ,CAAV,CAApB,EAAkC;AAAE;AAClCqG,eAAOtG,IAAP;AACAsG,eAAOrG,IAAP;AACD,OAHD,MAGO;AACLiE,aAAKlE,IAAL,EAAW4D,CAAX,EAAgB0C,OAAOtG,IAAP;AAChBgE,aAAK/D,IAAL,EAAW2B,CAAX,EAAgB0E,OAAOrG,IAAP;AACjB;AACF;;AAED,QAAI,CAACsD,QAAQoD,CAAR,EAAW9G,IAAX,CAAL,EAAuB;AAAE;AACvBmE,WAAKnE,IAAL,EAAW8G,CAAX;AACA3C,WAAKlE,IAAL,EAAWE,IAAX;AACAgE,WAAKjE,IAAL,EAAWE,IAAX;AACD,KAJD,MAIO;AAAiB;AACtB+D,WAAK2C,CAAL,EAAQ9G,IAAR;AACAmE,WAAKhE,IAAL,EAAWF,IAAX;AACAkE,WAAK/D,IAAL,EAAWF,IAAX;AACD;AACD,QAAIwC,UAAU1C,IAAV,EAAgB,CAAhB,CAAJ,EAAwB;AACtB,aAAO0G,SAASvG,IAAT,CAAP,EAAuB;AAAI;AACzBkE,aAAKlE,IAAL,EAAW4D,CAAX;AACAI,aAAK/D,IAAL,EAAW2B,CAAX;AACD;AACDwD,eAASnF,IAAT,EAAe,CAAC,CAAhB,EALsB,CAKD;AACrBkC,YAAMqD,CAAN,EAASxF,IAAT;AACAmC,YAAMN,CAAN,EAAS5B,IAAT;AACA4G,iBAAWF,CAAX,EAAcC,CAAd;AACA;AACD;AACF;AACF;;AAGD;AACA,SAASL,QAAT,CAAkB3E,CAAlB,EAA4B;AAC1B,SAASA,EAAEA,EAAEE,MAAF,GAAS,CAAX,KAAgBtD,MAAI,CAArB,GAAyB,CAAjC;AACD;;AAGD;AACA;AACA;AACA,SAASsI,YAAT,CAAsBlF,CAAtB,EAAgCgC,CAAhC,EAA0CmD,KAA1C,EAAyD;AACvD,MAAIxF,CAAJ;AAAA,MAAOyF,KAAGpF,EAAEE,MAAZ;AAAA,MAAoBmF,KAAGrD,EAAE9B,MAAzB;AACAX,MAAI6F,KAAGD,KAAJ,GAAWE,EAAZ,GAAmBD,KAAGD,KAAtB,GAA+BE,EAAjC;AACA,OAAK1F,IAAE0F,KAAG,CAAH,GAAKF,KAAZ,EAAmBxF,IAAEyF,EAAF,IAAQzF,KAAG,CAA9B,EAAiCA,GAAjC;AACE,QAAIK,EAAEL,CAAF,IAAK,CAAT,EACE,OAAO,CAAP;AAFJ,GAHuD,CAKzC;AACd,OAAKA,IAAEyF,KAAG,CAAH,GAAKD,KAAZ,EAAmBxF,IAAE0F,EAArB,EAAyB1F,GAAzB;AACE,QAAIqC,EAAErC,CAAF,IAAK,CAAT,EACE,OAAO,CAAP;AAFJ,GANuD,CAQzC;AACd,OAAKA,IAAEJ,IAAE,CAAT,EAAYI,KAAGwF,KAAf,EAAsBxF,GAAtB;AACE,QAASK,EAAEL,IAAEwF,KAAJ,IAAWnD,EAAErC,CAAF,CAApB,EAA0B,OAAO,CAAP,CAA1B,KACK,IAAIK,EAAEL,IAAEwF,KAAJ,IAAWnD,EAAErC,CAAF,CAAf,EAAqB,OAAO,CAAP;AAF5B,GAGA,OAAO,CAAP;AACD;;AAED;AACA,OAAO,SAASgC,OAAT,CAAiB3B,CAAjB,EAA2BgC,CAA3B,EAAqC;AAC1C,MAAIrC,CAAJ;AACA,MAAIJ,IAAGS,EAAEE,MAAF,GAAS8B,EAAE9B,MAAZ,GAAsBF,EAAEE,MAAxB,GAAiC8B,EAAE9B,MAAzC;;AAEA,OAAKP,IAAEK,EAAEE,MAAT,EAAiBP,IAAEqC,EAAE9B,MAArB,EAA6BP,GAA7B;AACE,QAAIqC,EAAErC,CAAF,CAAJ,EACE,OAAO,CAAP;AAFJ,GAJ0C,CAM3B;;AAEf,OAAKA,IAAEqC,EAAE9B,MAAT,EAAiBP,IAAEK,EAAEE,MAArB,EAA6BP,GAA7B;AACE,QAAIK,EAAEL,CAAF,CAAJ,EACE,OAAO,CAAP;AAFJ,GAR0C,CAU3B;;AAEf,OAAKA,IAAEJ,IAAE,CAAT,EAAYI,KAAG,CAAf,EAAkBA,GAAlB;AACE,QAAIK,EAAEL,CAAF,IAAKqC,EAAErC,CAAF,CAAT,EACE,OAAO,CAAP,CADF,KAEK,IAAIK,EAAEL,CAAF,IAAKqC,EAAErC,CAAF,CAAT,EACH,OAAO,CAAP;AAJJ,GAKA,OAAO,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4D,OAAT,CAAiBvD,CAAjB,EAA2BgC,CAA3B,EAAqCqC,CAArC,EAA+CtB,CAA/C,EAAyD;AAC9D,MAAIqC,EAAJ,EAAQC,EAAR;AACA,MAAI1F,CAAJ,EAAU2F,EAAV,EAAcC,EAAd,EAAkB5C,CAAlB,EAAqBiB,CAArB,EAAwB3D,CAAxB;AACAM,QAAMwC,CAAN,EAAS/C,CAAT;AACA,OAAKqF,KAAGrD,EAAE9B,MAAV,EAAkB8B,EAAEqD,KAAG,CAAL,KAAS,CAA3B,EAA8BA,IAA9B,IAJ8D,CAIzB;;AAErC;AACApF,MAAE+B,EAAEqD,KAAG,CAAL,CAAF;AACA,OAAKzB,IAAE,CAAP,EAAU3D,CAAV,EAAa2D,GAAb;AACE3D,UAAI,CAAJ;AADF,GAEA2D,IAAEhH,MAAIgH,CAAN,CAV8D,CAUpD;AACVqB,aAAWjD,CAAX,EAAc4B,CAAd,EAX8D,CAW3C;AACnBqB,aAAWlC,CAAX,EAAca,CAAd;;AAEA;AACA,OAAKwB,KAAGrC,EAAE7C,MAAV,EAAkB6C,EAAEqC,KAAG,CAAL,KAAS,CAAT,IAAcA,KAAGC,EAAnC,EAAuCD,IAAvC,IAf8D,CAehB;;AAE9ChF,WAASiE,CAAT,EAAY,CAAZ,EAjB8D,CAiBzB;AACrC,SAAO,CAACa,aAAalD,CAAb,EAAgBe,CAAhB,EAAmBqC,KAAGC,EAAtB,CAAR,EAAmC;AAAG;AACpCG,cAAUzC,CAAV,EAAaf,CAAb,EAAgBoD,KAAGC,EAAnB,EADiC,CACG;AACpChB,MAAEe,KAAGC,EAAL,IAFiC,CAEC;AACnC,GArB6D,CAqB1B;;AAEpC,OAAK1F,IAAEyF,KAAG,CAAV,EAAazF,KAAG0F,EAAhB,EAAoB1F,GAApB,EAAyB;AACvB,QAAIoD,EAAEpD,CAAF,KAAMqC,EAAEqD,KAAG,CAAL,CAAV,EACEhB,EAAE1E,IAAE0F,EAAJ,IAAQxI,IAAR,CADF,KAGEwH,EAAE1E,IAAE0F,EAAJ,IAAQnC,KAAKE,KAAL,CAAW,CAACL,EAAEpD,CAAF,IAAK7C,KAAL,GAAWiG,EAAEpD,IAAE,CAAJ,CAAZ,IAAoBqC,EAAEqD,KAAG,CAAL,CAA/B,CAAR;;AAEF;AACA;AACA;AACA;AACA;AACA,aAAS;AACPE,WAAG,CAACF,KAAG,CAAH,GAAOrD,EAAEqD,KAAG,CAAL,CAAP,GAAiB,CAAlB,IAAqBhB,EAAE1E,IAAE0F,EAAJ,CAAxB;AACA1C,UAAE4C,MAAI3I,GAAN;AACA2I,WAAGA,KAAK1I,IAAR;AACAyI,WAAG3C,IAAE0B,EAAE1E,IAAE0F,EAAJ,IAAQrD,EAAEqD,KAAG,CAAL,CAAb;AACA1C,UAAE2C,MAAI1I,GAAN;AACA0I,WAAGA,KAAKzI,IAAR;;AAEA,UAAI8F,KAAGI,EAAEpD,CAAF,CAAH,GAAU2F,MAAIvC,EAAEpD,IAAE,CAAJ,CAAJ,GAAa4F,MAAI5F,IAAE,CAAF,GAAMoD,EAAEpD,IAAE,CAAJ,CAAN,GAAe,CAAnB,CAAb,GAAqC2F,KAAGvC,EAAEpD,IAAE,CAAJ,CAAlD,GAA2DgD,IAAEI,EAAEpD,CAAF,CAAjE,EACE0E,EAAE1E,IAAE0F,EAAJ,IADF,KAGE;AACH;;AAEDI,kBAAc1C,CAAd,EAAiBf,CAAjB,EAAoB,CAACqC,EAAE1E,IAAE0F,EAAJ,CAArB,EAA8B1F,IAAE0F,EAAhC,EAzBuB,CAyBiB;AACxC,QAAIV,SAAS5B,CAAT,CAAJ,EAAiB;AACf2C,gBAAU3C,CAAV,EAAaf,CAAb,EAAgBrC,IAAE0F,EAAlB,EADe,CACgB;AAC/BhB,QAAE1E,IAAE0F,EAAJ;AACD;AACF;;AAED5E,cAAYuB,CAAZ,EAAe4B,CAAf,EAvD8D,CAuD1C;AACpBnD,cAAYsC,CAAZ,EAAea,CAAf,EAxD8D,CAwD1C;AACrB;;AAED;AACA,SAASN,MAAT,CAAgBtD,CAAhB,EAA0B;AACxB,MAAIL,CAAJ,EAAOJ,CAAP,EAAUoD,CAAV,EAAa1C,CAAb;AACAV,MAAES,EAAEE,MAAJ;AACAyC,MAAE,CAAF;AACA,OAAKhD,IAAE,CAAP,EAAUA,IAAEJ,CAAZ,EAAeI,GAAf,EAAoB;AAClBgD,SAAG3C,EAAEL,CAAF,CAAH;AACAM,QAAE,CAAF;AACA,QAAI0C,IAAE,CAAN,EAAS;AACP1C,UAAE,EAAE0C,KAAG/F,GAAL,CAAF;AACA+F,WAAG1C,IAAEnD,KAAL;AACD;AACDkD,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,QAAE,CAACA,KAAG/F,GAAJ,IAASqD,CAAX;AACD;AACF;;AAED;AACA,SAASyB,MAAT,CAAgB1B,CAAhB,EAA0BN,CAA1B,EAAqC;AACnC,MAAIC,CAAJ;AAAA,MAAOgD,IAAE,CAAT;AACA,OAAKhD,IAAEK,EAAEE,MAAF,GAAS,CAAhB,EAAmBP,KAAG,CAAtB,EAAyBA,GAAzB;AACEgD,QAAE,CAACA,IAAE7F,KAAF,GAAQkD,EAAEL,CAAF,CAAT,IAAeD,CAAjB;AADF,GAEA,OAAOiD,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA,OAAO,SAAS1F,UAAT,CAAoBC,CAApB,EAA+ByI,IAA/B,EAA6CC,OAA7C,EAA8D;AACnE,MAAOrG,IACL2D,KAAK2C,IAAL,CAAUF,OAAK/I,GAAf,IAAoB,CADtB;;AAEA2C,MAAEqG,UAAQrG,CAAR,GAAYqG,OAAZ,GAAsBrG,CAAxB;AACA,MAAIC,OAAK,IAAIrC,KAAJ,CAAUoC,CAAV,CAAT;AACAa,WAASZ,IAAT,EAAetC,CAAf;AACA,SAAOsC,IAAP;AACD;;AAED;AACA;AACA;AACA;AACA,OAAO,SAASsG,UAAT,CAAoBlG,CAApB,EAA+BmG,IAA/B,EAA6CH,OAA7C,EAAsE;AAC3E,MAAII,CAAJ,EAAOrG,CAAP,EAAUK,CAAV,EAAagC,CAAb,EAAgBiE,EAAhB;AACA,MAAI1G,IAAEK,EAAEM,MAAR;AACA,MAAI6F,QAAM,CAAC,CAAX,EAAc;AAAE;AACd/F,QAAE,IAAI7C,KAAJ,CAAU,CAAV,CAAF;AACA,aAAS;AACP6E,UAAE,IAAI7E,KAAJ,CAAU6C,EAAEE,MAAF,GAAS,CAAnB,CAAF;AACA,WAAKP,IAAE,CAAP,EAAUA,IAAEK,EAAEE,MAAd,EAAsBP,GAAtB;AACEqC,UAAErC,IAAE,CAAJ,IAAOK,EAAEL,CAAF,CAAP;AADF,OAEAqC,EAAE,CAAF,IAAKkE,SAAStG,CAAT,EAAY,EAAZ,CAAL,CAJO,CAIe;AACtBI,UAAEgC,CAAF;AACAgE,UAAEpG,EAAEuG,OAAF,CAAU,GAAV,EAAe,CAAf,CAAF;AACA,UAAIH,IAAE,CAAN,EACE;AACF;AACApG,UAAEA,EAAEwG,SAAF,CAAYJ,IAAE,CAAd,CAAF;AACA,UAAIpG,EAAEM,MAAF,IAAU,CAAd,EACE;AACH;AACD;AACA,QAAIF,EAAEE,MAAF,GAAS0F,OAAb,EAAsB;AACpB;AACA5D,UAAE,IAAI7E,KAAJ,CAAUyI,OAAV,CAAF;AACArF,YAAMyB,CAAN,EAAShC,CAAT;AACA,aAAOgC,CAAP;AACD;AACD,WAAOhC,CAAP;AACD;;AAEDA,MAAE/C,WAAW,CAAX,EAAc8I,OAAKxG,CAAnB,EAAsB,CAAtB,CAAF;AACA,OAAKI,IAAE,CAAP,EAAUA,IAAEJ,CAAZ,EAAeI,GAAf,EAAoB;AAClBqG,QAAEjJ,UAAUoJ,OAAV,CAAkBvG,EAAEwG,SAAF,CAAYzG,CAAZ,EAAeA,IAAE,CAAjB,CAAlB,EAAuC,CAAvC,CAAF;AACA,QAAIoG,QAAM,EAAN,IAAYC,KAAG,EAAnB,EAAwB;AACtBA,WAAG,EAAH;AACF,QAAIA,KAAGD,IAAH,IAAWC,IAAE,CAAjB,EAAoB;AAAI;AACtB;AACD;AACDxC,aAASxD,CAAT,EAAY+F,IAAZ;AACAvF,YAAQR,CAAR,EAAWgG,CAAX;AACD;;AAED,OAAKzG,IAAES,EAAEE,MAAT,EAAiBX,IAAE,CAAF,IAAO,CAACS,EAAET,IAAE,CAAJ,CAAzB,EAAiCA,GAAjC,IAzC2E,CAyCpC;AACvC;AACAA,MAAEqG,UAAQrG,IAAE,CAAV,GAAcqG,OAAd,GAAwBrG,IAAE,CAA5B;AACA;AACAyC,MAAE,IAAI7E,KAAJ,CAAUoC,CAAV,CAAF;AACA;AACA0G,OAAG1G,IAAES,EAAEE,MAAJ,GAAaX,CAAb,GAAiBS,EAAEE,MAAtB;AACA;AACA,OAAKP,IAAE,CAAP,EAAUA,IAAEsG,EAAZ,EAAgBtG,GAAhB;AACEqC,MAAErC,CAAF,IAAKK,EAAEL,CAAF,CAAL;AADF,GAjD2E,CAmD3E;AACA,SAAMA,IAAEJ,CAAR,EAAWI,GAAX;AACEqC,MAAErC,CAAF,IAAK,CAAL;AADF,GAEA,OAAOqC,CAAP;AACD;;AAED;AACA;AACA,OAAO,SAASrB,SAAT,CAAmBX,CAAnB,EAA6BgC,CAA7B,EAAwC;AAC7C,MAAIrC,CAAJ;AACA,MAAIK,EAAE,CAAF,KAAMgC,CAAV,EACE,OAAO,CAAP;AACF,OAAKrC,IAAE,CAAP,EAAUA,IAAEK,EAAEE,MAAd,EAAsBP,GAAtB;AACE,QAAIK,EAAEL,CAAF,CAAJ,EACE,OAAO,CAAP;AAFJ,GAGA,OAAO,CAAP;AACD;;AAED;AACA;AACA,SAASiB,MAAT,CAAgBZ,CAAhB,EAA0BgC,CAA1B,EAAoC;AAClC,MAAIrC,CAAJ;AACA,MAAIJ,IAAES,EAAEE,MAAF,GAAS8B,EAAE9B,MAAX,GAAoBF,EAAEE,MAAtB,GAA+B8B,EAAE9B,MAAvC;AACA,OAAKP,IAAE,CAAP,EAAUA,IAAEJ,CAAZ,EAAeI,GAAf;AACE,QAAIK,EAAEL,CAAF,KAAMqC,EAAErC,CAAF,CAAV,EACE,OAAO,CAAP;AAFJ,GAGA,IAAIK,EAAEE,MAAF,GAAS8B,EAAE9B,MAAf,EAAuB;AACrB,WAAMP,IAAEK,EAAEE,MAAV,EAAkBP,GAAlB;AACE,UAAIK,EAAEL,CAAF,CAAJ,EACE,OAAO,CAAP;AAFJ;AAGD,GAJD,MAIO;AACL,WAAMA,IAAEqC,EAAE9B,MAAV,EAAkBP,GAAlB;AACE,UAAIqC,EAAErC,CAAF,CAAJ,EACE,OAAO,CAAP;AAFJ;AAGD;AACD,SAAO,CAAP;AACD;;AAED;AACA,OAAO,SAAS8D,MAAT,CAAgBzD,CAAhB,EAA0B;AAC/B,MAAIL,CAAJ;AACA,OAAKA,IAAE,CAAP,EAAUA,IAAEK,EAAEE,MAAd,EAAsBP,GAAtB;AACE,QAAIK,EAAEL,CAAF,CAAJ,EACE,OAAO,CAAP;AAFJ,GAGA,OAAO,CAAP;AACD;;AAED;AACA;AACA,OAAO,SAAS0G,UAAT,CAAoBrG,CAApB,EAA8B+F,IAA9B,EAA4C;AACjD,MAAIpG,CAAJ;AAAA,MAAOzC,CAAP;AAAA,MAAU0C,IAAE,EAAZ;;AAEA,MAAInC,GAAGyC,MAAH,IAAWF,EAAEE,MAAjB,EACEzC,KAAG0C,IAAIH,CAAJ,CAAH,CADF,KAGEO,MAAM9C,EAAN,EAAUuC,CAAV;;AAEF,MAAI+F,QAAM,CAAC,CAAX,EAAc;AAAE;AACd,SAAKpG,IAAEK,EAAEE,MAAF,GAAS,CAAhB,EAAmBP,IAAE,CAArB,EAAwBA,GAAxB;AACEC,WAAGI,EAAEL,CAAF,IAAK,GAAR;AADF,KAEAC,KAAGI,EAAE,CAAF,CAAH;AACD,GAJD,MAKK;AAAE;AACL,WAAO,CAACyD,OAAOhG,EAAP,CAAR,EAAoB;AAClBP,UAAEoJ,QAAQ7I,EAAR,EAAYsI,IAAZ,CAAF,CADkB,CACI;AACtBnG,UAAE7C,UAAUqJ,SAAV,CAAoBlJ,CAApB,EAAuBA,IAAE,CAAzB,IAA4B0C,CAA9B;AACD;AACF;AACD,MAAIA,EAAEM,MAAF,IAAU,CAAd,EACEN,IAAE,GAAF;AACF,SAAOA,CAAP;AACD;;AAED;AACA,OAAO,SAASO,GAAT,CAAaH,CAAb,EAAuB;AAE5BR,SAAK,IAAIrC,KAAJ,CAAU6C,EAAEE,MAAZ,CAAL;AACAK,QAAMf,IAAN,EAAYQ,CAAZ;AACA,SAAOR,IAAP;AACD;;AAED;AACA,OAAO,SAASe,KAAT,CAAeP,CAAf,EAAyBgC,CAAzB,EAAmC;AACxC,MAAIrC,CAAJ;AACA,MAAIJ,IAAES,EAAEE,MAAF,GAAS8B,EAAE9B,MAAX,GAAoBF,EAAEE,MAAtB,GAA+B8B,EAAE9B,MAAvC;AACA,OAAKP,IAAE,CAAP,EAAUA,IAAEJ,CAAZ,EAAeI,GAAf;AACEK,MAAEL,CAAF,IAAKqC,EAAErC,CAAF,CAAL;AADF,GAEA,KAAKA,IAAEJ,CAAP,EAAUI,IAAEK,EAAEE,MAAd,EAAsBP,GAAtB;AACEK,MAAEL,CAAF,IAAK,CAAL;AADF;AAED;;AAED;AACA,OAAO,SAASS,QAAT,CAAkBJ,CAAlB,EAA4BN,CAA5B,EAAuC;AAC5C,MAAIC,CAAJ,EAAOgD,CAAP;AACA,MAAI4D,MAAMvG,EAAEE,MAAZ,CAF4C,CAExB;AACpB,OAAKyC,IAAEjD,CAAF,EAAKC,IAAE,CAAZ,EAAeA,IAAE4G,GAAjB,EAAsB5G,GAAtB,EAA2B;AACzBK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACF;;AAED;AACA;AACA,OAAO,SAAS4D,OAAT,CAAiBR,CAAjB,EAA2BN,CAA3B,EAAsC;AAC3C,MAAIC,CAAJ,EAAOJ,CAAP,EAAUoD,CAAV,EAAa1C,CAAb;AACAD,IAAE,CAAF,KAAMN,CAAN;AACAH,MAAES,EAAEE,MAAJ;AACAyC,MAAE,CAAF;AACA,OAAKhD,IAAE,CAAP,EAAUA,IAAEJ,CAAZ,EAAeI,GAAf,EAAoB;AAClBgD,SAAG3C,EAAEL,CAAF,CAAH;AACAM,QAAE,CAAF;AACA,QAAI0C,IAAE,CAAN,EAAS;AACP1C,UAAE,EAAE0C,KAAG/F,GAAL,CAAF;AACA+F,WAAG1C,IAAEnD,KAAL;AACD;AACDkD,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,QAAE,CAACA,KAAG/F,GAAJ,IAASqD,CAAX;AACA,QAAI,CAAC0C,CAAL,EAAQ,OATU,CASF;AACjB;AACF;;AAED;AACA,OAAO,SAASlC,WAAT,CAAqBT,CAArB,EAA+BN,CAA/B,EAA0C;AAC/C,MAAIC,CAAJ;AACA,MAAIJ,IAAE2D,KAAKE,KAAL,CAAW1D,IAAE9C,GAAb,CAAN;AACA,MAAI2C,CAAJ,EAAO;AACL,SAAKI,IAAE,CAAP,EAAUA,IAAEK,EAAEE,MAAF,GAASX,CAArB,EAAwBI,GAAxB;AAA6B;AAC3BK,QAAEL,CAAF,IAAKK,EAAEL,IAAEJ,CAAJ,CAAL;AADF,KAEA,OAAMI,IAAEK,EAAEE,MAAV,EAAkBP,GAAlB;AACEK,QAAEL,CAAF,IAAK,CAAL;AADF,KAHK,CAKL;AACAD,SAAG9C,GAAH;AACD;AACD,OAAK+C,IAAE,CAAP,EAAUA,IAAEK,EAAEE,MAAF,GAAS,CAArB,EAAwBP,GAAxB,EAA6B;AAC3BK,MAAEL,CAAF,IAAK9C,QAASmD,EAAEL,IAAE,CAAJ,KAAS/C,MAAI8C,CAAd,GAAqBM,EAAEL,CAAF,KAAMD,CAAnC,CAAL;AACD;AACDM,IAAEL,CAAF,MAAOD,CAAP;AACD;;AAED;AACA,SAASgF,MAAT,CAAgB1E,CAAhB,EAA0B;AACxB,MAAIL,CAAJ;AACA,OAAKA,IAAE,CAAP,EAAUA,IAAEK,EAAEE,MAAF,GAAS,CAArB,EAAwBP,GAAxB,EAA6B;AAC3BK,MAAEL,CAAF,IAAK9C,QAASmD,EAAEL,IAAE,CAAJ,KAAS/C,MAAI,CAAd,GAAqBoD,EAAEL,CAAF,KAAM,CAAnC,CAAL;AACD;AACDK,IAAEL,CAAF,IAAMK,EAAEL,CAAF,KAAM,CAAP,GAAaK,EAAEL,CAAF,IAAQ7C,SAAO,CAAjC,CALwB,CAKe;AACxC;;AAED;AACA,OAAO,SAASmI,UAAT,CAAoBjF,CAApB,EAA8BN,CAA9B,EAAyC;AAC9C,MAAIC,CAAJ;AACA,MAAIJ,IAAE2D,KAAKE,KAAL,CAAW1D,IAAE9C,GAAb,CAAN;AACA,MAAI2C,CAAJ,EAAO;AACL,SAAKI,IAAEK,EAAEE,MAAT,EAAiBP,KAAGJ,CAApB,EAAuBI,GAAvB;AAA4B;AAC1BK,QAAEL,CAAF,IAAKK,EAAEL,IAAEJ,CAAJ,CAAL;AADF,KAEA,OAAMI,KAAG,CAAT,EAAYA,GAAZ;AACEK,QAAEL,CAAF,IAAK,CAAL;AADF,KAHK,CAKL;AACAD,SAAG9C,GAAH;AACD;AACD,MAAI,CAAC8C,CAAL,EACE;AACF,OAAKC,IAAEK,EAAEE,MAAF,GAAS,CAAhB,EAAmBP,IAAE,CAArB,EAAwBA,GAAxB,EAA6B;AAC3BK,MAAEL,CAAF,IAAK9C,QAASmD,EAAEL,CAAF,KAAMD,CAAP,GAAaM,EAAEL,IAAE,CAAJ,KAAS/C,MAAI8C,CAAlC,CAAL;AACD;AACDM,IAAEL,CAAF,IAAK9C,OAAQmD,EAAEL,CAAF,KAAMD,CAAnB;AACD;;AAED;AACA;AACA,SAAS8D,QAAT,CAAkBxD,CAAlB,EAA4BN,CAA5B,EAAuC;AACrC,MAAIC,CAAJ,EAAOJ,CAAP,EAAUoD,CAAV,EAAa1C,CAAb;AACA,MAAI,CAACP,CAAL,EACE;AACFH,MAAES,EAAEE,MAAJ;AACAyC,MAAE,CAAF;AACA,OAAKhD,IAAE,CAAP,EAAUA,IAAEJ,CAAZ,EAAeI,GAAf,EAAoB;AAClBgD,SAAG3C,EAAEL,CAAF,IAAKD,CAAR;AACAO,QAAE,CAAF;AACA,QAAI0C,IAAE,CAAN,EAAS;AACP1C,UAAE,EAAE0C,KAAG/F,GAAL,CAAF;AACA+F,WAAG1C,IAAEnD,KAAL;AACD;AACDkD,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,QAAE,CAACA,KAAG/F,GAAJ,IAASqD,CAAX;AACD;AACF;;AAED;AACA,SAASqG,OAAT,CAAiBtG,CAAjB,EAA2BN,CAA3B,EAAsC;AACpC,MAAIC,CAAJ;AAAA,MAAOoD,IAAE,CAAT;AAAA,MAAYnD,CAAZ;AACA,OAAKD,IAAEK,EAAEE,MAAF,GAAS,CAAhB,EAAmBP,KAAG,CAAtB,EAAyBA,GAAzB,EAA8B;AAC5BC,QAAEmD,IAAEjG,KAAF,GAAQkD,EAAEL,CAAF,CAAV;AACAK,MAAEL,CAAF,IAAKuD,KAAKE,KAAL,CAAWxD,IAAEF,CAAb,CAAL;AACAqD,QAAEnD,IAAEF,CAAJ;AACD;AACD,SAAOqD,CAAP;AACD;;AAED;AACA;AACA,SAASyB,QAAT,CAAkBxE,CAAlB,EAA4BgC,CAA5B,EAAsC4B,CAAtC,EAAiD3D,CAAjD,EAA4D;AAC1D,MAAIN,CAAJ,EAAOgD,CAAP,EAAUpD,CAAV,EAAa0G,EAAb;AACA1G,MAAES,EAAEE,MAAF,GAAS8B,EAAE9B,MAAX,GAAoBF,EAAEE,MAAtB,GAA+B8B,EAAE9B,MAAnC;AACA+F,OAAGjG,EAAEE,MAAL;AACA,OAAKyC,IAAE,CAAF,EAAKhD,IAAE,CAAZ,EAAeA,IAAEJ,CAAjB,EAAoBI,GAApB,EAAyB;AACvBgD,SAAGiB,IAAE5D,EAAEL,CAAF,CAAF,GAAOM,IAAE+B,EAAErC,CAAF,CAAZ;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACD,OAAK+C,IAAEJ,CAAP,EAAUI,IAAEsG,EAAZ,EAAgBtG,GAAhB,EAAqB;AACnBgD,SAAGiB,IAAE5D,EAAEL,CAAF,CAAL;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACF;;AAED;AACA;AACA,SAAS6I,aAAT,CAAuBzF,CAAvB,EAAiCgC,CAAjC,EAA2C/B,CAA3C,EAAsDuG,EAAtD,EAAkE;AAChE,MAAI7G,CAAJ,EAAOgD,CAAP,EAAUpD,CAAV,EAAa0G,EAAb;AACA1G,MAAES,EAAEE,MAAF,GAASsG,KAAGxE,EAAE9B,MAAd,GAAuBF,EAAEE,MAAzB,GAAkCsG,KAAGxE,EAAE9B,MAAzC;AACA+F,OAAGjG,EAAEE,MAAL;AACA,OAAKyC,IAAE,CAAF,EAAKhD,IAAE6G,EAAZ,EAAgB7G,IAAEJ,CAAlB,EAAqBI,GAArB,EAA0B;AACxBgD,SAAG3C,EAAEL,CAAF,IAAKM,IAAE+B,EAAErC,IAAE6G,EAAJ,CAAV;AACAxG,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACD,OAAK+C,IAAEJ,CAAP,EAAUoD,KAAKhD,IAAEsG,EAAjB,EAAqBtG,GAArB,EAA0B;AACxBgD,SAAG3C,EAAEL,CAAF,CAAH;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACF;;AAED;AACA;AACA,SAAS8I,SAAT,CAAmB1F,CAAnB,EAA6BgC,CAA7B,EAAuCwE,EAAvC,EAAmD;AACjD,MAAI7G,CAAJ,EAAOgD,CAAP,EAAUpD,CAAV,EAAa0G,EAAb;AACA1G,MAAES,EAAEE,MAAF,GAASsG,KAAGxE,EAAE9B,MAAd,GAAuBF,EAAEE,MAAzB,GAAkCsG,KAAGxE,EAAE9B,MAAzC;AACA+F,OAAGjG,EAAEE,MAAL;AACA,OAAKyC,IAAE,CAAF,EAAKhD,IAAE6G,EAAZ,EAAgB7G,IAAEJ,CAAlB,EAAqBI,GAArB,EAA0B;AACxBgD,SAAG3C,EAAEL,CAAF,IAAKqC,EAAErC,IAAE6G,EAAJ,CAAR;AACAxG,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACD,OAAK+C,IAAEJ,CAAP,EAAUoD,KAAKhD,IAAEsG,EAAjB,EAAqBtG,GAArB,EAA0B;AACxBgD,SAAG3C,EAAEL,CAAF,CAAH;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACF;;AAED;AACA;AACA,SAAS4I,SAAT,CAAmBxF,CAAnB,EAA6BgC,CAA7B,EAAuCwE,EAAvC,EAAmD;AACjD,MAAI7G,CAAJ,EAAOgD,CAAP,EAAUpD,CAAV,EAAa0G,EAAb;AACA1G,MAAES,EAAEE,MAAF,GAASsG,KAAGxE,EAAE9B,MAAd,GAAuBF,EAAEE,MAAzB,GAAkCsG,KAAGxE,EAAE9B,MAAzC;AACA+F,OAAGjG,EAAEE,MAAL;AACA,OAAKyC,IAAE,CAAF,EAAKhD,IAAE6G,EAAZ,EAAgB7G,IAAEJ,CAAlB,EAAqBI,GAArB,EAA0B;AACxBgD,SAAG3C,EAAEL,CAAF,IAAKqC,EAAErC,IAAE6G,EAAJ,CAAR;AACAxG,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACD,OAAK+C,IAAEJ,CAAP,EAAUoD,KAAKhD,IAAEsG,EAAjB,EAAqBtG,GAArB,EAA0B;AACxBgD,SAAG3C,EAAEL,CAAF,CAAH;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACF;;AAED;AACA;AACA;AACA,OAAO,SAASwF,IAAT,CAAcpC,CAAd,EAAwBgC,CAAxB,EAAkC;AACvC,MAAIrC,CAAJ,EAAOgD,CAAP,EAAUpD,CAAV;AACAA,MAAES,EAAEE,MAAF,GAAS8B,EAAE9B,MAAX,GAAoBF,EAAEE,MAAtB,GAA+B8B,EAAE9B,MAAnC;AACA,OAAKyC,IAAE,CAAF,EAAKhD,IAAE,CAAZ,EAAeA,IAAEJ,CAAjB,EAAoBI,GAApB,EAAyB;AACvBgD,SAAG3C,EAAEL,CAAF,IAAKqC,EAAErC,CAAF,CAAR;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACD,OAAK+C,IAAEJ,CAAP,EAAUoD,KAAKhD,IAAEK,EAAEE,MAAnB,EAA2BP,GAA3B,EAAgC;AAC9BgD,SAAG3C,EAAEL,CAAF,CAAH;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACF;;AAED;AACA;AACA,OAAO,SAAS0F,IAAT,CAActC,CAAd,EAAwBgC,CAAxB,EAAkC;AACvC,MAAIrC,CAAJ,EAAOgD,CAAP,EAAUpD,CAAV;AACAA,MAAES,EAAEE,MAAF,GAAS8B,EAAE9B,MAAX,GAAoBF,EAAEE,MAAtB,GAA+B8B,EAAE9B,MAAnC;AACA,OAAKyC,IAAE,CAAF,EAAKhD,IAAE,CAAZ,EAAeA,IAAEJ,CAAjB,EAAoBI,GAApB,EAAyB;AACvBgD,SAAG3C,EAAEL,CAAF,IAAKqC,EAAErC,CAAF,CAAR;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACD,OAAK+C,IAAEJ,CAAP,EAAUoD,KAAKhD,IAAEK,EAAEE,MAAnB,EAA2BP,GAA3B,EAAgC;AAC9BgD,SAAG3C,EAAEL,CAAF,CAAH;AACAK,MAAEL,CAAF,IAAKgD,IAAI9F,IAAT;AACA8F,UAAI/F,GAAJ;AACD;AACF;;AAED;AACA,SAASqF,KAAT,CAAejC,CAAf,EAAyBgC,CAAzB,EAAmC;AACjC,MAAIrC,CAAJ;AACA,MAAIvC,GAAG8C,MAAH,IAAW,IAAEF,EAAEE,MAAnB,EACE9C,KAAG,IAAID,KAAJ,CAAU,IAAE6C,EAAEE,MAAd,CAAH;AACFE,WAAShD,EAAT,EAAa,CAAb;AACA,OAAKuC,IAAE,CAAP,EAAUA,IAAEqC,EAAE9B,MAAd,EAAsBP,GAAtB;AACE,QAAIqC,EAAErC,CAAF,CAAJ,EACE8F,cAAcrI,EAAd,EAAkB4C,CAAlB,EAAqBgC,EAAErC,CAAF,CAArB,EAA2BA,CAA3B;AAFJ,GALiC,CAOI;AACrCY,QAAMP,CAAN,EAAS5C,EAAT;AACD;;AAED;AACA,SAASyE,IAAT,CAAc7B,CAAd,EAAwBN,CAAxB,EAAkC;AAChC,MAAInC,GAAG2C,MAAH,IAAWF,EAAEE,MAAjB,EACE3C,KAAG4C,IAAIH,CAAJ,CAAH,CADF,KAGEO,MAAMhD,EAAN,EAAUyC,CAAV;AACF,MAAIxC,GAAG0C,MAAH,IAAWF,EAAEE,MAAjB,EACE1C,KAAG2C,IAAIH,CAAJ,CAAH;AACFuD,UAAQhG,EAAR,EAAYmC,CAAZ,EAAelC,EAAf,EAAmBwC,CAAnB,EAPgC,CAOR;AACzB;;AAED;AACA;AACA,SAAS0C,QAAT,CAAkB1C,CAAlB,EAA4BgC,CAA5B,EAAsCtC,CAAtC,EAAgD;AAC9C,MAAIC,CAAJ;AACA,MAAItC,GAAG6C,MAAH,IAAW,IAAEF,EAAEE,MAAnB,EACE7C,KAAG,IAAIF,KAAJ,CAAU,IAAE6C,EAAEE,MAAd,CAAH;AACFE,WAAS/C,EAAT,EAAa,CAAb;AACA,OAAKsC,IAAE,CAAP,EAAUA,IAAEqC,EAAE9B,MAAd,EAAsBP,GAAtB;AACE,QAAIqC,EAAErC,CAAF,CAAJ,EACE8F,cAAcpI,EAAd,EAAkB2C,CAAlB,EAAqBgC,EAAErC,CAAF,CAArB,EAA2BA,CAA3B;AAFJ,GAL8C,CAOT;AACrCkC,OAAKxE,EAAL,EAASqC,CAAT;AACAa,QAAMP,CAAN,EAAS3C,EAAT;AACD;;AAED;AACA,SAASwD,UAAT,CAAoBb,CAApB,EAA8BN,CAA9B,EAAwC;AACtC,MAAIC,CAAJ,EAAOW,CAAP,EAAaqC,CAAb,EAAgByC,EAAhB,EAAwB7F,CAAxB;AACA,OAAK6F,KAAGpF,EAAEE,MAAV,EAAkBkF,KAAG,CAAH,IAAQ,CAACpF,EAAEoF,KAAG,CAAL,CAA3B,EAAoCA,IAApC,IAFsC,CAEM;AAC5C7F,MAAE6F,KAAG1F,EAAEQ,MAAL,GAAc,IAAEkF,EAAhB,GAAqB,IAAE1F,EAAEQ,MAA3B,CAHsC,CAGH;AACnC,MAAI7C,GAAG6C,MAAH,IAAWX,CAAf,EACElC,KAAG,IAAIF,KAAJ,CAAUoC,CAAV,CAAH;AACFa,WAAS/C,EAAT,EAAa,CAAb;AACA,OAAKsC,IAAE,CAAP,EAAUA,IAAEyF,EAAZ,EAAgBzF,GAAhB,EAAqB;AACnBgD,QAAEtF,GAAG,IAAEsC,CAAL,IAAQK,EAAEL,CAAF,IAAKK,EAAEL,CAAF,CAAf;AACAtC,OAAG,IAAEsC,CAAL,IAAQgD,IAAI9F,IAAZ;AACA8F,UAAI/F,GAAJ;AACA,SAAK0D,IAAEX,IAAE,CAAT,EAAYW,IAAE8E,EAAd,EAAkB9E,GAAlB,EAAuB;AACrBqC,UAAEtF,GAAGsC,IAAEW,CAAL,IAAQ,IAAEN,EAAEL,CAAF,CAAF,GAAOK,EAAEM,CAAF,CAAf,GAAoBqC,CAAtB;AACAtF,SAAGsC,IAAEW,CAAL,IAASqC,IAAI9F,IAAb;AACA8F,YAAI/F,GAAJ;AACD;AACDS,OAAGsC,IAAEyF,EAAL,IAASzC,CAAT;AACD;AACDd,OAAKxE,EAAL,EAASqC,CAAT;AACAa,QAAMP,CAAN,EAAS3C,EAAT;AACD;;AAED;AACA,SAAS+D,IAAT,CAAcpB,CAAd,EAAwBT,CAAxB,EAAmC;AACjC,MAAII,CAAJ,EAAOqC,CAAP;AACA,OAAKrC,IAAEK,EAAEE,MAAT,EAAiBP,IAAE,CAAF,IAAO,CAACK,EAAEL,IAAE,CAAJ,CAAzB,EAAiCA,GAAjC;AACAqC,MAAE,IAAI7E,KAAJ,CAAUwC,IAAEJ,CAAZ,CAAF;AACAgB,QAAMyB,CAAN,EAAShC,CAAT;AACA,SAAOgC,CAAP;AACD;;AAED;AACA;AACA,SAAStB,OAAT,CAAiBV,CAAjB,EAA2BgC,CAA3B,EAAqCtC,CAArC,EAA+C;AAC7C,MAAI+G,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB;AACA,MAAIlJ,GAAGwC,MAAH,IAAWR,EAAEQ,MAAjB,EACExC,KAAGyC,IAAIT,CAAJ,CAAH;;AAEF;AACA;AACA,MAAI,CAACA,EAAE,CAAF,IAAK,CAAN,KAAU,CAAd,EAAiB;AACfa,UAAM7C,EAAN,EAAUsC,CAAV;AACAI,aAASJ,CAAT,EAAY,CAAZ;AACA,WAAO,CAACW,UAAUqB,CAAV,EAAa,CAAb,CAAR,EAAyB;AACvB,UAAIA,EAAE,CAAF,IAAK,CAAT,EACEU,SAAS1C,CAAT,EAAYtC,EAAZ,EAAgBgC,CAAhB;AACF4G,cAAQtE,CAAR,EAAW,CAAX;AACAnB,iBAAWnD,EAAX,EAAegC,CAAf;AACD;AACD;AACD;;AAED;AACAU,WAAS1C,EAAT,EAAa,CAAb;AACA,OAAKiJ,KAAGjH,EAAEQ,MAAV,EAAkByG,KAAG,CAAH,IAAQ,CAACjH,EAAEiH,KAAG,CAAL,CAA3B,EAAoCA,IAApC;AACAC,OAAG9J,QAAM8H,cAAclD,OAAOhC,CAAP,EAAU5C,KAAV,CAAd,EAAgCA,KAAhC,CAAT;AACAY,KAAGiJ,EAAH,IAAO,CAAP;AACAjE,WAAS1C,CAAT,EAAYtC,EAAZ,EAAgBgC,CAAhB,EAxB6C,CAwBvB;;AAEtB,MAAIpC,GAAG4C,MAAH,IAAWF,EAAEE,MAAjB,EACE5C,KAAG6C,IAAIH,CAAJ,CAAH,CADF,KAGEO,MAAMjD,EAAN,EAAU0C,CAAV;AACF;AACA,OAAKyG,KAAGzE,EAAE9B,MAAF,GAAS,CAAjB,EAAoBuG,KAAG,CAAH,GAAO,CAACzE,EAAEyE,EAAF,CAA5B,EAAmCA,IAAnC,IA/B6C,CA+BF;AAC3C,MAAIzE,EAAEyE,EAAF,KAAO,CAAX,EAAc;AAAG;AACfrG,aAASJ,CAAT,EAAY,CAAZ;AACA;AACD;AACD,OAAK0G,KAAG,KAAI9J,MAAI,CAAhB,EAAoB8J,MAAM,EAAE1E,EAAEyE,EAAF,IAAQC,EAAV,CAA1B,EAAyCA,OAAK,CAA9C,IApC6C,CAoCM;AACnD,WAAS;AACP,QAAI,EAAEA,OAAK,CAAP,CAAJ,EAAe;AAAG;AAChBD;AACA,UAAIA,KAAG,CAAP,EAAU;AACRI,cAAM7G,CAAN,EAAShD,GAAT,EAAc0C,CAAd,EAAiBkH,EAAjB;AACA;AACD;AACDF,WAAG,KAAI9J,MAAI,CAAX;AACD;AACDiK,UAAM7G,CAAN,EAASA,CAAT,EAAYN,CAAZ,EAAekH,EAAf;;AAEA,QAAIF,KAAK1E,EAAEyE,EAAF,CAAT,EAAgB;AACdI,YAAM7G,CAAN,EAAS1C,EAAT,EAAaoC,CAAb,EAAgBkH,EAAhB;AACH;AACF;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAT,CAAe7G,CAAf,EAAyBgC,CAAzB,EAAmCtC,CAAnC,EAA6CkH,EAA7C,EAAyD;AACvD,MAAIjH,CAAJ,EAAOW,CAAP,EAAUqC,CAAV,EAAamE,EAAb,EAAiB5J,CAAjB,EAAoB6J,EAApB;AACA,MAAIJ,KAAGjH,EAAEQ,MAAT;AACA,MAAImF,KAAGrD,EAAE9B,MAAT;;AAEA,MAAItC,GAAGsC,MAAH,IAAWyG,EAAf,EACE/I,KAAG,IAAIT,KAAJ,CAAUwJ,EAAV,CAAH;;AAEFvG,WAASxC,EAAT,EAAa,CAAb;;AAEA,SAAM+I,KAAG,CAAH,IAAQjH,EAAEiH,KAAG,CAAL,KAAS,CAAvB,EAA0BA,IAA1B,IAVuD,CAUtB;AACjC,SAAMtB,KAAG,CAAH,IAAQrD,EAAEqD,KAAG,CAAL,KAAS,CAAvB,EAA0BA,IAA1B,IAXuD,CAWtB;AACjC0B,OAAGnJ,GAAGsC,MAAH,GAAU,CAAb,CAZuD,CAYvC;;AAEhB;AACA,OAAKP,IAAE,CAAP,EAAUA,IAAEgH,EAAZ,EAAgBhH,GAAhB,EAAqB;AACnBzC,QAAEU,GAAG,CAAH,IAAMoC,EAAEL,CAAF,IAAKqC,EAAE,CAAF,CAAb;AACA8E,SAAI,CAAC5J,IAAIL,IAAL,IAAa+J,EAAd,GAAoB/J,IAAvB,CAFmB,CAEW;AAC9B8F,QAAGzF,IAAE4J,KAAGpH,EAAE,CAAF,CAAN,IAAe9C,GAAjB;AACAM,QAAE8C,EAAEL,CAAF,CAAF;;AAEA;AACAW,QAAE,CAAF;AACA,WAAMA,IAAE+E,KAAG,CAAX,GAAe;AAAE1C,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAT,GAAcpD,IAAE8E,EAAE1B,CAAF,CAAnB,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAT,GAAcpD,IAAE8E,EAAE1B,CAAF,CAAnB,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAT,GAAcpD,IAAE8E,EAAE1B,CAAF,CAAnB,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAT,GAAcpD,IAAE8E,EAAE1B,CAAF,CAAnB,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAT,GAAcpD,IAAE8E,EAAE1B,CAAF,CAAnB,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAAM;AACjF,WAAMA,IAAE+E,EAAR,GAAe;AAAE1C,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAT,GAAcpD,IAAE8E,EAAE1B,CAAF,CAAnB,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAAM;AACjF,WAAMA,IAAEqG,KAAG,CAAX,GAAe;AAAEhE,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAZ,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAZ,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAZ,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAZ,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAC1DqC,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAZ,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAAM;AACjF,WAAMA,IAAEqG,EAAR,GAAe;AAAEhE,WAAG/E,GAAG0C,CAAH,IAAMwG,KAAGpH,EAAEY,CAAF,CAAZ,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAAM;AACjF,WAAMA,IAAEyG,EAAR,GAAe;AAAEpE,WAAG/E,GAAG0C,CAAH,CAAH,CAA2B1C,GAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ,CAAoB8F,MAAI/F,GAAJ,CAAW0D;AAAM;AACjF1C,OAAG0C,IAAE,CAAL,IAAQqC,IAAI9F,IAAZ;AACD;;AAED,MAAI,CAAC8E,QAAQjC,CAAR,EAAW9B,EAAX,CAAL,EACEwE,KAAKxE,EAAL,EAAS8B,CAAT;AACFa,QAAMP,CAAN,EAASpC,EAAT;AACD","file":"leemon.js","sourcesContent":["//@flow\n\ntype Bytes = number[]\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Big Integer Library v. 5.5\n// Created 2000, last modified 2013\n// Leemon Baird\n// www.leemon.com\n//\n// Version history:\n// v 5.5  17 Mar 2013\n//   - two lines of a form like \"if (x<0) x+=n\" had the \"if\" changed to \"while\" to\n//     handle the case when x<-n. (Thanks to James Ansell for finding that bug)\n// v 5.4  3 Oct 2009\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)\n//\n// v 5.3  21 Sep 2009\n//   - added randProbPrime(k) for probable primes\n//   - unrolled loop in mont_ (slightly faster)\n//   - millerRabin now takes a bigInt parameter rather than an int\n//\n// v 5.2  15 Sep 2009\n//   - fixed capitalization in call to int2bigInt in randBigInt\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\n//\n// v 5.1  8 Oct 2007\n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\n//   - fixed a bug found by Rob Visser (see comment with his name below)\n//   - improved comments\n//\n// This file is public domain.   You can use it for any purpose without restriction.\n// I do not guarantee that it is correct, so use it at your own risk.  If you use\n// it for something interesting, I'd appreciate hearing about it.  If you find\n// any bugs or make any improvements, I'd appreciate hearing about those too.\n// It would also be nice if my name and URL were left in the comments.  But none\n// of that is required.\n//\n// This code defines a bigInt library for arbitrary-precision integers.\n// A bigInt is an array of integers storing the value in chunks of bpe bits,\n// little endian (buff[0] is the least significant word).\n// Negative bigInts are stored two's complement.  Almost all the functions treat\n// bigInts as nonnegative.  The few that view them as two's complement say so\n// in their comments.  Some functions assume their parameters have at least one\n// leading zero element. Functions with an underscore at the end of the name put\n// their answer into one of the arrays passed in, and have unpredictable behavior\n// in case of overflow, so the caller must make sure the arrays are big enough to\n// hold the answer.  But the average user should never have to call any of the\n// underscored functions.  Each important underscored function has a wrapper function\n// of the same name without the underscore that takes care of the details for you.\n// For each underscored function where a parameter is modified, that same variable\n// must not be used as another argument too.  So, you cannot square x by doing\n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\n// Or simply use the multMod(x,x,n) function without the underscore, where\n// such issues never arise, because non-underscored functions never change\n// their parameters; they always allocate new memory for the answer that is returned.\n//\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\n//globals\nexport var bpe=0;         //bits stored per array element\nvar mask=0;        //AND this with an array element to chop it down to bpe bits\nvar radix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n\n//the digits for converting to different bases\nvar digitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\"+-';\n\n//initialize the global variables\nfor (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform\nbpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt\nmask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits\nradix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask\nexport var one=int2bigInt(1, 1, 1);     //constant used in powMod_()\n\n//the following global variables are scratchpad memory to\n//reduce dynamic memory allocation in the inner loop\nvar t=new Array(0);\nvar ss=t;       //used in mult_()\nvar s0=t;       //used in multMod_(), squareMod_()\n// var s1=t;       //used in powMod_(), multMod_(), squareMod_()\n// var s2=t;       //used in powMod_(), multMod_()\nvar s3=t;       //used in powMod_()\nvar s4=t, s5=t; //used in mod_()\nvar s6=t;       //used in bigInt2str()\nvar s7=t;       //used in powMod_()\nvar T=t;        //used in GCD_()\nvar sa=t;       //used in mont_()\nvar mr_x1=t, mr_r=t, mr_a=t,                                      //used in millerRabin()\n    eg_v=t, eg_u=t, eg_A=t, eg_B=t, eg_C=t, eg_D=t                //used in eGCD_(), inverseMod_()\n    //, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()\n\n    , primes=t, pows=t, s_i=t, s_i2=t, s_R=t, s_rm=t, s_q=t, s_n1=t,\n    s_a=t, s_r2=t, s_n=t, s_b=t, s_d=t, s_x1=t, s_x2=t, s_aa=t, //used in randTruePrime_()\n\n    rpprb=t; //used in randProbPrimeRounds() (which also uses \"primes\")\n\n////////////////////////////////////////////////////////////////////////////////////////\n\nvar k, buff;\n\n//return array of all primes less than integer n\nfunction findPrimes(n: number) {\n  var i, s, p, ans;\n  s=new Array(n);\n  for (i=0; i<n; i++)\n    s[i]=0;\n  s[0]=2;\n  p=0;    //first p elements of s are primes, the rest are a sieve\n  for (;s[p]<n;) {                  //s[p] is the pth prime\n    for (i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]\n      s[i]=1;\n    p++;\n    s[p]=s[p-1]+1;\n    for (; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\n  }\n  ans=new Array(p);\n  for (i=0; i<p; i++)\n    ans[i]=s[i];\n  return ans;\n}\n\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x is a bigInt, and b is an integer, with b<x\nfunction millerRabinInt(x: Bytes, b: number) {\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copyInt_(mr_a, b);\n  return millerRabin(x, mr_a);\n}\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x and b are bigInts with b<x\nfunction millerRabin(x: Bytes, b: Bytes) {\n  var i, j, k, s;\n\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copy_(mr_a, b);\n  copy_(mr_r, x);\n  copy_(mr_x1, x);\n\n  addInt_(mr_r, -1);\n  addInt_(mr_x1, -1);\n\n  //s=the highest power of two that divides mr_r\n  k=0;\n  for (i=0; i<mr_r.length; i++)\n    for (j=1; j<mask; j<<=1)\n      if (x[i] & j) {\n        s=(k<mr_r.length+bpe ? k : 0);\n        i=mr_r.length;\n        j=mask;\n      } else\n        k++;\n\n  if (s)\n    rightShift_(mr_r, s);\n\n  powMod_(mr_a, mr_r, x);\n\n  if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\n    j=1;\n    //$off\n    while (j<=s-1 && !equals(mr_a, mr_x1)) {\n      squareMod_(mr_a, x);\n      if (equalsInt(mr_a, 1)) {\n        return 0;\n      }\n      j++;\n    }\n    if (!equals(mr_a, mr_x1)) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\n//returns how many bits long the bigInt is, not counting leading zeros.\nfunction bitSize(x: Bytes) {\n  var j, z, w;\n  for (j=x.length-1; (x[j]==0) && (j>0); j--);\n  for (z=0, w=x[j]; w; (w>>=1), z++);\n  z+=bpe*j;\n  return z;\n}\n\n//return a copy of x with at least n elements, adding leading zeros if needed\nfunction expand(x: Bytes, n: number) {\n  var ans=int2bigInt(0, (x.length>n ? x.length : n)*bpe, 0);\n  copy_(ans, x);\n  return ans;\n}\n\n//return a k-bit true random prime using Maurer's algorithm.\nfunction randTruePrime(k: number) {\n  var ans=int2bigInt(0, k, 0);\n  randTruePrime_(ans, k);\n  return trim(ans, 1);\n}\n\n//return a k-bit random probable prime with probability of error < 2^-80\nfunction randProbPrime(k: number) {\n  if (k>=600) return randProbPrimeRounds(k, 2); //numbers from HAC table 4.3\n  if (k>=550) return randProbPrimeRounds(k, 4);\n  if (k>=500) return randProbPrimeRounds(k, 5);\n  if (k>=400) return randProbPrimeRounds(k, 6);\n  if (k>=350) return randProbPrimeRounds(k, 7);\n  if (k>=300) return randProbPrimeRounds(k, 9);\n  if (k>=250) return randProbPrimeRounds(k, 12); //numbers from HAC table 4.4\n  if (k>=200) return randProbPrimeRounds(k, 15);\n  if (k>=150) return randProbPrimeRounds(k, 18);\n  if (k>=100) return randProbPrimeRounds(k, 27);\n              return randProbPrimeRounds(k, 40); //number from HAC remark 4.26 (only an estimate)\n}\n\n//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)\nfunction randProbPrimeRounds(k: number, n: number) {\n  var ans, i, divisible, B;\n  B=30000;  //B is largest prime to use in trial division\n  ans=int2bigInt(0, k, 0);\n\n  //optimization: try larger and smaller B to find the best limit.\n\n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (rpprb.length!=ans.length)\n    rpprb=dup(ans);\n\n  for (;;) { //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a\n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n\n    randBigInt_(ans, k, 0); //ans = a random odd number to check\n    ans[0] |= 1;\n    divisible=0;\n\n    //check ans for divisibility by small primes up to B\n    for (i=0; (i<primes.length) && (primes[i]<=B); i++)\n      if (modInt(ans, primes[i])==0 && !equalsInt(ans, primes[i])) {\n        divisible=1;\n        break;\n      }\n\n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n\n    //do n rounds of Miller Rabin, with random bases less than ans\n    for (i=0; i<n && !divisible; i++) {\n      randBigInt_(rpprb, k, 0);\n      while (!greater(ans, rpprb)) //pick a random rpprb that's < ans\n        randBigInt_(rpprb, k, 0);\n      if (!millerRabin(ans, rpprb))\n        divisible=1;\n    }\n\n    if (!divisible)\n      return ans;\n  }\n}\n\n//return a new bigInt equal to (x mod n) for bigInts x and n.\nfunction mod(x: Bytes, n: Bytes) {\n  var ans=dup(x);\n  mod_(ans, n);\n  return trim(ans, 1);\n}\n\n//return (x+n) where x is a bigInt and n is an integer.\nfunction addInt(x: Bytes, n: number) {\n  var ans=expand(x, x.length+1);\n  addInt_(ans, n);\n  return trim(ans, 1);\n}\n\n//return x*y for bigInts x and y. This is faster when y<x.\nfunction mult(x: Bytes, y: Bytes) {\n  var ans=expand(x, x.length+y.length);\n  mult_(ans, y);\n  return trim(ans, 1);\n}\n\n//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\nexport function powMod(x: Bytes, y: Bytes, n: Bytes) {\n  var ans=expand(x, n.length);\n  powMod_(ans, trim(y, 2), trim(n, 2));  //this should work without the trim, but doesn't\n  return trim(ans, 1);\n}\n\n//return (x-y) for bigInts x and y.  Negative answers will be 2s complement\nexport function sub(x: Bytes, y: Bytes) {\n  var ans=expand(x, (x.length>y.length ? x.length+1 : y.length+1));\n  sub_(ans, y);\n  return trim(ans, 1);\n}\n\n//return (x+y) for bigInts x and y.\nfunction add(x: Bytes, y: Bytes) {\n  var ans=expand(x, (x.length>y.length ? x.length+1 : y.length+1));\n  add_(ans, y);\n  return trim(ans, 1);\n}\n\n//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\nfunction inverseMod(x: Bytes, n: Bytes) {\n  var ans=expand(x, n.length);\n  var s;\n  s=inverseMod_(ans, n);\n  return s ? trim(ans, 1) : null;\n}\n\n//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\nfunction multMod(x: Bytes, y: Bytes, n: Bytes) {\n  var ans=expand(x, n.length);\n  multMod_(ans, y, n);\n  return trim(ans, 1);\n}\n\n//generate a k-bit true random prime using Maurer's algorithm,\n//and put it into ans.  The bigInt ans must be large enough to hold it.\nfunction randTruePrime_(ans: Bytes, k: number) {\n  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize;\n  var w;\n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (pows.length==0) {\n    pows=new Array(512);\n    for (j=0; j<512; j++) {\n      pows[j]=Math.pow(2, j/511.-1.);\n    }\n  }\n\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\n  c=0.1;  //c=0.1 in HAC\n  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n  var recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length!=ans.length) {\n    s_i2=dup(ans);\n    s_R =dup(ans);\n    s_n1=dup(ans);\n    s_r2=dup(ans);\n    s_d =dup(ans);\n    s_x1=dup(ans); //TODO Seems like a bug in eslint, reports as unused\n    s_x2=dup(ans);\n    s_b =dup(ans);\n    s_n =dup(ans);\n    s_i =dup(ans);\n    s_rm=dup(ans);\n    s_q =dup(ans);\n    s_a =dup(ans);\n    s_aa=dup(ans);\n  }\n\n  if (k <= recLimit) {  //generate small random primes by trial division up to its square root\n    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)\n    copyInt_(ans, 0);\n    for (dd=1; dd;) {\n      dd=0;\n      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1\n      for (j=1; (j<primes.length) && ((primes[j]&pm)==primes[j]); j++) { //trial division by all primes 3...sqrt(2^k)\n        if (0==(ans[0]%primes[j])) {\n          dd=1;\n          break;\n        }\n      }\n    }\n    carry_(ans);\n    return;\n  }\n\n  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).\n  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r=1; k-k*r<=m; )\n      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);\n  else\n    r=.5;\n\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize=Math.floor(r*k)+1;\n\n  randTruePrime_(s_q, recSize);\n  copyInt_(s_i2, 0);\n  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)\n  divide_(s_i2, s_q, s_i, s_rm);                        //s_i=floor((2^(k-1))/(2q))\n\n  z=bitSize(s_i);\n\n  for (;;) {\n    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R, z, 0);\n      if (greater(s_i, s_R))\n        break;\n    }                //now s_R is in the range [0,s_i-1]\n    addInt_(s_R, 1);  //now s_R is in the range [1,s_i]\n    add_(s_R, s_i);   //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n, s_q);\n    mult_(s_n, s_R);\n    multInt_(s_n, 2);\n    addInt_(s_n, 1);    //s_n=2*s_R*s_q+1\n\n    copy_(s_r2, s_R);\n    multInt_(s_r2, 2);  //s_r2=2*s_R\n\n    //check s_n for divisibility by small primes up to B\n    for (divisible=0, j=0; (j<primes.length) && (primes[j]<B); j++)\n      if (modInt(s_n, primes[j])==0 && !equalsInt(s_n, primes[j])) {\n        divisible=1;\n        break;\n      }\n\n    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2\n      if (!millerRabinInt(s_n, 2)) //this line represents 75% of the total runtime for randTruePrime_\n        divisible=1;\n\n    if (!divisible) {  //if it passes that test, continue checking s_n\n      addInt_(s_n, -3);\n      for (j=s_n.length-1; (s_n[j]==0) && (j>0); j--);  //strip leading zeros\n      for (zz=0, w=s_n[j]; w; (w>>=1), zz++);\n      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros\n      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a, zz, 0);\n        if (greater(s_n, s_a))\n          break;\n      }                //now s_a is in the range [0,s_n-1]\n      addInt_(s_n, 3);  //now s_a is in the range [0,s_n-4]\n      addInt_(s_a, 2);  //now s_a is in the range [2,s_n-2]\n      copy_(s_b, s_a);\n      copy_(s_n1, s_n);\n      addInt_(s_n1, -1);\n      powMod_(s_b, s_n1, s_n);   //s_b=s_a^(s_n-1) modulo s_n\n      addInt_(s_b, -1);\n      if (isZero(s_b)) {\n        copy_(s_b, s_a);\n        powMod_(s_b, s_r2, s_n);\n        addInt_(s_b, -1);\n        copy_(s_aa, s_n);\n        copy_(s_d, s_b);\n        GCD_(s_d, s_n);  //if s_b and s_n are relatively prime, then s_n is a prime\n        if (equalsInt(s_d, 1)) {\n          copy_(ans, s_aa);\n          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n}\n\n//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\nfunction randBigInt(n: number, s: number) {\n  var a, b;\n  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element\n  b=int2bigInt(0, 0, a);\n  randBigInt_(b, n, s);\n  return b;\n}\n\n//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n//Array b must be big enough to hold the result. Must have n>=1\nfunction randBigInt_(b: Bytes, n: number, s: number) {\n  var i, a;\n  for (i=0; i<b.length; i++)\n    b[i]=0;\n  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt\n  for (i=0; i<a; i++) {\n    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));\n  }\n  b[a-1] &= (2<<((n-1)%bpe))-1;\n  if (s==1)\n    b[a-1] |= (1<<((n-1)%bpe));\n}\n\n//Return the greatest common divisor of bigInts x and y (each with same number of elements).\nfunction GCD(x: Bytes, y: Bytes) {\n  var xc, yc;\n  xc=dup(x);\n  yc=dup(y);\n  GCD_(xc, yc);\n  return xc;\n}\n\n//set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n//y is destroyed.\nfunction GCD_(x: Bytes, y: Bytes) {\n  var i, xp, yp, A, B, C, D, q, sing;\n  var qp;\n  if (T.length!=x.length)\n    T=dup(x);\n\n  sing=1;\n  while (sing) { //while y has nonzero elements other than y[0]\n    sing=0;\n    for (i=1; i<y.length; i++) //check if y has nonzero elements other than 0\n      if (y[i]) {\n        sing=1;\n        break;\n      }\n    if (!sing) break; //quit when y all zero elements except possibly y[0]\n\n    for (i=x.length; !x[i] && i>=0; i--);  //find most significant element of x\n    xp=x[i];\n    yp=y[i];\n    A=1; B=0; C=0; D=1;\n    while ((yp+C) && (yp+D)) {\n      q =Math.floor((xp+A)/(yp+C));\n      qp=Math.floor((xp+B)/(yp+D));\n      if (q!=qp)\n        break;\n      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\n      t= B-q*D;   B=D;   D=t;\n      t=xp-q*yp; xp=yp; yp=t;\n    }\n    if (B) {\n      copy_(T, x);\n      linComb_(x, y, A, B); //x=A*x+B*y\n      linComb_(y, T, D, C); //y=D*y+C*T\n    } else {\n      mod_(x, y);\n      copy_(T, x);\n      copy_(x, y);\n      copy_(y, T);\n    }\n  }\n  if (y[0]==0)\n    return;\n  t=modInt(x, y[0]);\n  copyInt_(x, y[0]);\n  y[0]=t;\n  while (y[0]) {\n    x[0]%=y[0];\n    t=x[0]; x[0]=y[0]; y[0]=t;\n  }\n}\n\n//do x=x**(-1) mod n, for bigInts x and n.\n//If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n//The x array must be at least as large as the n array.\nfunction inverseMod_(x: Bytes, n: Bytes) {\n  var k=1+2*Math.max(x.length, n.length);\n\n  if (!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist\n    copyInt_(x, 0);\n    return 0;\n  }\n\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_v=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n\n  copy_(eg_u, x);\n  copy_(eg_v, n);\n  copyInt_(eg_A, 1);\n  copyInt_(eg_B, 0);\n  copyInt_(eg_C, 0);\n  copyInt_(eg_D, 1);\n  for (;;) {\n    while (!(eg_u[0]&1)) {  //while eg_u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);\n      } else {\n        add_(eg_A, n);  halve_(eg_A);\n        sub_(eg_B, x);  halve_(eg_B);\n      }\n    }\n\n    while (!(eg_v[0]&1)) {  //while eg_v is even\n      halve_(eg_v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);\n      } else {\n        add_(eg_C, n);  halve_(eg_C);\n        sub_(eg_D, x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(eg_v, eg_u)) { //eg_v <= eg_u\n      sub_(eg_u, eg_v);\n      sub_(eg_A, eg_C);\n      sub_(eg_B, eg_D);\n    } else {                   //eg_v > eg_u\n      sub_(eg_v, eg_u);\n      sub_(eg_C, eg_A);\n      sub_(eg_D, eg_B);\n    }\n\n    if (equalsInt(eg_u, 0)) {\n      while (negative(eg_C)) //make sure answer is nonnegative\n        add_(eg_C, n);\n      copy_(x, eg_C);\n\n      if (!equalsInt(eg_v, 1)) { //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x, 0);\n        return 0;\n      }\n      return 1;\n    }\n  }\n}\n\n//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\nfunction inverseModInt(x: number, n: number): number {\n  var a=1, b=0, t;\n  for (;;) {\n    if (x==1) return a;\n    if (x==0) return 0;\n    b-=a*Math.floor(n/x);\n    //$off\n    n%=x;\n\n    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=\n    if (n==0) return 0;\n    a-=b*Math.floor(x/n);\n    //$off\n    x%=n;\n  }\n  //eslint-disable-next-line\n  return 0\n}\n\n//this deprecated function is for backward compatibility only.\nfunction inverseModInt_(x: number, n: number) {\n   return inverseModInt(x, n);\n}\n\n\n//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n//     v = GCD_(x,y) = a*x-b*y\n//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\nexport function eGCD_(x: Bytes, y: Bytes, v: Bytes, a: Bytes, b: Bytes) {\n  var g=0;\n  var k=Math.max(x.length, y.length);\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n  while (!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even\n    halve_(x);\n    halve_(y);\n    g++;\n  }\n  copy_(eg_u, x);\n  copy_(v, y);\n  copyInt_(eg_A, 1);\n  copyInt_(eg_B, 0);\n  copyInt_(eg_C, 0);\n  copyInt_(eg_D, 1);\n  for (;;) {\n    while (!(eg_u[0]&1)) {  //while u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);\n      } else {\n        add_(eg_A, y);  halve_(eg_A);\n        sub_(eg_B, x);  halve_(eg_B);\n      }\n    }\n\n    while (!(v[0]&1)) {  //while v is even\n      halve_(v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);\n      } else {\n        add_(eg_C, y);  halve_(eg_C);\n        sub_(eg_D, x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(v, eg_u)) { //v<=u\n      sub_(eg_u, v);\n      sub_(eg_A, eg_C);\n      sub_(eg_B, eg_D);\n    } else {                //v>u\n      sub_(v, eg_u);\n      sub_(eg_C, eg_A);\n      sub_(eg_D, eg_B);\n    }\n    if (equalsInt(eg_u, 0)) {\n      while (negative(eg_C)) {   //make sure a (C) is nonnegative\n        add_(eg_C, y);\n        sub_(eg_D, x);\n      }\n      multInt_(eg_D, -1);  ///make sure b (D) is nonnegative\n      copy_(a, eg_C);\n      copy_(b, eg_D);\n      leftShift_(v, g);\n      return;\n    }\n  }\n}\n\n\n//is bigInt x negative?\nfunction negative(x: Bytes) {\n  return ((x[x.length-1]>>(bpe-1))&1);\n}\n\n\n//is (x << (shift*bpe)) > y?\n//x and y are nonnegative bigInts\n//shift is a nonnegative integer\nfunction greaterShift(x: Bytes, y: Bytes, shift: number) {\n  var i, kx=x.length, ky=y.length;\n  k=((kx+shift)<ky) ? (kx+shift) : ky;\n  for (i=ky-1-shift; i<kx && i>=0; i++)\n    if (x[i]>0)\n      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger\n  for (i=kx-1+shift; i<ky; i++)\n    if (y[i]>0)\n      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n  for (i=k-1; i>=shift; i--)\n    if      (x[i-shift]>y[i]) return 1;\n    else if (x[i-shift]<y[i]) return 0;\n  return 0;\n}\n\n//is x > y? (x and y both nonnegative)\nexport function greater(x: Bytes, y: Bytes) {\n  var i;\n  var k=(x.length<y.length) ? x.length : y.length;\n\n  for (i=x.length; i<y.length; i++)\n    if (y[i])\n      return 0;  //y has more digits\n\n  for (i=y.length; i<x.length; i++)\n    if (x[i])\n      return 1;  //x has more digits\n\n  for (i=k-1; i>=0; i--)\n    if (x[i]>y[i])\n      return 1;\n    else if (x[i]<y[i])\n      return 0;\n  return 0;\n}\n\n//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.\n//x must have at least one leading zero element.\n//y must be nonzero.\n//q and r must be arrays that are exactly the same length as x. (Or q can have more).\n//Must have x.length >= y.length >= 2.\nexport function divide_(x: Bytes, y: Bytes, q: Bytes, r: Bytes) {\n  var kx, ky;\n  var i, j, y1, y2, c, a, b;\n  copy_(r, x);\n  for (ky=y.length; y[ky-1]==0; ky--); //ky is number of elements in y, not including leading zeros\n\n  //normalize: ensure the most significant element of y has its highest bit set\n  b=y[ky-1];\n  for (a=0; b; a++)\n    b>>=1;\n  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n  leftShift_(y, a);  //multiply both by 1<<a now, then divide both by that at the end\n  leftShift_(r, a);\n\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\n  for (kx=r.length; r[kx-1]==0 && kx>ky; kx--); //kx is number of elements in normalized x, not including leading zeros\n\n  copyInt_(q, 0);                      // q=0\n  while (!greaterShift(y, r, kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r, y, kx-ky);             //   r=r-leftShift_(y,kx-ky)\n    q[kx-ky]++;                       //   q[kx-ky]++;\n  }                                   // }\n\n  for (i=kx-1; i>=ky; i--) {\n    if (r[i]==y[ky-1])\n      q[i-ky]=mask;\n    else\n      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);\n\n    //The following for(;;) loop is equivalent to the commented while loop,\n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;\n    for (;;) {\n      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];\n      c=y2>>bpe;\n      y2=y2 & mask;\n      y1=c+q[i-ky]*y[ky-1];\n      c=y1>>bpe;\n      y1=y1 & mask;\n\n      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i])\n        q[i-ky]--;\n      else\n        break;\n    }\n\n    linCombShift_(r, y, -q[i-ky], i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)\n    if (negative(r)) {\n      addShift_(r, y, i-ky);         //r=r+leftShift_(y,i-ky)\n      q[i-ky]--;\n    }\n  }\n\n  rightShift_(y, a);  //undo the normalization step\n  rightShift_(r, a);  //undo the normalization step\n}\n\n//do carries and borrows so each element of the bigInt x fits in bpe bits.\nfunction carry_(x: Bytes) {\n  var i, k, c, b;\n  k=x.length;\n  c=0;\n  for (i=0; i<k; i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//return x mod n for bigInt x and integer n.\nfunction modInt(x: Bytes, n: number) {\n  var i, c=0;\n  for (i=x.length-1; i>=0; i--)\n    c=(c*radix+x[i])%n;\n  return c;\n}\n\n//convert the integer t into a bigInt with at least the given number of bits.\n//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n//Pad the array with leading zeros so that it has at least minSize elements.\n//There will always be at least one leading 0 element.\nexport function int2bigInt(t: number, bits: number, minSize: number) {\n  var i, k;\n  k=Math.ceil(bits/bpe)+1;\n  k=minSize>k ? minSize : k;\n  var buff=new Array(k);\n  copyInt_(buff, t);\n  return buff;\n}\n\n//return the bigInt given a string representation in a given base.\n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\nexport function str2bigInt(s: string, base: number, minSize?: number): Bytes {\n  var d, i, x, y, kk;\n  var k=s.length;\n  if (base==-1) { //comma-separated list of array elements in decimal\n    x=new Array(0);\n    for (;;) {\n      y=new Array(x.length+1);\n      for (i=0; i<x.length; i++)\n        y[i+1]=x[i];\n      y[0]=parseInt(s, 10); //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7\n      x=y;\n      d=s.indexOf(',', 0);\n      if (d<1)\n        break;\n      //$off\n      s=s.substring(d+1);\n      if (s.length==0)\n        break;\n    }\n    //$off\n    if (x.length<minSize) {\n      //$off\n      y=new Array(minSize);\n      copy_(y, x);\n      return y;\n    }\n    return x;\n  }\n\n  x=int2bigInt(0, base*k, 0);\n  for (i=0; i<k; i++) {\n    d=digitsStr.indexOf(s.substring(i, i+1), 0);\n    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36\n      d-=26;\n    if (d>=base || d<0) {   //stop at first illegal character\n      break;\n    }\n    multInt_(x, base);\n    addInt_(x, d);\n  }\n\n  for (k=x.length; k>0 && !x[k-1]; k--); //strip off leading zeros\n  //$off\n  k=minSize>k+1 ? minSize : k+1;\n  //$off\n  y=new Array(k);\n  //$off\n  kk=k<x.length ? k : x.length;\n  //$off\n  for (i=0; i<kk; i++)\n    y[i]=x[i];\n  //$off\n  for (;i<k; i++)\n    y[i]=0;\n  return y;\n}\n\n//is bigint x equal to integer y?\n//y must have less than bpe bits\nexport function equalsInt(x: Bytes, y: number) {\n  var i;\n  if (x[0]!=y)\n    return 0;\n  for (i=1; i<x.length; i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//are bigints x and y equal?\n//this works even if x and y are different lengths and have arbitrarily many leading zeros\nfunction equals(x: Bytes, y: Bytes) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0; i<k; i++)\n    if (x[i]!=y[i])\n      return 0;\n  if (x.length>y.length) {\n    for (;i<x.length; i++)\n      if (x[i])\n        return 0;\n  } else {\n    for (;i<y.length; i++)\n      if (y[i])\n        return 0;\n  }\n  return 1;\n}\n\n//is the bigInt x equal to zero?\nexport function isZero(x: Bytes) {\n  var i;\n  for (i=0; i<x.length; i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//convert a bigInt into a string in a given base, from base 2 up to base 95.\n//Base -1 prints the contents of the array representing the number.\nexport function bigInt2str(x: Bytes, base: number) {\n  var i, t, s='';\n\n  if (s6.length!=x.length)\n    s6=dup(x);\n  else\n    copy_(s6, x);\n\n  if (base==-1) { //return the list of array contents\n    for (i=x.length-1; i>0; i--)\n      s+=x[i]+',';\n    s+=x[0];\n  }\n  else { //return it in the given base\n    while (!isZero(s6)) {\n      t=divInt_(s6, base);  //t=s6 % base; s6=floor(s6/base);\n      s=digitsStr.substring(t, t+1)+s;\n    }\n  }\n  if (s.length==0)\n    s='0';\n  return s;\n}\n\n//returns a duplicate of bigInt x\nexport function dup(x: Bytes) {\n  var i;\n  buff=new Array(x.length);\n  copy_(buff, x);\n  return buff;\n}\n\n//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).\nexport function copy_(x: Bytes, y: Bytes) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0; i<k; i++)\n    x[i]=y[i];\n  for (i=k; i<x.length; i++)\n    x[i]=0;\n}\n\n//do x=y on bigInt x and integer y.\nexport function copyInt_(x: Bytes, n: number) {\n  var i, c;\n  var len = x.length; //TODO .length in for loop have perfomance costs. Bench this\n  for (c=n, i=0; i<len; i++) {\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nexport function addInt_(x: Bytes, n: number) {\n  var i, k, c, b;\n  x[0]+=n;\n  k=x.length;\n  c=0;\n  for (i=0; i<k; i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n    if (!c) return; //stop carrying as soon as the carry is zero\n  }\n}\n\n//right shift bigInt x by n bits.  0 <= n < bpe.\nexport function rightShift_(x: Bytes, n: number) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=0; i<x.length-k; i++) //right shift x by k elements\n      x[i]=x[i+k];\n    for (;i<x.length; i++)\n      x[i]=0;\n    //$off\n    n%=bpe;\n  }\n  for (i=0; i<x.length-1; i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));\n  }\n  x[i]>>=n;\n}\n\n//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\nfunction halve_(x: Bytes) {\n  var i;\n  for (i=0; i<x.length-1; i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));\n  }\n  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same\n}\n\n//left shift bigInt x by n bits.\nexport function leftShift_(x: Bytes, n: number) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=x.length; i>=k; i--) //left shift x by k elements\n      x[i]=x[i-k];\n    for (;i>=0; i--)\n      x[i]=0;\n    //$off\n    n%=bpe;\n  }\n  if (!n)\n    return;\n  for (i=x.length-1; i>0; i--) {\n    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));\n  }\n  x[i]=mask & (x[i]<<n);\n}\n\n//do x=x*n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction multInt_(x: Bytes, n: number) {\n  var i, k, c, b;\n  if (!n)\n    return;\n  k=x.length;\n  c=0;\n  for (i=0; i<k; i++) {\n    c+=x[i]*n;\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//do x=floor(x/n) for bigInt x and integer n, and return the remainder\nfunction divInt_(x: Bytes, n: number) {\n  var i, r=0, s;\n  for (i=x.length-1; i>=0; i--) {\n    s=r*radix+x[i];\n    x[i]=Math.floor(s/n);\n    r=s%n;\n  }\n  return r;\n}\n\n//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n//x must be large enough to hold the answer.\nfunction linComb_(x: Bytes, y: Bytes, a: number, b: number) {\n  var i, c, k, kk;\n  k=x.length<y.length ? x.length : y.length;\n  kk=x.length;\n  for (c=0, i=0; i<k; i++) {\n    c+=a*x[i]+b*y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k; i<kk; i++) {\n    c+=a*x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n//x must be large enough to hold the answer.\nfunction linCombShift_(x: Bytes, y: Bytes, b: number, ys: number) {\n  var i, c, k, kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0, i=ys; i<k; i++) {\n    c+=x[i]+b*y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k; c && i<kk; i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction addShift_(x: Bytes, y: Bytes, ys: number) {\n  var i, c, k, kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0, i=ys; i<k; i++) {\n    c+=x[i]+y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k; c && i<kk; i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction subShift_(x: Bytes, y: Bytes, ys: number) {\n  var i, c, k, kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0, i=ys; i<k; i++) {\n    c+=x[i]-y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k; c && i<kk; i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-y for bigInts x and y.\n//x must be large enough to hold the answer.\n//negative answers will be 2s complement\nexport function sub_(x: Bytes, y: Bytes) {\n  var i, c, k, kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0, i=0; i<k; i++) {\n    c+=x[i]-y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k; c && i<x.length; i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+y for bigInts x and y.\n//x must be large enough to hold the answer.\nexport function add_(x: Bytes, y: Bytes) {\n  var i, c, k, kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0, i=0; i<k; i++) {\n    c+=x[i]+y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k; c && i<x.length; i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x*y for bigInts x and y.  This is faster when y<x.\nfunction mult_(x: Bytes, y: Bytes) {\n  var i;\n  if (ss.length!=2*x.length)\n    ss=new Array(2*x.length);\n  copyInt_(ss, 0);\n  for (i=0; i<y.length; i++)\n    if (y[i])\n      linCombShift_(ss, x, y[i], i);   //ss=1*ss+y[i]*(x<<(i*bpe))\n  copy_(x, ss);\n}\n\n//do x=x mod n for bigInts x and n.\nfunction mod_(x: Bytes, n: Bytes) {\n  if (s4.length!=x.length)\n    s4=dup(x);\n  else\n    copy_(s4, x);\n  if (s5.length!=x.length)\n    s5=dup(x);\n  divide_(s4, n, s5, x);  //x = remainder of s4 / n\n}\n\n//do x=x*y mod n for bigInts x,y,n.\n//for greater speed, let y<x.\nfunction multMod_(x: Bytes, y: Bytes, n: Bytes) {\n  var i;\n  if (s0.length!=2*x.length)\n    s0=new Array(2*x.length);\n  copyInt_(s0, 0);\n  for (i=0; i<y.length; i++)\n    if (y[i])\n      linCombShift_(s0, x, y[i], i);   //s0=1*s0+y[i]*(x<<(i*bpe))\n  mod_(s0, n);\n  copy_(x, s0);\n}\n\n//do x=x*x mod n for bigInts x,n.\nfunction squareMod_(x: Bytes, n: Bytes) {\n  var i, j, d, c, kx, kn, k;\n  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x\n  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n  if (s0.length!=k)\n    s0=new Array(k);\n  copyInt_(s0, 0);\n  for (i=0; i<kx; i++) {\n    c=s0[2*i]+x[i]*x[i];\n    s0[2*i]=c & mask;\n    c>>=bpe;\n    for (j=i+1; j<kx; j++) {\n      c=s0[i+j]+2*x[i]*x[j]+c;\n      s0[i+j]=(c & mask);\n      c>>=bpe;\n    }\n    s0[i+kx]=c;\n  }\n  mod_(s0, n);\n  copy_(x, s0);\n}\n\n//return x with exactly k leading zero elements\nfunction trim(x: Bytes, k: number) {\n  var i, y;\n  for (i=x.length; i>0 && !x[i-1]; i--);\n  y=new Array(i+k);\n  copy_(y, x);\n  return y;\n}\n\n//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.\n//this is faster when n is odd.  x usually needs to have as many elements as n.\nfunction powMod_(x: Bytes, y: Bytes, n: Bytes) {\n  var k1, k2, kn, np;\n  if (s7.length!=n.length)\n    s7=dup(n);\n\n  //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n  if ((n[0]&1)==0) {\n    copy_(s7, x);\n    copyInt_(x, 1);\n    while (!equalsInt(y, 0)) {\n      if (y[0]&1)\n        multMod_(x, s7, n);\n      divInt_(y, 2);\n      squareMod_(s7, n);\n    }\n    return;\n  }\n\n  //calculate np from n for the Montgomery multiplications\n  copyInt_(s7, 0);\n  for (kn=n.length; kn>0 && !n[kn-1]; kn--);\n  np=radix-inverseModInt(modInt(n, radix), radix);\n  s7[kn]=1;\n  multMod_(x, s7, n);   // x = x * 2**(kn*bp) mod n\n\n  if (s3.length!=x.length)\n    s3=dup(x);\n  else\n    copy_(s3, x);\n  //$off\n  for (k1=y.length-1; k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y\n  if (y[k1]==0) {  //anything to the 0th power is 1\n    copyInt_(x, 1);\n    return;\n  }\n  for (k2=1<<(bpe-1); k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]\n  for (;;) {\n    if (!(k2>>=1)) {  //look at next bit of y\n      k1--;\n      if (k1<0) {\n        mont_(x, one, n, np);\n        return;\n      }\n      k2=1<<(bpe-1);\n    }\n    mont_(x, x, n, np);\n\n    if (k2 & y[k1]) //if next bit is a 1\n      mont_(x, s3, n, np);\n  }\n}\n\n\n//do x=x*y*Ri mod n for bigInts x,y,n,\n//  where Ri = 2**(-kn*bpe) mod n, and kn is the\n//  number of elements in the n array, not\n//  counting leading zeros.\n//x array must have at least as many elemnts as the n array\n//It's OK if x and y are the same variable.\n//must have:\n//  x,y < n\n//  n is odd\n//  np = -(n^(-1)) mod radix\nfunction mont_(x: Bytes, y: Bytes, n: Bytes, np: number) {\n  var i, j, c, ui, t, ks;\n  var kn=n.length;\n  var ky=y.length;\n\n  if (sa.length!=kn)\n    sa=new Array(kn);\n\n  copyInt_(sa, 0);\n\n  for (;kn>0 && n[kn-1]==0; kn--); //ignore leading zeros of n\n  for (;ky>0 && y[ky-1]==0; ky--); //ignore leading zeros of y\n  ks=sa.length-1; //sa will never have more than this many nonzero elements.\n\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n  for (i=0; i<kn; i++) {\n    t=sa[0]+x[i]*y[0];\n    ui=((t & mask) * np) & mask;  //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n    c=(t+ui*n[0]) >> bpe;\n    t=x[i];\n\n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n    j=1;\n    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    sa[j-1]=c & mask;\n  }\n\n  if (!greater(n, sa))\n    sub_(sa, n);\n  copy_(x, sa);\n}\n\n"]}