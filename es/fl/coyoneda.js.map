{"version":3,"sources":["../../src/fl/coyoneda.js"],"names":["Coyoneda","constructor","f","val","map","x","lower","ᐸCoyonedaᐳlift","a"],"mappings":";;AAOA,OAAO,MAAMA,QAAN,CAAkD;AAGvDC,cAAYC,CAAZ,EAA4BC,GAA5B,EAAsC;AACpC,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,GAAL,GAAWA,GAAX;AACD;AACDC,MAAOF,CAAP,EAAuC;AACrC,WAAO,IAAIF,QAAJ,CAAcK,CAAD,IAAUH,EAAE,KAAKA,CAAL,CAAOG,CAAP,CAAF,CAAvB,EAAqC,KAAKF,GAA1C,CAAP;AACD;AACDG,UAAQ;AAAE,WAAO,KAAKH,GAAL,CAASC,GAAT,CAAa,KAAKF,CAAlB,CAAP;AAA6B;AAVgB;;AAezD,OAAO,SAASK,cAAT,CAA2BF,CAA3B,EAAoD;AACzD,SAAO,IAAIL,QAAJ,CAAaQ,KAAKA,CAAlB,EAAqBH,CAArB,CAAP;AACD;;AAGD;;AAEA","file":"coyoneda.js","sourcesContent":["//@flow\n\nexport interface ᐸTypeclassᐳMap <T> {\n  map<S>(fn: (x: T) => S): ᐸTypeclassᐳMap<S>\n}\n\n\nexport class Coyoneda<I, O> implements ᐸTypeclassᐳMap<O> {\n  f: (x: I) => O\n  val: I[]\n  constructor(f: (x: I) => O, val: I[]) {\n    this.f = f\n    this.val = val\n  }\n  map<S>(f: (x: O) => S): Coyoneda<I, S> {\n    return new Coyoneda((x: I) => f(this.f(x)), this.val)\n  }\n  lower() { return this.val.map(this.f) }\n}\n\ntype MonoCoyoneda<I> = Coyoneda<I, I>\n\nexport function ᐸCoyonedaᐳlift<I>(x: I[]): MonoCoyoneda<I> {\n  return new Coyoneda(a => a, x)\n}\n\n\n// function Coyoneda(f, fa){ return new _Coyoneda(f, fa) }\n\n// Coyoneda.lift = function(x){ return Coyoneda(id, x) }\n"]}