{"version":3,"sources":["../../src/config-check/dc.js"],"names":["toDCNumber","defaults","dev","webogram","mainDev","path","protocol","port","dcList","id","host","mainProd","webogramProd","webogramDev","getDcConfig","Error","toString","getFlatDcMap","opts","dcMap","Map","fullUrl","join","set","parseServerConfig","config","withDefaults","cfg"],"mappings":"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","file":"dc.js","sourcesContent":["//@flow\n\nimport {\n  type DCNumber,\n  toDCNumber,\n} from 'Newtype'\n\ntype DcSettings = {\n  dev: boolean,\n  webogram: boolean,\n}\n\nconst defaults: DcSettings = {\n  dev     : false,\n  webogram: false,\n}\n\ntype SingleDc = {|\n  +id: number,\n  +host: string,\n|}\n\ntype DcConfig = {|\n  path: string,\n  protocol: 'http' | 'https',\n  port: number | false,\n  dcList: SingleDc[]\n|}\n\nconst mainDev: DcConfig = {\n  path    : 'apiw1',\n  protocol: 'http',\n  port    : 80,\n  dcList  : [\n    { id: 1, host: '149.154.175.10' },\n    { id: 2, host: '149.154.167.40' },\n    { id: 3, host: '149.154.175.117' },\n  ]\n}\n\nconst mainProd: DcConfig = {\n  path    : 'apiw1',\n  protocol: 'http',\n  port    : 80,\n  dcList  : [\n    { id: 1, host: '149.154.175.50' },\n    { id: 2, host: '149.154.167.51' },\n    { id: 3, host: '149.154.175.100' },\n    { id: 4, host: '149.154.167.91' },\n    { id: 5, host: '149.154.171.5' },\n  ]\n}\n\nconst webogramProd: DcConfig = {\n  path    : 'apiw1',\n  protocol: 'https',\n  port    : false,\n  dcList  : [\n    { id: 1, host: 'pluto.web.telegram.org' },\n    { id: 2, host: 'venus.web.telegram.org' },\n    { id: 3, host: 'aurora.web.telegram.org' },\n    { id: 4, host: 'vesta.web.telegram.org' },\n    { id: 5, host: 'flora.web.telegram.org' },\n  ]\n}\n\nconst webogramDev: DcConfig = {\n  path    : 'apiw_test1',\n  protocol: 'https',\n  port    : false,\n  dcList  : [\n    { id: 1, host: 'pluto.web.telegram.org' },\n    { id: 2, host: 'venus.web.telegram.org' },\n    { id: 3, host: 'aurora.web.telegram.org' },\n    { id: 4, host: 'vesta.web.telegram.org' },\n    { id: 5, host: 'flora.web.telegram.org' },\n  ]\n}\n\n/*\nconst webogramProdUpload = {\n  path    : 'apiw1',\n  protocol: 'https',\n  port    : false,\n  dcList  : [\n    { id: 1, host: 'pluto-1.web.telegram.org' },\n    { id: 2, host: 'venus-1.web.telegram.org' },\n    { id: 3, host: 'aurora-1.web.telegram.org' },\n    { id: 4, host: 'vesta-1.web.telegram.org' },\n    { id: 5, host: 'flora-1.web.telegram.org' },\n  ]\n}*/\n\nconst getDcConfig = ({ dev = false, webogram = false }: DcSettings) => {\n  switch (true) {\n    case dev && webogram: return webogramDev\n    case dev && !webogram: return mainDev\n    case !dev && webogram: return webogramProd\n    case !dev && !webogram: return mainProd\n    default: throw new Error(`Dc configuration error! dev: ${dev.toString()} webogram: ${webogram.toString()}`)\n  }\n}\n\nfunction getFlatDcMap({ dcList, ...opts }: DcConfig): Map<DCNumber, string> {\n  const dcMap: Map<DCNumber, string> = new Map()\n  const protocol = `${opts.protocol}://`\n  const port = opts.port\n    ? `:${opts.port}`\n    : ''\n  const path = `/${opts.path}`\n  for (const { id, host } of dcList) {\n    const fullUrl = [protocol, host, port, path].join('')\n    dcMap.set(/*::toDCNumber(*/id/*::)*/, fullUrl)\n  }\n  return dcMap\n}\n\nexport default function parseServerConfig(config: { dev?: boolean, webogram?: boolean } = {}) {\n  const withDefaults = { ...defaults, ...config }\n  const cfg = getDcConfig(withDefaults)\n  const dcMap = getFlatDcMap(cfg)\n  return dcMap\n}\n"]}