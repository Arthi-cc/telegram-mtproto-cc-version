{"version":3,"sources":["../../src/co-worker/worker.js"],"names":["tasks","console","info","post","postPlain","data","postMessage","result","postStar","err","selectTask","taskName","factorize","modPow","sha1Hash","aesEncrypt","aesDecrypt","Error","runTask","ctx","task","taskID","fn","onmessage","msg"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,SAAlB;;;AAGAC,QAAQC,IAAR,CAAa,0BAAb;;AAEA,IAAMC,OAAO,CAAC,MAAM;AAIlB,WAASC,SAAT,CAAmBC,IAAnB,EAA8B;AAC5BC,gBAAYD,IAAZ;AACD;AACD,MAAIE,SANJ,SAASC,QAAT,CAAkBH,IAAlB,EAA6B;AAC3BC,gBAAYD,IAAZ,EAAkB,GAAlB;AACD,GAID;AACA,MAAI;AACFE,WAAO,OAAP;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZF,aAASH,SAAT;AACAG,WAAO,OAAP;AACD,GALD,SAKU;AACR;AACA,WAAOA,MAAP;AACD;AACF,CAjBY,GAAb;;AAmBA,SAASG,UAAT,CAAoBC,QAApB,EAAyC;AACvC,UAAQA,QAAR;AACE,SAAK,WAAL;AAAoB,aAAOX,MAAMY,SAAb;AACpB,SAAK,SAAL;AAAoB,aAAOZ,MAAMa,MAAb;AACpB,SAAK,WAAL;AAAoB,aAAOb,MAAMc,QAAb;AACpB,SAAK,aAAL;AAAoB,aAAOd,MAAMe,UAAb;AACpB,SAAK,aAAL;AAAoB,aAAOf,MAAMgB,UAAb;AACpB;AACE,YAAM,IAAIC,KAAJ,CAAW,iBAAgBN,QAAS,EAApC,CAAN;AAPJ;AASD;;AAED,SAASO,OAAT,CAAiBC,GAAjB,EAA4B;AAC1B,MAAM,EAAEC,IAAF,EAAQC,MAAR,EAAgBhB,IAAhB,KAAyBc,GAA/B;AACA,MAAMG,KAAKZ,WAAWU,IAAX,CAAX;AACA,MAAMb,SAASe,GAAGjB,IAAH,CAAf;AACAF,OAAK,EAAEkB,MAAF,EAAUd,MAAV,EAAL;AACD;;AAEDgB,YAAaC,GAAD,IAAwB;AAClC,MAAI,OAAOA,IAAInB,IAAX,KAAoB,QAAxB,EAAkC;AAChC,QAAImB,IAAInB,IAAJ,KAAa,EAAjB,EACEJ,QAAQC,IAAR,CAAa,mBAAb,EADF,KAGED,QAAQC,IAAR,CAAa,4BAAb,EAA2CsB,IAAInB,IAA/C;AACF;AACD;AACDa,UAAQM,IAAInB,IAAZ;AACD,CATD","file":"worker.js","sourcesContent":["//@flow\n\nimport tasks from './tasks'\nimport type { TasksType, Task, WorkerMessage } from './index.h'\n\nconsole.info('Crypto worker registered')\n\nconst post = (() => {\n  function postStar(data: any) {\n    postMessage(data, '*')\n  }\n  function postPlain(data: any) {\n    postMessage(data)\n  }\n  let result = postStar\n  try {\n    result('ready')\n  } catch (err) {\n    result = postPlain\n    result('ready')\n  } finally {\n    //eslint-disable-next-line\n    return result\n  }\n})()\n\nfunction selectTask(taskName: TasksType) {\n  switch (taskName) {\n    case 'factorize'  : return tasks.factorize\n    case 'mod-pow'    : return tasks.modPow\n    case 'sha1-hash'  : return tasks.sha1Hash\n    case 'aes-encrypt': return tasks.aesEncrypt\n    case 'aes-decrypt': return tasks.aesDecrypt\n    default:\n      throw new Error(`Unknown task: ${taskName}`)\n  }\n}\n\nfunction runTask(ctx: Task) {\n  const { task, taskID, data } = ctx\n  const fn = selectTask(task)\n  const result = fn(data)\n  post({ taskID, result })\n}\n\nonmessage = (msg: WorkerMessage) => {\n  if (typeof msg.data === 'string') {\n    if (msg.data === '')\n      console.info('empty crypto task')\n    else\n      console.info('crypto task string message', msg.data)\n    return\n  }\n  runTask(msg.data)\n}\n\ndeclare function postMessage(data: string | Task, target?: '*'): void\n"]}