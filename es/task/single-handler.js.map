{"version":3,"sources":["../../src/task/single-handler.js"],"names":["append","reject","isEmpty","chain","filter","pipe","lensPath","over","defaultTo","cache","Maybe","Just","Nothing","dispatch","describeProtocolError","MAIN","NETWORKER_STATE","longToBytes","rshift32","guard","warning","random","toDCNumber","queryRequest","queryAck","Logger","applyServerTime","invoke","NetMessage","Config","log","appendRO","WriterFacade","state","next","x","read","getFlags","e","flags","selector","select","noEmpty","singleHandler","ctx","message","patches","result","inner","handleInner","isUnrelatedBody","unrel","handleUnrelated","error","info","patch","handleError","collected","summary","makeSummary","api","container","body","processAckChain","processAck","ackChain","ack","reqResendChain","reqResend","patchState","defArray","PatchState","constructor","value","data","emptyPatch","thread","uid","dc","cast","id","_","msg_ids","map","msg","fastCache","get","hasSent","msg_id","answer_msg_id","ackMessage","indexOf","lastResendReq","req_msg_id","resend_msg_ids","badMsgID","deleteResent","handleRpcResult","handleNewSession","handleBadSalt","handleBadNotify","emit","threadID","networkerDC","messageID","sessionID","session","lastServerMessages","push","length","shift","net","migrateRegexp","fileMigrateRegexp","floodWaitRegexp","err","code","test","handleFloodWait","handleFileMigrate","handleMigrateError","handleAuthUnreg","handleAuthRestart","numberFromError","regexp","matched","match","numStr","isFinite","num","parseInt","patchNothing","formatSeconds","seconds","Intl","DateTimeFormat","undefined","hour","minute","second","timeZone","format","Date","floodWarning","isIssue","fold","waitTime","handled","pred","methodResult","newDc","outID","req","futureAuth","authRequest","authReq","dc_id","resp","bytes","dcID","set","promise","RECOVERY_MODE","halt","recovery","init","seq","Promise","all","storageAdapter","nearestDC","then","DC_DETECTED","home","authKey","AUTH_UNREG","first_msg_id","server_salt","salt","first","bad_msg_id","badMsg","bad_msg_seqno","error_code","sentMessage","getSent","errorPrint","description","seq_no","Array","badMessage","updateSentMessage","resend","new_server_salt","newSalt","pushResend","sentMessageID","SENT","DEL","deleteSent","isAPI","connectionInited"],"mappings":"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","file":"single-handler.js","sourcesContent":["//@flow\n\nimport {\n  append,\n  reject,\n  isEmpty,\n  chain,\n  filter,\n  pipe,\n  lensPath,\n  over,\n  defaultTo,\n} from 'ramda'\nimport { cache } from 'fluture'\n// import { Just } from 'folktale/maybe'\nimport { Maybe } from 'apropos'\nconst { Just, Nothing } = Maybe\n\nimport {\n  type IncomingType,\n  type SystemMessage,\n  type MessageUnit,\n\n\n  type ᐸPatchᐳProcessAck,\n  type ᐸPatchᐳAck,\n  type ᐸPatchᐳHome,\n  type ᐸPatchᐳAuthKey,\n  type ᐸPatchᐳReqResend,\n  type ᐸPatchᐳResend,\n  type ᐸPatchᐳLastMesages,\n  type ᐸPatchᐳSalt,\n  type ᐸPatchᐳSession,\n\n  type ᐸPatchᐳSummary,\n} from './index.h'\nimport { dispatch } from 'State'\nimport describeProtocolError from './describe-protocol-error'\nimport { MAIN, NETWORKER_STATE } from 'Action'\nimport { longToBytes, rshift32 } from 'Bin'\nimport guard from 'Util/match-spec'\nimport warning from 'Util/warning'\nimport random from '../service/secure-random'\nimport { toDCNumber } from 'Newtype'\nimport {\n  type ᐸMTᐳNewSessionCreated,\n  type ᐸMTᐳBadSalt,\n  type ᐸMTᐳBadNotification,\n  type ᐸMTᐳRpcResult,\n} from 'Mtp'\nimport { queryRequest, queryAck } from '../state/query'\nimport Logger from 'mtproto-logger'\nimport { applyServerTime } from '../service/time-manager'\nimport invoke from '../service/invoke'\nimport { NetMessage } from '../service/networker/net-message'\nimport Config from 'ConfigProvider'\nconst log = Logger`single-handler`\n\n//eslint-disable-next-line\nconst appendRO = (() => {\n  /*:: declare function appendReadOnly<T>(\n    value: T,\n    list: $ReadOnlyArray<T>\n  ): $ReadOnlyArray<T> */\n  return (append /*:: , appendReadOnly */)\n})()\n\n/*::\ninterface Writer<+T> {\n  set next(x: T): void,\n  read(): $ReadOnlyArray<T>,\n}\n*/\nclass WriterFacade<T> implements Writer<T> {\n  state: $ReadOnlyArray<T> = []\n  set next(x: T) {\n    this.state = appendRO(x, this.state)\n  }\n  read(): $ReadOnlyArray<T> {\n    return this.state\n  }\n}\n\ntype Selector = <A, B>(\n  check: (((x: Flags) => ?true) & ((x: A) => B[]))\n) => (x: A) => B[]\n\nconst getFlags = (e): Flags => e.flags\n\nconst selector: Selector = (select) => pipe(\n  filter(pipe(getFlags, select, e => !!e)),\n  chain(select)\n)\n\nconst noEmpty = reject(isEmpty)\n\nexport default function singleHandler(\n  ctx: IncomingType,\n  message: MessageUnit\n): {\n  message: MessageUnit,\n  summary: ᐸPatchᐳSummary,\n} {\n  const { flags } = message\n  /*::\n  const inners = handleInner(ctx, message)\n  const unrels = handleUnrelated(ctx, message)\n  */\n  type Saved = ᐸPatchᐳSummary\n  const patches: Writer<ᐸPatchᐳSummary> = new WriterFacade\n  let result = message\n  if (flags.inner) {\n    patches.next = handleInner(ctx, message)\n  }\n  if (isUnrelatedBody(flags)) {\n    const unrel = handleUnrelated(ctx, message)\n    if (unrel !== void 0)\n      patches.next = unrel\n  }\n  if (flags.error) {\n    const { info, patch } = handleError(ctx, message)\n    patches.next = patch\n\n    result = info\n  }\n\n  const collected = patches.read()\n  // .map(({ flags, ...e }) => ({\n  //   flags: {\n  //     ...emptyPatch().flags,\n  //     ...flags,\n  //   },\n  //   ...e\n  // }))\n\n  // collected.forEach(e => log`patches`(e))\n  const summary = makeSummary(collected)\n  //$off\n  log`summary`(noEmpty(summary))\n  return {\n    message: result,\n    summary,\n  }\n}\n\nconst isUnrelatedBody = guard({\n  api      : false,\n  container: false,\n  body     : true,\n})\n\ntype Flags = {\n  +net?: true,\n  +processAck?: true,\n  +ack?: true,\n  +home?: true,\n  +authKey?: true,\n  +reqResend?: true,\n  +resend?: true, // as pushResend\n  +lastServerMessages?: true,\n  +salt?: true,\n  +session?: true,\n}\n\n//$off\nconst processAckChain = selector(e => e.processAck)\n//$off\nconst ackChain = selector(e => e.ack)\n//$off\n// const homeChain = selector(e => e.home)\n// //$off\n// const authChain = selector(e => e.authKey)\n//$off\nconst reqResendChain = selector(e => e.reqResend)\n// //$off\n// const resendChain = selector(e => e.resend)\n// //$off\n// const lastMessagesChain = selector(e => e.lastServerMessages)\n// //$off\n// const saltChain = selector(e => e.salt)\n// //$off\n// const sessionChain = selector(e => e.session)\n\n\n\nfunction makeSummary(collected): ᐸPatchᐳSummary {\n  const processAck: ᐸPatchᐳProcessAck[] = processAckChain(collected)\n  const ack: ᐸPatchᐳAck[] = ackChain(collected)\n  // const home: ᐸPatchᐳHome[] = homeChain(collected)\n  // const auth: ᐸPatchᐳAuthKey[] = authChain(collected)\n  const reqResend: ᐸPatchᐳReqResend[] = reqResendChain(collected)\n  // const resend: ᐸPatchᐳResend[] = resendChain(collected)\n  // const lastMessages: ᐸPatchᐳLastMesages[] = lastMessagesChain(collected)\n  // const salt: ᐸPatchᐳSalt[] = saltChain(collected)\n  // const session: ᐸPatchᐳSession[] = sessionChain(collected)\n\n  const result = {\n    processAck,\n    ack,\n    // home,\n    // auth,\n    reqResend,\n    // resend,\n    // lastMessages,\n    // salt,\n    // session,\n  }\n\n  return result\n}\nconst patchState = (() => {\n  const defArray = defaultTo([])\n  // const lensProcessAck = lensPath(['processAck'])\n  // const lensAck = lensPath(['ack'])\n  // const lensReqResend = lensPath(['reqResend'])\n  // const lensFlags = lensPath(['flags'])\n  class PatchState {\n    value: ᐸPatchᐳSummary\n    constructor(value: ᐸPatchᐳSummary) {\n      this.value = value\n    }\n    ack(data) {\n      return new PatchState({\n        // flags: { ...flags, ack: true },\n        ...this.value,\n        ack  : [...defArray(this.value.ack), ...data]\n      })\n    }\n    processAck(data) {\n      return new PatchState({\n        // flags     : { ...flags, processAck: true },\n        ...this.value,\n        processAck: [...defArray(this.value.processAck), ...data]\n      })\n    }\n    reqResend(data) {\n      return new PatchState({\n        // flags    : { ...flags, reqResend: true },\n        ...this.value,\n        reqResend: [...defArray(this.value.reqResend), ...data]\n      })\n    }\n  }\n  return () => new PatchState(emptyPatch())\n})()\n\n\nfunction handleUnrelated(ctx: IncomingType, message: MessageUnit) {\n  const { thread, uid, dc } = ctx\n  //$off\n  const cast: typeof message & { body: SystemMessage } = message\n  const { body } = cast\n  const { id } = cast\n\n  switch (body._) {\n    case 'msgs_ack': {\n      // body.msg_ids.forEach(thread.processMessageAck)\n      const msg_ids: string[] = body.msg_ids\n\n      return patchState()\n        .processAck(msg_ids.map(msg => ({ dc, id: msg })))\n        .value\n    }\n    case 'msg_detailed_info': {\n      if (!Config.fastCache.get(uid, dc).hasSent(body.msg_id)) {\n\n        const id: string = body.answer_msg_id\n        thread.ackMessage(id)\n        return patchState()\n          .ack([{ dc, id }])\n          .value\n      }\n      return emptyPatch()\n    }\n    case 'msg_new_detailed_info': {\n      const { answer_msg_id: id } = body\n      let state = patchState()\n      if (queryAck(uid, dc).indexOf(id) === -1)\n        state = state.reqResend([{ dc, id }])\n      return state\n        // .ack([{ dc, id }])\n        .value\n    }\n    case 'msgs_state_info': {\n      const { answer_msg_id } = body\n      // thread.ackMessage(answer_msg_id)\n      const lastResendReq = thread.lastResendReq\n      if (!lastResendReq) break\n      if (lastResendReq.req_msg_id != body.req_msg_id) break\n      // const resendDel = []\n      for (const badMsgID of lastResendReq.resend_msg_ids) {\n        // resendDel.push(badMsgID)\n        Config.fastCache.get(uid, dc).deleteResent(badMsgID)\n      }\n      const aId: string = answer_msg_id\n      return patchState()\n        .ack([{ dc, id: aId }])\n        .reqResend([{ dc, id }])\n        .value\n      // dispatch(NETWORKER_STATE.RESEND.DEL(resendDel, this.dcID))\n    }\n    case 'rpc_result': {\n      return handleRpcResult(ctx, message)\n    }\n    case 'new_session_created': {\n      // thread.emit('new-session', {\n      //   threadID   : thread.threadID,\n      //   networkerDC: message.dc,\n      //   messageID  : message.id,\n      //   message    : body\n      // })\n      return handleNewSession(ctx, message)\n    }\n    case 'bad_server_salt': {\n      return handleBadSalt(ctx, message)\n    }\n    case 'bad_msg_notification': {\n      return handleBadNotify(ctx, message)\n    }\n    default: {\n      const { id } = message\n      thread.ackMessage(message.id)\n      thread.emit('untyped-message', {\n        threadID   : thread.threadID,\n        networkerDC: message.dc,\n        message    : body,\n        messageID  : message.id,\n        sessionID  : Config.session.get(ctx.thread.uid, message.dc),\n        result     : message,\n      })\n      return patchState()\n        .ack([{ dc, id }])\n        .value\n    }\n  }\n}\n\nfunction handleInner(ctx: IncomingType, message: MessageUnit) {\n  const { thread } = ctx\n  const { id, dc } = message\n  if (thread.lastServerMessages.indexOf(id) != -1) {\n    // console.warn('[MT] Server same messageID: ', messageID)\n    // thread.ackMessage(id)\n    return patchState()\n      .ack([{ dc, id }])\n      .value\n  } else {\n    thread.lastServerMessages.push(id)\n    if (thread.lastServerMessages.length > 100) {\n      thread.lastServerMessages.shift()\n    }\n    return {\n      flags: {\n        net               : true,\n        lastServerMessages: true,\n      },\n      net: [{\n        dc,\n        lastServerMessages: [id],\n      }],\n      lastServerMessages: [{ dc, id }]\n    }\n  }\n}\n\nconst migrateRegexp = /^(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\\d+)/\nconst fileMigrateRegexp = /^(FILE_MIGRATE_)(\\d+)/\nconst floodWaitRegexp = /^(FLOOD_WAIT_)(\\d+)/\n\nfunction handleError(ctx: IncomingType, data: MessageUnit) {\n  const err: {\n    code: number,\n    message: string,\n    handled: boolean,\n  //$off\n  } = data.error\n  const {\n    code,\n    message,\n  } = err\n  if (floodWaitRegexp.test(message)) {\n    return handleFloodWait(message, data, code, ctx)\n  } else if (fileMigrateRegexp.test(message)) {\n    return handleFileMigrate(message, data, code, ctx)\n  } else if (migrateRegexp.test(message)) {\n    return handleMigrateError(message, data, code, ctx)\n  } else {\n    switch (message) {\n      case 'AUTH_KEY_UNREGISTERED': return handleAuthUnreg(ctx, message, data, code)\n      case 'AUTH_RESTART': return handleAuthRestart(message, data, code, )\n    }\n\n  }\n  return { info: data, patch: emptyPatch() }\n}\n\nfunction numberFromError(message, regexp): Maybe<number> {\n  const matched = message.match(regexp)\n  if (!matched || matched.length < 2) return Nothing()\n  const [ , , numStr] = matched\n  if (!isFinite(numStr)) return Nothing()\n  const num = parseInt(numStr, 10)\n  return Just(num)\n}\n\nconst patchNothing = data => () => ({\n  info : data,\n  patch: emptyPatch(),\n})\n\nconst formatSeconds = seconds =>\n  new Intl.DateTimeFormat(undefined, {\n    hour    : 'numeric',\n    minute  : 'numeric',\n    second  : 'numeric',\n    timeZone: 'UTC'\n  }).format(new Date(seconds * 1000))\n\nconst floodWarning = pipe(\n  formatSeconds,\n  warning({\n    isIssue: false,\n    message: ['Flood wait! Too many requests, you should wait', 'before new requests']\n  })\n)\n\nfunction handleFloodWait(message, data, code, ctx) {\n  return numberFromError(message, floodWaitRegexp)\n    .fold(\n      patchNothing(data),\n      waitTime => {\n        floodWarning(waitTime)\n        const info = {\n          ...data,\n          error: {\n            code,\n            message,\n            handled: true\n          }\n        }\n        return { info, patch: emptyPatch() }\n      })\n}\n\nfunction handleFileMigrate(message, data, code, ctx) {\n  const { uid, dc } = ctx\n  return numberFromError(message, fileMigrateRegexp)\n  /*:: .map(toDCNumber) */\n    .pred(dc => data.flags.methodResult)\n    .chain(newDc => queryRequest(uid, dc, data.methodResult.outID).map(req => ({\n      req,\n      newDc,\n    })))\n    .fold(\n      patchNothing(data),\n      ({ req, newDc }) => {\n        req.dc = Just(newDc)\n        const futureAuth = Config.authRequest.get(uid, newDc)\n        if (!futureAuth) {\n          const authReq = cache(invoke(uid, 'auth.exportAuthorization', { dc_id: newDc })\n            .map(resp => {\n              if (__DEV__)\n                console.log(resp)\n              return resp\n            })\n            .map((resp: mixed) => {\n              if (typeof resp === 'object' && resp != null) {\n                if (typeof resp.id === 'number') {\n                  const { id } = resp\n                  if (resp.bytes != null) {\n                    const { bytes } = resp\n                    return {\n                      id,\n                      bytes: [...bytes]\n                    }\n                  }\n                }\n              }\n              if (__DEV__)\n                console.error('incorrect', resp)\n              return resp\n            })\n            .chain(resp => invoke(uid, 'auth.importAuthorization', resp, { dcID: newDc })))\n          Config.authRequest.set(uid, newDc, authReq)\n          authReq.promise()\n        }\n        const info = {\n          ...data,\n          error: {\n            code,\n            message,\n            handled: true\n          }\n        }\n        return { info, patch: emptyPatch() }\n      })\n}\n\nfunction handleMigrateError(message, data, code, ctx) {\n  const { uid, dc } = ctx\n  return numberFromError(message, migrateRegexp)\n  /*:: .map(toDCNumber) */\n    .fold(\n      patchNothing(data),\n      newDc => {\n        dispatch(MAIN.RECOVERY_MODE({\n          halt    : dc,\n          recovery: newDc,\n          uid,\n        }), uid)\n        Config.fastCache.init(uid, dc)\n        Config.seq.set(uid, dc, 0)\n        Config.halt.set(uid, dc, true)\n        Config.halt.set(uid, newDc, false)\n        //$off\n        Config.session.set(uid, ctx.dc, null)\n        Promise.all([\n          Config.storageAdapter.set.dc(uid, newDc),\n          Config.storageAdapter.set.nearestDC(uid,  newDc)\n        ]).then(() => {\n          dispatch(MAIN.DC_DETECTED({\n            dc: newDc,\n            uid,\n          }), uid)\n        })\n        const patch = {\n          flags: {\n            net : true,\n            home: true,\n          },\n          net: [{\n            dc  : data.dc,\n            home: false,\n          }, {\n            dc  : newDc,\n            home: true,\n          }],\n          home: [newDc],\n        }\n        const info = {\n          ...data,\n          error: {\n            code,\n            message,\n            handled: true\n          }\n        }\n        return { info, patch }\n      })\n}\n\nfunction handleAuthRestart(message, data, code) {\n  const { dc } = data\n  // dispatch(MAIN.AUTH_UNREG(dc))\n  const patch = {\n    flags: {\n      net    : true,\n      authKey: true,\n    },\n    net: [{\n      dc,\n      authKey: [],\n    }],\n    authKey: [{\n      dc,\n      authKey: false,\n    }]\n  }\n  const info = {\n    ...data,\n    error: {\n      code,\n      message,\n      handled: true\n    }\n  }\n  return { info, patch }\n}\n\nfunction handleAuthUnreg(ctx: IncomingType, message, data, code) {\n  const { dc, uid } = ctx\n  dispatch(MAIN.AUTH_UNREG(dc), uid)\n  const patch = {\n    flags: {\n      net    : true,\n      authKey: true,\n    },\n    net: [{\n      dc,\n      authKey: [],\n    }],\n    authKey: [{\n      dc,\n      authKey: false,\n    }]\n  }\n  const info = {\n    ...data,\n    error: {\n      code,\n      message,\n      handled: true\n    }\n  }\n  return { info, patch }\n}\n\n//$off\nconst emptyPatch = (): ᐸPatchᐳSummary => ({\n  flags: {\n    /*::\n    net: true,\n    */\n  }\n})\n\nfunction handleNewSession(ctx: IncomingType, message: MessageUnit) {\n  const body: ᐸMTᐳNewSessionCreated = message.body\n  const { first_msg_id, server_salt } = body\n  const salt = longToBytes(server_salt)\n  const { dc, id } = message\n  // const session = new Array(8)\n  // random(session)\n  // Config.seq.set(ctx.thread.uid, dc, 0)\n  return {\n    flags: {\n      net       : true,\n      // session   : true,\n      salt      : true,\n      ack       : true,\n      processAck: true,\n    },\n    net: [{\n      dc,\n      salt,\n      // session,\n      seq  : 0,\n      first: first_msg_id, // Refers to outcoming api message\n    }],\n    // session: [{\n    //   dc,\n    //   session,\n    //   seq  : 0,\n    //   first: first_msg_id,\n    // }],\n    salt: [{\n      dc,\n      salt\n    }],\n    ack       : [{ dc, id }],\n    processAck: [{ dc, id: first_msg_id }],\n  }\n}\n\nfunction handleBadNotify(ctx: IncomingType, message: MessageUnit) {\n  const body: ᐸMTᐳBadNotification = message.body\n  const { dc, uid } = ctx\n  log`Bad msg notification`(message)\n  const {\n    bad_msg_id: badMsg,\n    bad_msg_seqno: seq,\n    error_code: code,\n  } = body\n  const sentMessage = Config.fastCache.get(uid, dc).getSent(badMsg)\n  const error = describeProtocolError(code || 0)\n  errorPrint: {\n    log`protocol error, code`(error.code)\n    log`protocol error, message`(error.message)\n    log`protocol error, description`(error.description)\n  }\n  if (!sentMessage || sentMessage.seq_no != seq) {\n    log`Bad msg notification, seq`(badMsg, seq)\n    // throw error\n  }\n  const { id } = message\n\n  let flags = { /*:: ack: true */ }\n\n  let data = {}\n\n  if (code === 16 || code === 17) {\n    if (applyServerTime(\n      ctx.thread.uid,\n      rshift32(id)\n    )) {\n\n      const session = new Array(8)\n      random(session)\n      flags = { ...flags, session: true }\n      data = {\n        ...data,\n        session: [{\n          dc,\n          session,\n          seq  : 0,\n          first: badMsg,\n        }],\n      }\n      const badMessage = ctx.thread.updateSentMessage(badMsg)\n      if (badMessage instanceof NetMessage) {\n        flags = { ...flags, resend: true }\n        data = {\n          ...data,\n          resend: [{ dc, id: badMsg }]\n        }\n      }\n      flags = { ...flags, ack: true }\n      data = {\n        ...data,\n        ack: [{ dc, id }],\n      }\n    }\n  }\n  return {\n    ...data,\n    flags,\n  }\n}\n\nfunction handleBadSalt(ctx: IncomingType, message: MessageUnit) {\n  const body: ᐸMTᐳBadSalt = message.body\n  log`Bad server salt`(message)\n  const {\n    bad_msg_id: badMsg,\n    bad_msg_seqno: seq,\n    error_code: code,\n    new_server_salt: newSalt,\n  } = body\n  const { dc, uid } = ctx\n  const sentMessage = Config.fastCache.get(uid, dc).getSent(badMsg)\n  const error = describeProtocolError(code || 0)\n  errorPrint: {\n    log`protocol error, code`(error.code)\n    log`protocol error, message`(error.message)\n    log`protocol error, description`(error.description)\n  }\n  if (!sentMessage || sentMessage.seq_no != seq) {\n    log`invalid message, seq`(badMsg, seq)\n    // throw error\n  }\n  const salt = longToBytes(newSalt)\n  const { id } = message\n  const session = new Array(8)\n  random(session)\n\n  ctx.thread.pushResend(badMsg)\n  return {\n    flags: {\n      net    : true,\n      session: true,\n      salt   : true,\n      ack    : true,\n      resend : true,\n    },\n    net: [{\n      dc,\n      salt,\n      session,\n      seq  : 0,\n      first: badMsg,\n    }],\n    session: [{\n      dc,\n      session,\n      seq  : 0,\n      first: badMsg,\n    }],\n    salt: [{\n      dc,\n      salt\n    }],\n    ack   : [{ dc, id }],\n    resend: [{ dc, id: badMsg }]\n  }\n}\n\nfunction handleRpcResult(ctx: IncomingType, message: MessageUnit) {\n  const { thread, dc, uid } = ctx\n  const { id } = message\n  const body: ᐸMTᐳRpcResult = message.body\n  thread.ackMessage(id)\n\n  const sentMessageID = body.req_msg_id\n  const sentMessage = Config.fastCache.get(uid, dc).getSent(sentMessageID)\n\n  // thread.processMessageAck(sentMessageID)\n  if (!sentMessage) {\n    if (__DEV__)\n      console.warn('No sent message!', sentMessageID, message)\n    return emptyPatch()\n  }\n  dispatch(NETWORKER_STATE.SENT.DEL([sentMessage], dc), uid)\n  Config.fastCache.get(uid, dc).deleteSent(sentMessage)\n  if (body.result) {\n    if (body.result._ == 'rpc_error') {\n      thread.emit('rpc-error', {\n        threadID   : thread.threadID,\n        networkerDC: dc,\n        error      : body.result,\n        sentMessage,\n        message\n      })\n\n    } else {\n      thread.emit('rpc-result', {\n        threadID   : thread.threadID,\n        networkerDC: dc,\n        message,\n        sentMessage,\n        result     : body.result\n      })\n    }\n  } else {\n    if (__DEV__)\n      console.warn('No result!', sentMessageID, message)\n  }\n  if (sentMessage.isAPI)\n    thread.connectionInited = true\n  return emptyPatch()\n}\n"]}